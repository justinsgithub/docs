{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Study Documentation \u00b6 objectives \u00b6 a site to optimize learning and work on weaknesses notes, code examples, and references to use in the future when working on projects current weaknesses \u00b6 code challenges front end frameworks current priorities \u00b6 learn the ins and outs of React.js, vocabulary practice on CodeWars lesser priorities \u00b6 shell scripting google analytics / SEO daily reminders \u00b6 search more, scroll less treat learning like a full body workout for your mind, workout the different areas of knowledge in smaller increments more frequently to optimize growth do breath work throughout the day speak problems / code out loud to help memory recall embrace failure, this helps ensure that you are adequately challenging yourself my links \u00b6 Public Directory \u00b6 Development Portfolio \u00b6 LinkedIn \u00b6 Twitter \u00b6 GitHub \u00b6","title":"Study Documentation"},{"location":"#study-documentation","text":"","title":"Study Documentation"},{"location":"#objectives","text":"a site to optimize learning and work on weaknesses notes, code examples, and references to use in the future when working on projects","title":"objectives"},{"location":"#current-weaknesses","text":"code challenges front end frameworks","title":"current weaknesses"},{"location":"#current-priorities","text":"learn the ins and outs of React.js, vocabulary practice on CodeWars","title":"current priorities"},{"location":"#lesser-priorities","text":"shell scripting google analytics / SEO","title":"lesser priorities"},{"location":"#daily-reminders","text":"search more, scroll less treat learning like a full body workout for your mind, workout the different areas of knowledge in smaller increments more frequently to optimize growth do breath work throughout the day speak problems / code out loud to help memory recall embrace failure, this helps ensure that you are adequately challenging yourself","title":"daily reminders"},{"location":"#my-links","text":"","title":"my links"},{"location":"#public-directory","text":"","title":"Public Directory"},{"location":"#development-portfolio","text":"","title":"Development Portfolio"},{"location":"#linkedin","text":"","title":"LinkedIn"},{"location":"#twitter","text":"","title":"Twitter"},{"location":"#github","text":"","title":"GitHub"},{"location":"essential-css/","text":"CSS Essentials \u00b6 CSS is a fundamental part of web design it controls the way your page looks without it you would only be able to display text on white backgrounds getting started \u00b6 referencing CSS \u00b6 3 different methods for CSS to be added to HTML external: refers to using a separate CSS file can load into the HTML using a link tag or @import method link tag is always referenced within the head of the document, with 2 attributes, rel and href rel stands for the relationship and uses the value of \"stylesheet\" href value is the path to the CSS file link is a void element so it does not need closing tag type is another attribute that was required in the previous versions of HTML, but is no longer needed in HTML5, the latest version, but if it is there it does not hurt either using an external stylesheet is recommended because it separates the CSS from HTML, making it easier to manage @import: imports 1 or more style sheets into an HTML file, can be used in a CSS or HTML file CSS file: @import url(\"/styles/buttons.css\") HTML file: <style> @import url(\"css/styles.css\") </style> @import is not used as often these days because it slows down page loading @import does not allow for parallel downloads @import must download an entire stylesheet before displaying the webpage @import is commonly used with preprocessors such as sass or when CSS is compiled inline: uses the style attribute, this overrides any styling from other CSS rules optimizing images \u00b6 retina display: a trademark term coined by Apple, and is used to describe with their high pixel density screens Retina = high pixel density introduced in 2010 with the iPhone 4, then in 2012 with the iPad 3, MacBook Pro, and iMac other manufacturers have their own versions pixel density: refers to the number of pixels within a space usually measured in pixels per inch (PPI) or dots per inch (DPI) Retina displays have double the number of PPI/DPI can fit 2 pixels within the same space of a non-Retina display the more pixels in the same area, the smaller the pixels are, which is how text and images appear smoother, clearer, and show more detail a simple way to support retina in non-Retina screens, is to use an image twice the size so if we use a 600px image and resize it with CSS to 300px, it will be similar to a Retina display, for both Retina and not Retina screens the image will display 300px wide, but in the Retina display, the Image will appear more crisp core concepts \u00b6 W3C specifications \u00b6 the World Wide Web Consortium (W3C) is an international community consisting of member organizations, a full-time staff, and the public together they develop web standards and guidelines including technical specifications for CSS CSS = Cascading Style Sheets the first 2 versions of CSS, level 1 and level 2 published the specifications as 1 whole document after version 2 the W3C decided to split the specification into independent modules to allow for faster incremental changes each module can level up independently some may be marked as level 3 if it is an update from CSS2 new modules such as flexbox start at level 1, there are others at level 4 these levels have no relation to the version of CSS CSS3 basically refers to any updates after CSS2, but it is all basically just CSS and most likely will not be a specific CSS4 syntax and terminology \u00b6 img is a selector, which are used to determine which HTML element to apply the styles to the whole snippet is called a declaration block, and may include 1 or more style rules wrapped in curly braces to contain the styles to the specific selector declarations are the style rules and are written using a key: value; pair many properties can be written using a shorthand and longhand syntax /* this is a comment */ codeguide.co is a good resource for a style guide img { width : 300 p ; } values and units \u00b6 color and property values \u00b6 type and universal selectors \u00b6 class & ID selectors \u00b6 descendant selectors \u00b6 grouping selectors \u00b6 inheritance & specificity \u00b6 cascade and importance \u00b6 psuedo-class selectors & links \u00b6 box model \u00b6 intro to box model \u00b6 inline block display \u00b6 box model properties \u00b6 box properties syntax and usage \u00b6 debugging box model \u00b6 padding margin border \u00b6 margin & layouts \u00b6 typography \u00b6 for the web \u00b6 changing font-family \u00b6 font-weight & font-style \u00b6 web fonts with @font-face \u00b6 Google Fonts \u00b6 font-size properties \u00b6 font shorthand \u00b6 text decoration, text-align, line-height \u00b6 float position \u00b6 intro to float \u00b6 float & clear properties \u00b6 float & collapsed container \u00b6 layouts & the box model \u00b6 position \u00b6 position & z-index \u00b6 flex box grid \u00b6 intro to grid & flexbox \u00b6 intro to flexbox \u00b6 orientation and ordering \u00b6 flexible sizing \u00b6 flexbox alignment \u00b6 intro to CSS grid \u00b6 explicit grid \u00b6 implicit grid \u00b6 grid placement properties \u00b6 advanced selectors \u00b6 relational selectors: combinators \u00b6 pseudo-class selectors: first & last \u00b6 fluid responsive layouts \u00b6 flexible background images \u00b6 media queries \u00b6 media queries widths breakpoints \u00b6 testing responsive layouts \u00b6","title":"CSS Essentials"},{"location":"essential-css/#css-essentials","text":"CSS is a fundamental part of web design it controls the way your page looks without it you would only be able to display text on white backgrounds","title":"CSS Essentials"},{"location":"essential-css/#getting-started","text":"","title":"getting started"},{"location":"essential-css/#referencing-css","text":"3 different methods for CSS to be added to HTML external: refers to using a separate CSS file can load into the HTML using a link tag or @import method link tag is always referenced within the head of the document, with 2 attributes, rel and href rel stands for the relationship and uses the value of \"stylesheet\" href value is the path to the CSS file link is a void element so it does not need closing tag type is another attribute that was required in the previous versions of HTML, but is no longer needed in HTML5, the latest version, but if it is there it does not hurt either using an external stylesheet is recommended because it separates the CSS from HTML, making it easier to manage @import: imports 1 or more style sheets into an HTML file, can be used in a CSS or HTML file CSS file: @import url(\"/styles/buttons.css\") HTML file: <style> @import url(\"css/styles.css\") </style> @import is not used as often these days because it slows down page loading @import does not allow for parallel downloads @import must download an entire stylesheet before displaying the webpage @import is commonly used with preprocessors such as sass or when CSS is compiled inline: uses the style attribute, this overrides any styling from other CSS rules","title":"referencing CSS"},{"location":"essential-css/#optimizing-images","text":"retina display: a trademark term coined by Apple, and is used to describe with their high pixel density screens Retina = high pixel density introduced in 2010 with the iPhone 4, then in 2012 with the iPad 3, MacBook Pro, and iMac other manufacturers have their own versions pixel density: refers to the number of pixels within a space usually measured in pixels per inch (PPI) or dots per inch (DPI) Retina displays have double the number of PPI/DPI can fit 2 pixels within the same space of a non-Retina display the more pixels in the same area, the smaller the pixels are, which is how text and images appear smoother, clearer, and show more detail a simple way to support retina in non-Retina screens, is to use an image twice the size so if we use a 600px image and resize it with CSS to 300px, it will be similar to a Retina display, for both Retina and not Retina screens the image will display 300px wide, but in the Retina display, the Image will appear more crisp","title":"optimizing images"},{"location":"essential-css/#core-concepts","text":"","title":"core concepts"},{"location":"essential-css/#w3c-specifications","text":"the World Wide Web Consortium (W3C) is an international community consisting of member organizations, a full-time staff, and the public together they develop web standards and guidelines including technical specifications for CSS CSS = Cascading Style Sheets the first 2 versions of CSS, level 1 and level 2 published the specifications as 1 whole document after version 2 the W3C decided to split the specification into independent modules to allow for faster incremental changes each module can level up independently some may be marked as level 3 if it is an update from CSS2 new modules such as flexbox start at level 1, there are others at level 4 these levels have no relation to the version of CSS CSS3 basically refers to any updates after CSS2, but it is all basically just CSS and most likely will not be a specific CSS4","title":"W3C specifications"},{"location":"essential-css/#syntax-and-terminology","text":"img is a selector, which are used to determine which HTML element to apply the styles to the whole snippet is called a declaration block, and may include 1 or more style rules wrapped in curly braces to contain the styles to the specific selector declarations are the style rules and are written using a key: value; pair many properties can be written using a shorthand and longhand syntax /* this is a comment */ codeguide.co is a good resource for a style guide img { width : 300 p ; }","title":"syntax and terminology"},{"location":"essential-css/#values-and-units","text":"","title":"values and units"},{"location":"essential-css/#color-and-property-values","text":"","title":"color and property values"},{"location":"essential-css/#type-and-universal-selectors","text":"","title":"type and universal selectors"},{"location":"essential-css/#class-id-selectors","text":"","title":"class &amp; ID selectors"},{"location":"essential-css/#descendant-selectors","text":"","title":"descendant selectors"},{"location":"essential-css/#grouping-selectors","text":"","title":"grouping selectors"},{"location":"essential-css/#inheritance-specificity","text":"","title":"inheritance &amp; specificity"},{"location":"essential-css/#cascade-and-importance","text":"","title":"cascade and importance"},{"location":"essential-css/#psuedo-class-selectors-links","text":"","title":"psuedo-class selectors &amp; links"},{"location":"essential-css/#box-model","text":"","title":"box model"},{"location":"essential-css/#intro-to-box-model","text":"","title":"intro to box model"},{"location":"essential-css/#inline-block-display","text":"","title":"inline block display"},{"location":"essential-css/#box-model-properties","text":"","title":"box model properties"},{"location":"essential-css/#box-properties-syntax-and-usage","text":"","title":"box properties syntax and usage"},{"location":"essential-css/#debugging-box-model","text":"","title":"debugging box model"},{"location":"essential-css/#padding-margin-border","text":"","title":"padding margin border"},{"location":"essential-css/#margin-layouts","text":"","title":"margin &amp; layouts"},{"location":"essential-css/#typography","text":"","title":"typography"},{"location":"essential-css/#for-the-web","text":"","title":"for the web"},{"location":"essential-css/#changing-font-family","text":"","title":"changing font-family"},{"location":"essential-css/#font-weight-font-style","text":"","title":"font-weight &amp; font-style"},{"location":"essential-css/#web-fonts-with-font-face","text":"","title":"web fonts with @font-face"},{"location":"essential-css/#google-fonts","text":"","title":"Google Fonts"},{"location":"essential-css/#font-size-properties","text":"","title":"font-size properties"},{"location":"essential-css/#font-shorthand","text":"","title":"font shorthand"},{"location":"essential-css/#text-decoration-text-align-line-height","text":"","title":"text decoration, text-align, line-height"},{"location":"essential-css/#float-position","text":"","title":"float position"},{"location":"essential-css/#intro-to-float","text":"","title":"intro to float"},{"location":"essential-css/#float-clear-properties","text":"","title":"float &amp; clear properties"},{"location":"essential-css/#float-collapsed-container","text":"","title":"float &amp; collapsed container"},{"location":"essential-css/#layouts-the-box-model","text":"","title":"layouts &amp; the box model"},{"location":"essential-css/#position","text":"","title":"position"},{"location":"essential-css/#position-z-index","text":"","title":"position &amp; z-index"},{"location":"essential-css/#flex-box-grid","text":"","title":"flex box grid"},{"location":"essential-css/#intro-to-grid-flexbox","text":"","title":"intro to grid &amp; flexbox"},{"location":"essential-css/#intro-to-flexbox","text":"","title":"intro to flexbox"},{"location":"essential-css/#orientation-and-ordering","text":"","title":"orientation and ordering"},{"location":"essential-css/#flexible-sizing","text":"","title":"flexible sizing"},{"location":"essential-css/#flexbox-alignment","text":"","title":"flexbox alignment"},{"location":"essential-css/#intro-to-css-grid","text":"","title":"intro to CSS grid"},{"location":"essential-css/#explicit-grid","text":"","title":"explicit grid"},{"location":"essential-css/#implicit-grid","text":"","title":"implicit grid"},{"location":"essential-css/#grid-placement-properties","text":"","title":"grid placement properties"},{"location":"essential-css/#advanced-selectors","text":"","title":"advanced selectors"},{"location":"essential-css/#relational-selectors-combinators","text":"","title":"relational selectors: combinators"},{"location":"essential-css/#pseudo-class-selectors-first-last","text":"","title":"pseudo-class selectors: first &amp; last"},{"location":"essential-css/#fluid-responsive-layouts","text":"","title":"fluid responsive layouts"},{"location":"essential-css/#flexible-background-images","text":"","title":"flexible background images"},{"location":"essential-css/#media-queries","text":"","title":"media queries"},{"location":"essential-css/#media-queries-widths-breakpoints","text":"","title":"media queries widths breakpoints"},{"location":"essential-css/#testing-responsive-layouts","text":"","title":"testing responsive layouts"},{"location":"computer-science/acronyms/","text":"Tech Acronyms \u00b6 tar \u00b6 tape archive files REST \u00b6 REpresentational State Transfer API \u00b6 Application Programming Interface ICANN \u00b6 Internet Corporation for Assigned Names and Numbers URLS \u00b6 Uniform Resource Locator","title":"Acronyms"},{"location":"computer-science/acronyms/#tech-acronyms","text":"","title":"Tech Acronyms"},{"location":"computer-science/acronyms/#tar","text":"tape archive files","title":"tar"},{"location":"computer-science/acronyms/#rest","text":"REpresentational State Transfer","title":"REST"},{"location":"computer-science/acronyms/#api","text":"Application Programming Interface","title":"API"},{"location":"computer-science/acronyms/#icann","text":"Internet Corporation for Assigned Names and Numbers","title":"ICANN"},{"location":"computer-science/acronyms/#urls","text":"Uniform Resource Locator","title":"URLS"},{"location":"computer-science/data-structures/","text":"Data Structures \u00b6 data structures are like containers that hold multiple pieces of data data structures give us a way to - organize data store data access data the amount of memory a data structure uses varies unlike primitive data types the amount of memory a data structure uses depends on factors such as - how they are allocated how they are initialized how they are maintained reference types are data store the address of a datatype in memory by using a pointer to reference it list of data structures \u00b6 non-exhaustive arrays linked lists stacks queues hash table trees heaps graphs organizing data \u00b6 just like organizing a room there are many different ways to organize data there are many factors that play a factor in planning a room's organization in a room we organize things based on the type of item it is a room will hold different types of items depending on what the room is used for we will also factor in the type of facility a room is in when we go to organize it another factor that might effect organizing a room is if it is a house or garage and the average weather at it's location this is the same type of complexity that goes into data structures data structures give us an easier way to assign variables and keep track of items as opposed to creating separate binding statements for each variable strings \u00b6 a non-primitive data type made up of the primitive character type a string is a data type made from chars since a string is made out of characters it is not considered a primitive data type a string is usually signified by surrounding text in quotes an array is commonly used in real life to name things strings are used to give us names as well as things like the title of a book the title of a book is made up of a string of individual characters array \u00b6 a collection of elements each element is an item identified by an index / key this could be like a collection of books that are stored on a shelf each spot on the shelf is labeled with a number starting at 0 set \u00b6 a collection of unique items order does not matter none of the elements are duplicated a way of grouping things with a common property an example could be a list of clothing, fingers, userIDs","title":"Data Structures"},{"location":"computer-science/data-structures/#data-structures","text":"data structures are like containers that hold multiple pieces of data data structures give us a way to - organize data store data access data the amount of memory a data structure uses varies unlike primitive data types the amount of memory a data structure uses depends on factors such as - how they are allocated how they are initialized how they are maintained reference types are data store the address of a datatype in memory by using a pointer to reference it","title":"Data Structures"},{"location":"computer-science/data-structures/#list-of-data-structures","text":"non-exhaustive arrays linked lists stacks queues hash table trees heaps graphs","title":"list of data structures"},{"location":"computer-science/data-structures/#organizing-data","text":"just like organizing a room there are many different ways to organize data there are many factors that play a factor in planning a room's organization in a room we organize things based on the type of item it is a room will hold different types of items depending on what the room is used for we will also factor in the type of facility a room is in when we go to organize it another factor that might effect organizing a room is if it is a house or garage and the average weather at it's location this is the same type of complexity that goes into data structures data structures give us an easier way to assign variables and keep track of items as opposed to creating separate binding statements for each variable","title":"organizing data"},{"location":"computer-science/data-structures/#strings","text":"a non-primitive data type made up of the primitive character type a string is a data type made from chars since a string is made out of characters it is not considered a primitive data type a string is usually signified by surrounding text in quotes an array is commonly used in real life to name things strings are used to give us names as well as things like the title of a book the title of a book is made up of a string of individual characters","title":"strings"},{"location":"computer-science/data-structures/#array","text":"a collection of elements each element is an item identified by an index / key this could be like a collection of books that are stored on a shelf each spot on the shelf is labeled with a number starting at 0","title":"array"},{"location":"computer-science/data-structures/#set","text":"a collection of unique items order does not matter none of the elements are duplicated a way of grouping things with a common property an example could be a list of clothing, fingers, userIDs","title":"set"},{"location":"computer-science/data-types/","text":"Data Types \u00b6 primitive data types \u00b6 a data types behavior may vary slighly between languages primitive data types each require a certain amount of fixed memory the fixed memory that makes up a primitive data type is the amount of 0s and 1s it uses a single 0 or a bit a boolean is represented by a single bit ( a 1 or a 0 ) in boolean a 0 = False and a 1 = True numbers within the same datatype take up the same memory no matter if one is higher than the other all data breaks down to 0s and 1s programming languages abstract the 0s and 1s away from us primitive types can also be called basic or value types primitive types are a fixed size because their size does not depend on the value inside if them there are data types that can be built out of primitive data types strings are an example of a datatype built from a primitive type because they are made from chars primitive data type list \u00b6 byte short int long float double boolean char numbers \u00b6 the difference between number data types is the range of values they can store type range bits short -32,768 to 32,767 16 int ~-2 billion to -2 billion 32 long -(2 63 ) to 2 63 64 float 7 decimal digits 32 double 16 decimal digits 64 signed negative or postive any unsigned postive double unsigned version boolean values \u00b6 a boolean is a true or false value named after Goerge Boolean used perform yes / no logical operations we give decision making boolean values everyday characters \u00b6 used for storing a single letter or non-number in code","title":"Data Types"},{"location":"computer-science/data-types/#data-types","text":"","title":"Data Types"},{"location":"computer-science/data-types/#primitive-data-types","text":"a data types behavior may vary slighly between languages primitive data types each require a certain amount of fixed memory the fixed memory that makes up a primitive data type is the amount of 0s and 1s it uses a single 0 or a bit a boolean is represented by a single bit ( a 1 or a 0 ) in boolean a 0 = False and a 1 = True numbers within the same datatype take up the same memory no matter if one is higher than the other all data breaks down to 0s and 1s programming languages abstract the 0s and 1s away from us primitive types can also be called basic or value types primitive types are a fixed size because their size does not depend on the value inside if them there are data types that can be built out of primitive data types strings are an example of a datatype built from a primitive type because they are made from chars","title":"primitive data types"},{"location":"computer-science/data-types/#primitive-data-type-list","text":"byte short int long float double boolean char","title":"primitive data type list"},{"location":"computer-science/data-types/#numbers","text":"the difference between number data types is the range of values they can store type range bits short -32,768 to 32,767 16 int ~-2 billion to -2 billion 32 long -(2 63 ) to 2 63 64 float 7 decimal digits 32 double 16 decimal digits 64 signed negative or postive any unsigned postive double unsigned version","title":"numbers"},{"location":"computer-science/data-types/#boolean-values","text":"a boolean is a true or false value named after Goerge Boolean used perform yes / no logical operations we give decision making boolean values everyday","title":"boolean values"},{"location":"computer-science/data-types/#characters","text":"used for storing a single letter or non-number in code","title":"characters"},{"location":"computer-science/digital-information/","text":"Digital Information \u00b6 innovation and technology \u00b6 history and innovation \u00b6 the first idea of a computer was created by Charles Babbage many of the concepts of computer logic today existed in Babbage's work back in the 19th century Ada Lovelace was considered the first programmer Alan Turing is largely credited with the birth of modern computer science Turing formalized the concepts of algorithm and computation using a general purpose computer called the turing machine all innovation goes back to the basics of computer science all future innovation will only exist because of work done today and in the past impact of coding and programming \u00b6 coding and programming are what allow all the hardware innovations that have been created, come alive the way that programming works with programming can happen at many levels to work with hardware you need to have a system that can work directly with the hardware components on your computer this can be processors, memory, or devices that are attached, through ports on your computer a software that does this is called the operating system the OS is the overall system that interfaces the software we work with everyday to the hardware that is in the machine API = Application Programming Interface to play a game on a computer, the operating system provides an API for how the game can interact with the hardware the OS defines what the game can and cannot do without the API, a game could do very bad things to the computer the API protects the system and creates a clearly defined way that programmers can work with hardware and other software makers of the operating system also provide a set of tools that allow developers to work with the system SDK = software development kit SDKs help developers build applications that can be used on top of the operating system the SDKs include 3 basic parts (Code, Language, Compiler / Interpreter): code: prebuilt sets of code that do alot of the heavy work for you defines things like numbers arithmetic working with the file system user interface controls like buttons and windows navigation, such as keyboard and mouse programming language: tells the computer what to do when a user wants to run the app interpreter / compiler: takes the instructions that are created and when needed, instructs the operating system on what to do interprets / compiles the instructions into binary numbers that the computer can understand no matter what you are doing on a computer, it needs to be translated to binary numbers for computers to understand computer communications \u00b6 yes and no answers with binary \u00b6 binary = a system with only two possible states (yes or no, on or off) different ways to represent binary state: boolean: a value that contains one of two options, true or false numbers: 1 and 0, 1 represents on and 0 represents off binary information can be stored and communicated by using states of on or off microchips have logic gates in them which uses electricity to determine the on and off signals storage devices can change and save binary states to be able to access them later networks can communicate by sending signals with on and off states defined within them a single binary state is called a bit, the smallest amount of storage you can measure using the basic bit unit, we can build larger and more complicated representations of information and create a way for us to take things that we recognize everyday and represent them using these tiny values called bits binary and bits \u00b6 we can represent the binary states of on and off as numbers the binary number system only uses digits, 1 and 0 for a binary state of on, it is represented by a 1 for a state of off, it is represented by a 0 storing a single value does not make much sense on its own, you would have to store multiple values in a single row to do that you would create a string of them, and since they are all numbers, you are just creating a larger number with multiple digits or bits a grouping of 8 binary digits is called a byte a byte is a common measure of data we use everyday a kilobyte is 1,024 bytes a megabyte is 1,024 kilobytes a gigabyte is 1,024 megabytes a terabyte is 1,024 gigabyte on a computer you might have a drive that can store a terabyte of data a terabyte can contain almost 9 trillion bits, 9 trillion individual states of on and off each of these bits holds an on or off state that holds a tiny part of a larger piece of information whether it is a single number, a piece of text called a string, a document, photo, song, movie, or a computer program all these things we work with every day are translated into bits that are stored, transmitted, and translated by computers and networks the process of taking information that we recognize today, like a string of text, and converting it to a binary number is called encoding you are taking something that we recognize in a way that humans can understand it, and are finding a way to convert it using a specific process into a string of binary digits that can be transmitted, processed, and stored by a computer or network using that same process but in reverse, those binary digits can be converted back into the information that we work with every day this is called decoding, it reconstitutes the files that are transmitted or accessed and presents them to us in a format that we can recognize in order for the encoding and decoding process to work, the bits that contain these values need to be stored accessed, or transmitted the way this is done is developing a protocol, or set of rules, for how bits are transmitted, and defines the basis for how digital communications work communicating with bits \u00b6 we can translate information and code it as bits in a number of ways since bits represent states of on or off, which we represent as 1s and 0s, we can communicate those to other people bitrate is the number of bits that are transmitted each second when communicating bits, both sides of the communication need to agree speed and size of the communication, how the bits are being sent digital communication \u00b6 there are 3 ways of communicating in bits when connecting to the internet: radio Wi-Fi networks are based on radio waves that transmit binary states, based on alternating the radio waves that send information by encoding information into binary data, it is then translated into these varying radio waves and can be transmitted, received, and converted back to binary data, and decoded into its original format wifi and radio communications are great for short distances, but if you take your laptop to far from the hotspot the signal gets weaker until, at some point it isn't strong enough to reliably send information radio can also be noisy when you have one hotspot transmission don't encounter much interference but if you have multiple hotspots you can create a lot of radio noise that can create interference and break down the reliability of the network there are certain bands up and down the various radio frequencies that are reserved for different types of transmissions, such as satellite information, FM and AM radio, or for other types of communication hotspots use unique channels to reduce interference and noise, but there are still limitations because of these limitations radio is generally used as a way to connect individual devices to a network electrical other formats like electricity can support larger and more complex communication with electricity you can send electric pulses over wires that represent binary states an ethernet cable is based on electric transmission of data. data that is encoded into binary states and transmitted is then sent using these eletric pulses electric and wire communications are the foundation of much of digital communication, especially within a home or office for instance, while you might use Wi-Fi that uses radio waves to transmit data, the hotspots you connect to are wired in a complex network of transmission lines that use electricity electricity is used for large amount of communications electricity does have some limitations with speed and reliability, especially along great distances where electricity starts falling short is where optical comes in optical optical or light communications uses pulses of light sent along a cable of glass or plastic the speed of light, when sent through glass, can be about 2,000 kilometers per second (124,000 miles per second) glass has different limitations, mostly cost optical cables are much more expensive than cables based on electricity optical cables are generally used for the long haul communications across continents and oceans together, radio, electrical, and optical power digital communication across the globe and even outside of it using special frequencies, we are able to send and receive digital information with satellites and probes, that we send to other planets in our solar system the further sats and probes go out, the longer it takes to get the information, which is why it can take months or even years to get all of the information recorded by an exploration probe visiting someplace in our solarsystem like Pluto and sending that information back to earth we represent how fast computers can send and receive information (bitrate) by measuring the bandwidth of the transmission, which is the theoretical maximum that a communication system can support bandwidth is represented at a specific bitrate if you are using a computer with a usb3 port, it has a bandwidth of 5 gigabits per second older Wi-Fi networks like 802.11b standard can transmit at 11 megabits per second newer Wi-Fi networks like 802.11ac can transmit at 1.3 gigabits per second, or 1300 megabits per second 802.11b,g,n,ac are names used to find the types of wireless network Wi-Fi networks can form to a standard, so devices of different types can communicate together, but you need to have matching support on both ends an older laptop that can understand 802.11g networks will not understand anything from an 802.11ac network most Wi-Fi networks can transmit across multiple standards the last thing to consider with digital communications is the time it takes to get a message from one side of the globe to the other, this is called latency latency is usually measure in milliseconds, or 1,000th of a second if you are communicating in 2 directions, latency can be an issue, since the longer it takes for one side to communicate to the other, that is doubled if the other side needs to send information back in response the lower the latency, the faster 2-way communications can take place whether it is with light, electricity, or radio waves, all of the information we communicate and transmit is encoded as binary data and can reach anyone on the planet (any maybe even another planet) number systems \u00b6 abstraction of numbers \u00b6 when we think of numbers, we think of digits, 0 - 9 for example: 723, this number represents a value, or a count of something, it could be 723 dollars, 723 yards of yarn, 723 gallons of milk, the number tells us how much of something there is, but numbers can be represented in different ways and mean different things 5 books, and V (roman numeral) books mean the same thing but are written completely differently Roman Numerals are another way of representing how much of something we have Roman Numerals follow a different set of rules using symbols like I,V,X,L,C, and M Roman Numerals are based on basic counting, starting at 1, symbols are added, and then at a certain point, the next largest symbol is used numbers can be represented in different ways decimal number system we represent numbers using the decimal number system the decimal number system uses base 10, which is why there are 10 digits that we use for numbers the other key part of a number system is the fact that you can have multiple digits we can take the number 5 and represent that as a single digit, but the number 15 needs 2 digits the next number to the left represents 10 classic odometers represent a good visual way we can represent counting in decimal you can think of the first digit being multiplied by the power of 0 (n 0 ) n(0) equals n * 1 as you move to the left, you can take the exponent and increase it by 1 for as long as the number is decimal: 7 2 3 total 100*7 10*2 1*3 723 700 20 1*3 723 octal: 7 2 3 total 64*7 8*2 1*3 723 448 16 3 467 hexadecimal: 7 2 3 total 256*7 16*2 1*3 723 1792 32 3 1827 hexadecimal numbers are often found in coding to represent colors e5411c \u00b6 each color(2 letters) need 1 byte to represent it, you would need 3 bytes per pixel the first 2 numbers represent red, the second 2 green, the third 2 blue this is controlling the amount of red, green, and blue light in each pixel when thinking about number systems, you have a few things that are the same: the base number which is the maximum range of possible digits multiple columns that are incremented exponentially the further you go to the left to make larger values, (the opposite applies as well, to make smaller numbers) with those rules you can apply them to any base number, including 2 base 2 is the basis of the binary number system, which serves as the foundational way computers store, communicate, and process information binary numbers \u00b6 binary states are the basis of how computers store, process, and share information using states of on or off using the binary number system we can represent these states using a base 2 number system, using 0 and 1 using the rules of numbers systems we can create a system for what a binary digit looks like we have a maximum of 2 possible digits, 0 and 1 we also have multiple columns that exponentially increases in value from right to left, based on 2, the base of the number system binary number decimal values total of decimal values 0 0 0 1 1 1 10 1+0 2 11 2+1 3 100 4+0+0 4 101 4+0+1 5 110 4+2+0 6 111 4+2+1 7 1000 8+0+0+0 8 1001 8+0+0+1 9 1010 8+0+1+0 10 1010 8+0+1+1 11 1100 8+4+0+0 12 1110 8+4+2+0 14 1111 8+4+2+1 15 10000 16+0+0+0+0 16 if the number ends in 0, it is even when the number is equal to a power of 2, we add a new column how to figure out the binary representation of a decimal value in binary: \u00b6 1. decimal - number = 39 , binary - number = ? 2. find the highest power of 2 less than decimal - number 3. highest - power = 32 4. divide highest - power by 2 until you get 1 5. 32 / 2 = 16 , 16 / 2 = 8 , 8 / 2 = 4 , 4 / 2 = 2 , 2 / 1 = 1 6. 5 divisions 7. current - binary - number = 1 + 5 digits 8. binary - number = current - binary - number = 100000 9. current - decimal - number = previous - decimal - number - highest - power 10. current - decimal - number = 7 11. find the highest power of 2 below current - decimal - number 12. highest - power = 4 13. divide highest - power by 2 until you get 1 or 0 14. 4 / 2 = 2 , 2 / 2 = 0 15. 2 divisions 16. current - binary - number = 1 + 2 digits 17. current - binary - number = 100 18. binary - number = previous - binary - number + current - binary - number = 10100 19. current - decimal - number = previous - decimal - number - highest - power 20. current - decimal - number = 3 21. find the highest power of 2 below current - decimal - number 22. highest - power = 2 23. divide highest - power by 2 until you get 1 or 0 24. 2 / 2 = 0 25. 1 division 26. current - binary - number = 1 + 1 digits 27. current - binary - number = 10 28. binary - number = previous - binary - number + current - binary - number = 10110 29. new - decimal - number = previous - decimal - number - highest - power 30. current - decimal - number = 1 31. find the highest power of 2 below current - decimal - number 32. highest - power = 0 33. divide highest - power by 2 until you get 1 or 0 34. 0 / 2 = 0 35. 0 division 36. current - binary - number = 0 + 1 digits 37. current - binary - number = 01 38. binary - number = previous - binary - number + current - binary - number = 10111 binary - number = 10111 this conversion process is the basis for all encoding bit size and values \u00b6 with binary numbers we can store numbers that we would ordinarily represent in decimal, in a format that the computer can store, send, or receive as we think about values, the more digits that are in the number, the larger the potential value a 2 bit number can store 4 different values digits different values max value x 0 1 1 xx 00 01 10 11 3 xxx 000 001 010 011 100 101 110 111 15 8 bit, 16 bit, 32 bit, 64 bit and higher are all representations of the number of digits that are available to store as a binary number an 8 bit column has 8 possible digits and a max value of 255, or 256 total values, including 0 2 8 = 256 2 16 = 65536 2 32 = 4,294,967,296 2 64 = 18 quintillion 1 1 1 1 1 1 1 1 128 64 32 16 8 4 2 1 using these bits, a computer can store values in memory a programmer needs to balance the storage requirements of their applications to the amount that is available to the program to help manage that, developers have different sizes and types of containers called variables that they can use to store information each variable type has a different bit size requirement, meaning that the variable has a limited size that the programmer can store values into overflow \u00b6 when a computer sets aside a specific amount of memory to store a value, it does so based on the number of bytes that might be required overflow happens when the space reserved is too small for the value it is trying to store the first digit in an unsigned number is 1 for a positive number and 0 for a negative number this results in weird and unpredictable errors the y2k bug / year 2000 but happened because programmers were only storing the last 2 digits of years and assuming the 19, which obviously caused problems when 2000 hit now years are stored with 4 digits, which is going to cause more problems in the year 10000 the number of seconds in 10000 will be 252288000000 computers store dates using binary, often by counting the number of seconds that have elapsed since a specified date for many systems and programming languages, dates are stored as the amount of seconds since 12:00AM, January 1st, 1970 the date gets stored in a 32-bit binary number Date: 2038-01-19 03:14:05 UTC Binary: 01111111 11111111 11111111 11111010 Decimal: 2147483642 Date: 1900-01-19 03:14:05 UTC encoding and sending text \u00b6 ASCII and Unicode \u00b6 using binary we can represent values of different types in a format that is native to a computer we can also do this with text encoding is taking text and converting to a unique code, the reverse is decoding the encoding and decoding have to agree on a standard we use numbers to represent letters 65 = A, 97 = a each number is converted to binary, 8 bits, 1 byte, 256 characters this encoding is called ASCII, American Standard Code for Information Interchange ASCII was first developed in the early 1960s over time the system expanded to include more characters at a certain point there were too many symbols or glyphs in the world to represent by 256 numbers, so ASCII was at it's limit a new standard called Unicode uses multiple bytes to represent thousands and thousands of symbols from languages all around the world the web is standardized on the UTF8 format, (8bit Unicode Transformation Format) UTF8 is backward compatible with ASCII each character is represented prefixed with a U and then followed by a 4 digit hexadecimal number (U + 0044 = D) 4 hexadecimal numbers require 2 bytes to store them, or 16 bits using just 2 bytes, over 65,000 symbols can be encoded and decoded there currently 3 plane of Unicode being used and other plane that are not used or can be customized planes can go all the way up to plane 16 all in all, Unicode can store 1,114,112 symbols(called code points) encoding formatted text \u00b6 when we want certain parts of text formatted, we need to mark the start point and end point so the computer knows words / sections we want formatted we use different markers for different formats working large data \u00b6 file sizes and bytes \u00b6 data has a unit of measure just like distance the smallest amount of storage is a single bit, a single 1 or 0, on or off we group bits into sets of 8 to make a byte the byte is the base form of measurement for data size, just like meter when we measure distance from this base size we can use prefixes to show magnitude of size measurement in data size is done in multiples of 1,024, instead of 1,000, to work with binary better kibibits is technically the accurate way to represent 1,024, but for the most part kilobyte is the same thing b = bit, KB = kilobyte 1 kilobyte (KB) = 1,024 bytes = about 2-3 paragraphs of text 1 megabyte(MB) = 1,024 kilobytes = about a 1,000 page book 1 gigabyte(GB) = 1,024 megabytes = about 1,000 books with 1,000 pages each 1 terabyte(TB) = 1,024 gigabytes = about 1,000,000 books with 1,000 pages each 1 petabyte(PB) = 1,024 terabytes = over 1 quadrillion 125 trillion 899 billion 906 million bytes there is also exabyte, zettabyte, yottabyte bandwidth = how much information can be transferred within a particular time a common Ethernet connection can send about 1Gb(gigabits) / second (128 MB / second) text compression \u00b6 compression allows data to occupy a smaller amount of space, but at the same time preserve the original data through compression protocols that encode and decode the compressed file compression looks through a file for matching words / patterns / sentences and replaces it with a unique Unicode character you perform multiple rounds of compression, then finding matching patterns of the unique Unicode characters as well encoding images \u00b6 the same encoding happens for images, but the program looks for patterns of matching pixels instead images that are based on pixels are called bitmaps for a picture which is HD resolution (1920px x 1080px) it is 2,073,600 pixels of data to store a HD res pic would require 6,220,800 bytes (about 5.9 megabytes) to store it 4k is 4 times HD, so it is 3,840 x 2,160(8.2 million pixel or 24 million bytes or 23 megabytes) with real image files there is some additional information that is stored in them, like the software that was used to make them, the owner of the file, and other information stored inside them so actual images will be a little bit larger than the above dimensions a video that is showing 30 frames per second means 30 individual images are playing each second the video plays an HD video that is 1 minute long is 1800 individual images that are shown in that minute 1 minute HD = 10.42 GBs (11 billion bytes) 1 minute 4K = 41.71 GBs above does not include audio Vectors are another way to store images instead of storing individual pixels, vectors store pictures using points instead of pixels, the points on the boxes are encoded based on a coordinate system the result is a much smaller file since it only contains point information for the boxes Vector images can also scale easily and redraw the lines proportionally when you make the image bigger with a bitmap the information is not the same so the image gets distorted or pixilated if it gets too big the more complex you make your vector, the more data it requires you cannot really represent photographs in vector form web browsers and apps can work with both formats a web browser can worth with bitmap formats like JPEG, PNG, and GIF a web browser can also work with Vector formats like SVG both of these are ways a browser can decode image files and render them for you to see image compression and file formats \u00b6 in theory there are an infinite number of colors you can create through mixing red green and blue light at a certain point people cannot tell the subtle difference between colors reducing color variations is one way to reduce the size of photographs and images one popular ways of doing this is the GIF format a GIF is based on a total number of 256 colors the image can use either a standard 256 color palette or it can select colors from the 24-bit RGB color space LZW is a lossless compression format lossless means it can reduce the file size further without degrading the visual quality of it JPEG is another image format JPEG compression is lossy, as it compresses to reduce the file size, it cannot be uncompressed into the exact original format, it will lossy, or lose details as it is opened and displayed again JPEG has a variable amount of compression that lets you trade off size for detail using the JPEG format you can define the amount of loss in detail when the image is compressed JPEG can have little to no loss of detail, or significant amounts PNG (Portable Network Graphics) is another format, which is an improved version of the GIF where pixels can contain 24-bit RGB color values, or 32-bit values which also include transparency, allowing images or content that appears behind it to show through the image all these formats are specific to representing images on screens there are other formats that are for print, photography and more in print color is stored by the amount of various types of inks that are use in the printing process unlike with light, pigment uses different colors to build the rainbow of colors that can be created with CMYK (cyan, magenta, yellow, black) as the primary colors for photography, camera sensors capture light information that isn't processed into specific colors photography formats, sometimes called RAW formats contain data, not pixels and need to be processed using software to create the color for each pixel the RAW file stores the radiometric characteristics of the picture, which can be things such as light intensity, color, and dynamic ranges within the subject captured by the sensor image files can vary in type, context, and format pixel images can rely on compression formats that can alter the balance between size and color or size and detail for screens it all comes down to how each format is decoded, to let the pixel know how much light to display","title":"Digital Information"},{"location":"computer-science/digital-information/#digital-information","text":"","title":"Digital Information"},{"location":"computer-science/digital-information/#innovation-and-technology","text":"","title":"innovation and technology"},{"location":"computer-science/digital-information/#history-and-innovation","text":"the first idea of a computer was created by Charles Babbage many of the concepts of computer logic today existed in Babbage's work back in the 19th century Ada Lovelace was considered the first programmer Alan Turing is largely credited with the birth of modern computer science Turing formalized the concepts of algorithm and computation using a general purpose computer called the turing machine all innovation goes back to the basics of computer science all future innovation will only exist because of work done today and in the past","title":"history and innovation"},{"location":"computer-science/digital-information/#impact-of-coding-and-programming","text":"coding and programming are what allow all the hardware innovations that have been created, come alive the way that programming works with programming can happen at many levels to work with hardware you need to have a system that can work directly with the hardware components on your computer this can be processors, memory, or devices that are attached, through ports on your computer a software that does this is called the operating system the OS is the overall system that interfaces the software we work with everyday to the hardware that is in the machine API = Application Programming Interface to play a game on a computer, the operating system provides an API for how the game can interact with the hardware the OS defines what the game can and cannot do without the API, a game could do very bad things to the computer the API protects the system and creates a clearly defined way that programmers can work with hardware and other software makers of the operating system also provide a set of tools that allow developers to work with the system SDK = software development kit SDKs help developers build applications that can be used on top of the operating system the SDKs include 3 basic parts (Code, Language, Compiler / Interpreter): code: prebuilt sets of code that do alot of the heavy work for you defines things like numbers arithmetic working with the file system user interface controls like buttons and windows navigation, such as keyboard and mouse programming language: tells the computer what to do when a user wants to run the app interpreter / compiler: takes the instructions that are created and when needed, instructs the operating system on what to do interprets / compiles the instructions into binary numbers that the computer can understand no matter what you are doing on a computer, it needs to be translated to binary numbers for computers to understand","title":"impact of coding and programming"},{"location":"computer-science/digital-information/#computer-communications","text":"","title":"computer communications"},{"location":"computer-science/digital-information/#yes-and-no-answers-with-binary","text":"binary = a system with only two possible states (yes or no, on or off) different ways to represent binary state: boolean: a value that contains one of two options, true or false numbers: 1 and 0, 1 represents on and 0 represents off binary information can be stored and communicated by using states of on or off microchips have logic gates in them which uses electricity to determine the on and off signals storage devices can change and save binary states to be able to access them later networks can communicate by sending signals with on and off states defined within them a single binary state is called a bit, the smallest amount of storage you can measure using the basic bit unit, we can build larger and more complicated representations of information and create a way for us to take things that we recognize everyday and represent them using these tiny values called bits","title":"yes and no answers with binary"},{"location":"computer-science/digital-information/#binary-and-bits","text":"we can represent the binary states of on and off as numbers the binary number system only uses digits, 1 and 0 for a binary state of on, it is represented by a 1 for a state of off, it is represented by a 0 storing a single value does not make much sense on its own, you would have to store multiple values in a single row to do that you would create a string of them, and since they are all numbers, you are just creating a larger number with multiple digits or bits a grouping of 8 binary digits is called a byte a byte is a common measure of data we use everyday a kilobyte is 1,024 bytes a megabyte is 1,024 kilobytes a gigabyte is 1,024 megabytes a terabyte is 1,024 gigabyte on a computer you might have a drive that can store a terabyte of data a terabyte can contain almost 9 trillion bits, 9 trillion individual states of on and off each of these bits holds an on or off state that holds a tiny part of a larger piece of information whether it is a single number, a piece of text called a string, a document, photo, song, movie, or a computer program all these things we work with every day are translated into bits that are stored, transmitted, and translated by computers and networks the process of taking information that we recognize today, like a string of text, and converting it to a binary number is called encoding you are taking something that we recognize in a way that humans can understand it, and are finding a way to convert it using a specific process into a string of binary digits that can be transmitted, processed, and stored by a computer or network using that same process but in reverse, those binary digits can be converted back into the information that we work with every day this is called decoding, it reconstitutes the files that are transmitted or accessed and presents them to us in a format that we can recognize in order for the encoding and decoding process to work, the bits that contain these values need to be stored accessed, or transmitted the way this is done is developing a protocol, or set of rules, for how bits are transmitted, and defines the basis for how digital communications work","title":"binary and bits"},{"location":"computer-science/digital-information/#communicating-with-bits","text":"we can translate information and code it as bits in a number of ways since bits represent states of on or off, which we represent as 1s and 0s, we can communicate those to other people bitrate is the number of bits that are transmitted each second when communicating bits, both sides of the communication need to agree speed and size of the communication, how the bits are being sent","title":"communicating with bits"},{"location":"computer-science/digital-information/#digital-communication","text":"there are 3 ways of communicating in bits when connecting to the internet: radio Wi-Fi networks are based on radio waves that transmit binary states, based on alternating the radio waves that send information by encoding information into binary data, it is then translated into these varying radio waves and can be transmitted, received, and converted back to binary data, and decoded into its original format wifi and radio communications are great for short distances, but if you take your laptop to far from the hotspot the signal gets weaker until, at some point it isn't strong enough to reliably send information radio can also be noisy when you have one hotspot transmission don't encounter much interference but if you have multiple hotspots you can create a lot of radio noise that can create interference and break down the reliability of the network there are certain bands up and down the various radio frequencies that are reserved for different types of transmissions, such as satellite information, FM and AM radio, or for other types of communication hotspots use unique channels to reduce interference and noise, but there are still limitations because of these limitations radio is generally used as a way to connect individual devices to a network electrical other formats like electricity can support larger and more complex communication with electricity you can send electric pulses over wires that represent binary states an ethernet cable is based on electric transmission of data. data that is encoded into binary states and transmitted is then sent using these eletric pulses electric and wire communications are the foundation of much of digital communication, especially within a home or office for instance, while you might use Wi-Fi that uses radio waves to transmit data, the hotspots you connect to are wired in a complex network of transmission lines that use electricity electricity is used for large amount of communications electricity does have some limitations with speed and reliability, especially along great distances where electricity starts falling short is where optical comes in optical optical or light communications uses pulses of light sent along a cable of glass or plastic the speed of light, when sent through glass, can be about 2,000 kilometers per second (124,000 miles per second) glass has different limitations, mostly cost optical cables are much more expensive than cables based on electricity optical cables are generally used for the long haul communications across continents and oceans together, radio, electrical, and optical power digital communication across the globe and even outside of it using special frequencies, we are able to send and receive digital information with satellites and probes, that we send to other planets in our solar system the further sats and probes go out, the longer it takes to get the information, which is why it can take months or even years to get all of the information recorded by an exploration probe visiting someplace in our solarsystem like Pluto and sending that information back to earth we represent how fast computers can send and receive information (bitrate) by measuring the bandwidth of the transmission, which is the theoretical maximum that a communication system can support bandwidth is represented at a specific bitrate if you are using a computer with a usb3 port, it has a bandwidth of 5 gigabits per second older Wi-Fi networks like 802.11b standard can transmit at 11 megabits per second newer Wi-Fi networks like 802.11ac can transmit at 1.3 gigabits per second, or 1300 megabits per second 802.11b,g,n,ac are names used to find the types of wireless network Wi-Fi networks can form to a standard, so devices of different types can communicate together, but you need to have matching support on both ends an older laptop that can understand 802.11g networks will not understand anything from an 802.11ac network most Wi-Fi networks can transmit across multiple standards the last thing to consider with digital communications is the time it takes to get a message from one side of the globe to the other, this is called latency latency is usually measure in milliseconds, or 1,000th of a second if you are communicating in 2 directions, latency can be an issue, since the longer it takes for one side to communicate to the other, that is doubled if the other side needs to send information back in response the lower the latency, the faster 2-way communications can take place whether it is with light, electricity, or radio waves, all of the information we communicate and transmit is encoded as binary data and can reach anyone on the planet (any maybe even another planet)","title":"digital communication"},{"location":"computer-science/digital-information/#number-systems","text":"","title":"number systems"},{"location":"computer-science/digital-information/#abstraction-of-numbers","text":"when we think of numbers, we think of digits, 0 - 9 for example: 723, this number represents a value, or a count of something, it could be 723 dollars, 723 yards of yarn, 723 gallons of milk, the number tells us how much of something there is, but numbers can be represented in different ways and mean different things 5 books, and V (roman numeral) books mean the same thing but are written completely differently Roman Numerals are another way of representing how much of something we have Roman Numerals follow a different set of rules using symbols like I,V,X,L,C, and M Roman Numerals are based on basic counting, starting at 1, symbols are added, and then at a certain point, the next largest symbol is used numbers can be represented in different ways decimal number system we represent numbers using the decimal number system the decimal number system uses base 10, which is why there are 10 digits that we use for numbers the other key part of a number system is the fact that you can have multiple digits we can take the number 5 and represent that as a single digit, but the number 15 needs 2 digits the next number to the left represents 10 classic odometers represent a good visual way we can represent counting in decimal you can think of the first digit being multiplied by the power of 0 (n 0 ) n(0) equals n * 1 as you move to the left, you can take the exponent and increase it by 1 for as long as the number is decimal: 7 2 3 total 100*7 10*2 1*3 723 700 20 1*3 723 octal: 7 2 3 total 64*7 8*2 1*3 723 448 16 3 467 hexadecimal: 7 2 3 total 256*7 16*2 1*3 723 1792 32 3 1827 hexadecimal numbers are often found in coding to represent colors","title":"abstraction of numbers"},{"location":"computer-science/digital-information/#e5411c","text":"each color(2 letters) need 1 byte to represent it, you would need 3 bytes per pixel the first 2 numbers represent red, the second 2 green, the third 2 blue this is controlling the amount of red, green, and blue light in each pixel when thinking about number systems, you have a few things that are the same: the base number which is the maximum range of possible digits multiple columns that are incremented exponentially the further you go to the left to make larger values, (the opposite applies as well, to make smaller numbers) with those rules you can apply them to any base number, including 2 base 2 is the basis of the binary number system, which serves as the foundational way computers store, communicate, and process information","title":"e5411c"},{"location":"computer-science/digital-information/#binary-numbers","text":"binary states are the basis of how computers store, process, and share information using states of on or off using the binary number system we can represent these states using a base 2 number system, using 0 and 1 using the rules of numbers systems we can create a system for what a binary digit looks like we have a maximum of 2 possible digits, 0 and 1 we also have multiple columns that exponentially increases in value from right to left, based on 2, the base of the number system binary number decimal values total of decimal values 0 0 0 1 1 1 10 1+0 2 11 2+1 3 100 4+0+0 4 101 4+0+1 5 110 4+2+0 6 111 4+2+1 7 1000 8+0+0+0 8 1001 8+0+0+1 9 1010 8+0+1+0 10 1010 8+0+1+1 11 1100 8+4+0+0 12 1110 8+4+2+0 14 1111 8+4+2+1 15 10000 16+0+0+0+0 16 if the number ends in 0, it is even when the number is equal to a power of 2, we add a new column","title":"binary numbers"},{"location":"computer-science/digital-information/#how-to-figure-out-the-binary-representation-of-a-decimal-value-in-binary","text":"1. decimal - number = 39 , binary - number = ? 2. find the highest power of 2 less than decimal - number 3. highest - power = 32 4. divide highest - power by 2 until you get 1 5. 32 / 2 = 16 , 16 / 2 = 8 , 8 / 2 = 4 , 4 / 2 = 2 , 2 / 1 = 1 6. 5 divisions 7. current - binary - number = 1 + 5 digits 8. binary - number = current - binary - number = 100000 9. current - decimal - number = previous - decimal - number - highest - power 10. current - decimal - number = 7 11. find the highest power of 2 below current - decimal - number 12. highest - power = 4 13. divide highest - power by 2 until you get 1 or 0 14. 4 / 2 = 2 , 2 / 2 = 0 15. 2 divisions 16. current - binary - number = 1 + 2 digits 17. current - binary - number = 100 18. binary - number = previous - binary - number + current - binary - number = 10100 19. current - decimal - number = previous - decimal - number - highest - power 20. current - decimal - number = 3 21. find the highest power of 2 below current - decimal - number 22. highest - power = 2 23. divide highest - power by 2 until you get 1 or 0 24. 2 / 2 = 0 25. 1 division 26. current - binary - number = 1 + 1 digits 27. current - binary - number = 10 28. binary - number = previous - binary - number + current - binary - number = 10110 29. new - decimal - number = previous - decimal - number - highest - power 30. current - decimal - number = 1 31. find the highest power of 2 below current - decimal - number 32. highest - power = 0 33. divide highest - power by 2 until you get 1 or 0 34. 0 / 2 = 0 35. 0 division 36. current - binary - number = 0 + 1 digits 37. current - binary - number = 01 38. binary - number = previous - binary - number + current - binary - number = 10111 binary - number = 10111 this conversion process is the basis for all encoding","title":"how to figure out the binary representation of a decimal value in binary:"},{"location":"computer-science/digital-information/#bit-size-and-values","text":"with binary numbers we can store numbers that we would ordinarily represent in decimal, in a format that the computer can store, send, or receive as we think about values, the more digits that are in the number, the larger the potential value a 2 bit number can store 4 different values digits different values max value x 0 1 1 xx 00 01 10 11 3 xxx 000 001 010 011 100 101 110 111 15 8 bit, 16 bit, 32 bit, 64 bit and higher are all representations of the number of digits that are available to store as a binary number an 8 bit column has 8 possible digits and a max value of 255, or 256 total values, including 0 2 8 = 256 2 16 = 65536 2 32 = 4,294,967,296 2 64 = 18 quintillion 1 1 1 1 1 1 1 1 128 64 32 16 8 4 2 1 using these bits, a computer can store values in memory a programmer needs to balance the storage requirements of their applications to the amount that is available to the program to help manage that, developers have different sizes and types of containers called variables that they can use to store information each variable type has a different bit size requirement, meaning that the variable has a limited size that the programmer can store values into","title":"bit size and values"},{"location":"computer-science/digital-information/#overflow","text":"when a computer sets aside a specific amount of memory to store a value, it does so based on the number of bytes that might be required overflow happens when the space reserved is too small for the value it is trying to store the first digit in an unsigned number is 1 for a positive number and 0 for a negative number this results in weird and unpredictable errors the y2k bug / year 2000 but happened because programmers were only storing the last 2 digits of years and assuming the 19, which obviously caused problems when 2000 hit now years are stored with 4 digits, which is going to cause more problems in the year 10000 the number of seconds in 10000 will be 252288000000 computers store dates using binary, often by counting the number of seconds that have elapsed since a specified date for many systems and programming languages, dates are stored as the amount of seconds since 12:00AM, January 1st, 1970 the date gets stored in a 32-bit binary number Date: 2038-01-19 03:14:05 UTC Binary: 01111111 11111111 11111111 11111010 Decimal: 2147483642 Date: 1900-01-19 03:14:05 UTC","title":"overflow"},{"location":"computer-science/digital-information/#encoding-and-sending-text","text":"","title":"encoding and sending text"},{"location":"computer-science/digital-information/#ascii-and-unicode","text":"using binary we can represent values of different types in a format that is native to a computer we can also do this with text encoding is taking text and converting to a unique code, the reverse is decoding the encoding and decoding have to agree on a standard we use numbers to represent letters 65 = A, 97 = a each number is converted to binary, 8 bits, 1 byte, 256 characters this encoding is called ASCII, American Standard Code for Information Interchange ASCII was first developed in the early 1960s over time the system expanded to include more characters at a certain point there were too many symbols or glyphs in the world to represent by 256 numbers, so ASCII was at it's limit a new standard called Unicode uses multiple bytes to represent thousands and thousands of symbols from languages all around the world the web is standardized on the UTF8 format, (8bit Unicode Transformation Format) UTF8 is backward compatible with ASCII each character is represented prefixed with a U and then followed by a 4 digit hexadecimal number (U + 0044 = D) 4 hexadecimal numbers require 2 bytes to store them, or 16 bits using just 2 bytes, over 65,000 symbols can be encoded and decoded there currently 3 plane of Unicode being used and other plane that are not used or can be customized planes can go all the way up to plane 16 all in all, Unicode can store 1,114,112 symbols(called code points)","title":"ASCII and Unicode"},{"location":"computer-science/digital-information/#encoding-formatted-text","text":"when we want certain parts of text formatted, we need to mark the start point and end point so the computer knows words / sections we want formatted we use different markers for different formats","title":"encoding formatted text"},{"location":"computer-science/digital-information/#working-large-data","text":"","title":"working large data"},{"location":"computer-science/digital-information/#file-sizes-and-bytes","text":"data has a unit of measure just like distance the smallest amount of storage is a single bit, a single 1 or 0, on or off we group bits into sets of 8 to make a byte the byte is the base form of measurement for data size, just like meter when we measure distance from this base size we can use prefixes to show magnitude of size measurement in data size is done in multiples of 1,024, instead of 1,000, to work with binary better kibibits is technically the accurate way to represent 1,024, but for the most part kilobyte is the same thing b = bit, KB = kilobyte 1 kilobyte (KB) = 1,024 bytes = about 2-3 paragraphs of text 1 megabyte(MB) = 1,024 kilobytes = about a 1,000 page book 1 gigabyte(GB) = 1,024 megabytes = about 1,000 books with 1,000 pages each 1 terabyte(TB) = 1,024 gigabytes = about 1,000,000 books with 1,000 pages each 1 petabyte(PB) = 1,024 terabytes = over 1 quadrillion 125 trillion 899 billion 906 million bytes there is also exabyte, zettabyte, yottabyte bandwidth = how much information can be transferred within a particular time a common Ethernet connection can send about 1Gb(gigabits) / second (128 MB / second)","title":"file sizes and bytes"},{"location":"computer-science/digital-information/#text-compression","text":"compression allows data to occupy a smaller amount of space, but at the same time preserve the original data through compression protocols that encode and decode the compressed file compression looks through a file for matching words / patterns / sentences and replaces it with a unique Unicode character you perform multiple rounds of compression, then finding matching patterns of the unique Unicode characters as well","title":"text compression"},{"location":"computer-science/digital-information/#encoding-images","text":"the same encoding happens for images, but the program looks for patterns of matching pixels instead images that are based on pixels are called bitmaps for a picture which is HD resolution (1920px x 1080px) it is 2,073,600 pixels of data to store a HD res pic would require 6,220,800 bytes (about 5.9 megabytes) to store it 4k is 4 times HD, so it is 3,840 x 2,160(8.2 million pixel or 24 million bytes or 23 megabytes) with real image files there is some additional information that is stored in them, like the software that was used to make them, the owner of the file, and other information stored inside them so actual images will be a little bit larger than the above dimensions a video that is showing 30 frames per second means 30 individual images are playing each second the video plays an HD video that is 1 minute long is 1800 individual images that are shown in that minute 1 minute HD = 10.42 GBs (11 billion bytes) 1 minute 4K = 41.71 GBs above does not include audio Vectors are another way to store images instead of storing individual pixels, vectors store pictures using points instead of pixels, the points on the boxes are encoded based on a coordinate system the result is a much smaller file since it only contains point information for the boxes Vector images can also scale easily and redraw the lines proportionally when you make the image bigger with a bitmap the information is not the same so the image gets distorted or pixilated if it gets too big the more complex you make your vector, the more data it requires you cannot really represent photographs in vector form web browsers and apps can work with both formats a web browser can worth with bitmap formats like JPEG, PNG, and GIF a web browser can also work with Vector formats like SVG both of these are ways a browser can decode image files and render them for you to see","title":"encoding images"},{"location":"computer-science/digital-information/#image-compression-and-file-formats","text":"in theory there are an infinite number of colors you can create through mixing red green and blue light at a certain point people cannot tell the subtle difference between colors reducing color variations is one way to reduce the size of photographs and images one popular ways of doing this is the GIF format a GIF is based on a total number of 256 colors the image can use either a standard 256 color palette or it can select colors from the 24-bit RGB color space LZW is a lossless compression format lossless means it can reduce the file size further without degrading the visual quality of it JPEG is another image format JPEG compression is lossy, as it compresses to reduce the file size, it cannot be uncompressed into the exact original format, it will lossy, or lose details as it is opened and displayed again JPEG has a variable amount of compression that lets you trade off size for detail using the JPEG format you can define the amount of loss in detail when the image is compressed JPEG can have little to no loss of detail, or significant amounts PNG (Portable Network Graphics) is another format, which is an improved version of the GIF where pixels can contain 24-bit RGB color values, or 32-bit values which also include transparency, allowing images or content that appears behind it to show through the image all these formats are specific to representing images on screens there are other formats that are for print, photography and more in print color is stored by the amount of various types of inks that are use in the printing process unlike with light, pigment uses different colors to build the rainbow of colors that can be created with CMYK (cyan, magenta, yellow, black) as the primary colors for photography, camera sensors capture light information that isn't processed into specific colors photography formats, sometimes called RAW formats contain data, not pixels and need to be processed using software to create the color for each pixel the RAW file stores the radiometric characteristics of the picture, which can be things such as light intensity, color, and dynamic ranges within the subject captured by the sensor image files can vary in type, context, and format pixel images can rely on compression formats that can alter the balance between size and color or size and detail for screens it all comes down to how each format is decoded, to let the pixel know how much light to display","title":"image compression and file formats"},{"location":"computer-science/internet/","text":"Internet \u00b6 the internet is not a strict set of rules, it is a design philosophy internet basics \u00b6 how the internet was born \u00b6 internet can be traced back to 1960's what we call the internet first started as a project for the United States government ARPANET = Advanced Research Projects Agency Network ARPANET was established in 1969 by the Department of Defense as a communication network in order for the network to work, it needed to have a way for information to be sent reliably from one point of the network to another the blocks of information that are sent are called packets, and they need to be transmitted multiple times, simultaneously to do this a set of rules needed to be created in the 1970's, Vint Cerf and Robert Kahn created 2 sets of rules to do exactly that the Transmission Control Protocol (TCP) and Internet Protocol (IP) TCP / IPas a communication network in 1982 TCP / IP was introduced as the standard networking protocols on the ARPANET which remained under the control of the government through the 1980's in 1990 Tim Berners-Lee created an application called World Wide Web (later renamed Nexus), at the European Organization for Nuclear Research, or CERN using a NeXT computer Berners-Lee created the first web browser that allowed a user to navigate through pages of information using links to connect phrases to additional pages with this browser Berners-Lee alos created the Hypertext Transfer Protocol (HTTP) and Hypertext Markup Language (HTML) Berners-Lee also created the very first web server called httpd who manages the internet? \u00b6 nobody controls the internet a combination of government agencies, international groups, and companies in the private sector collaborate together to keep the fundamental technologies of the internet working these groups form the rules that define how all of the different systems work the internet is formed of multiple networks that all conform to the standard protocols of the internet TCP/IP some of these networks are owned by private companies like your internet service provider, universities, cell phone companies and others all these different networks need to have a way to tell one from the other it is like having a bunch of airports, each airport is run by a different group of people: you need to have a way to know that if you are going from airport A to airport C that the pilot knows where they are going and that the airport you are going to knows to expect your arrival in the case of airports an agency known as the International Association or IATA developed a system of 3 letter codes that every airport throughout the world has adopted if you're at SFO and your bags and ticket have JFK on it, it knows that you are headed to New York City and every airport is aware of each other ICANN = Internet Corporation for Assigned Names and Numbers URLS = Uniform Resource Locator the same happens on the internet, but instead of airports there are networks ICANN does the same thing, it manages the names or identifiers that are part of the internet like URLS URLs are the phrases you know for websites, portions of a website name (called a domain) are managed by ICANN for example: a government website in the US typically ends in .gov commercial sites end in .com international sites have their own designation in the US it is google.com, but in Canada it is google.ca Amazon in the UK is amazon.co.uk there are a few international agencies called standards bodies, like the W3C and WHATWG that are groups of people that work to develop a universally adopted set of rules(called standards) that software and hardware companies can rely on to build products that will work with the technology many of these standards bodies have individuals from private companies, and they work to add new features to languages and rules of the internet if a new company really wants to add a new feature to their browser but it is not part of the standard rules, they might add the feature in and tell their users and fans that this awesome new feature is available to them if they like it they might demand that other browsers adopt it and then push for it to become a standard on the other side, some companies might want to push their solution over another so you have a situation where the makers of the browsers have alot of power in determining what goes into the rules, known as a specification(or spec) addressing & routing information \u00b6 sending and receiving information \u00b6 everything that we create on the computer is translated into digital information using bits every message, file, or stream of information is broken down into small chunks called packets when packets are sent on the internet they usually wil travel the network together each packet contains some important information inside of it called the header first the packet says the IP where it came from (like the return address on an envelope) if there is an err sending the packet there is an IP to return to let the sender know it did not go through, or return to the sender and confirm the packet was sent the packets then says where it is going (like the address on an envelope) a packet also says how long it is by stating the number of bytes that are in the packet, this way we know if it is complete all the packets in a message are the same size, so we know if one is not the same size as the others, we know that we have lost some data we also need to know how many packets are in a message, each packet lives within its own set internet protocol & IP address \u00b6 instead of a street address, address on the internet,use numbers the use of numbers as address is one of the core concepts of the internet and is called Internet Protocol (IP) each device on the internet has an address, called an IP address there is IPv4 and IPv6 IPv4 is 4 numbers seperated by periods from 0 to 255, allowing for over 4billion possible addresses on the internet each packet that is sent has the sender and receiver address in the header, store as IP addresses there are public addresses and private ones IANA = Internet Assigned Numbers Authority IANA determines what numbers and subsets are assigned to different groups within these groups there is the public IP you have on the internet, and a public on that you have on your local network the job of a router is to router data from the public address to the local device private addresses scaling up the internet from IPv4 to IPv6 \u00b6 in 1995 an experimental stream protocol called IPv5 was designed but was never finalized in 1995 the IETF, Internet Engineering Task Force needed to create a new way to provide addresses on the internet that would expand beyond the 4 billion limit the result was to increase the number of bits used to store and address IPv4 uses 32 bits, IPv6 uses 128 (340 undecillion unique addresses / 340 trillion trillion trillion ), more then the amount of atoms on the surface of the planet new operating systems support something called dual stack, where both IPv4 and IPv6 are supported at the same time, which allows device to work regardless if the hardware is updated or not IPV6 is represented by binary bits, organized into 8 16 bit sections each 16bit block is converted to hexadecimal and is seperated with a colon Domain Name Server and DNS \u00b6 a domain name is a sequence of phrases that map to a giant internet-wide databae of IP address when you enter a domain name in your browser, it gets sent to a DNS the DNS holds a cache of tons of domain names and their matching IP addresses the process of using a domain name to find an IP address is called domain name resolution the .$ part of internet names is called the top level domain the parts before the custom domain is called the subdomain routers & redirecting requests \u00b6 routers are the signposts that packets use to travel across the internet and over private networks within an organization using the header information in data packets, routers read the information in the header to direct packets to go to the right location when you send data from your computer, it first gets sent to the router, the router reads the header to figure out where to send it the data could either be sent to the internet or another local devic on the network when you send data to the internet, it gets sent to your ISP and then to its destination routers have a component called a configuration table, which is a set of commands that defines how the router works packets & fault tolerance \u00b6 messages are broken down into small pieces of data called a packet a packet consists of about a kilobyte of information, but if you are sending a long email, an audio file, or an image, that would require that the data is broken down into dozens or even hundreds of packets, or more these chains of packets will rarely stay together as a group and will break apart and take different paths along the internet the ping command sends packets to a server and then requests the server to send the information back using a ping you can test how long it takes to reach or ping a server and if any packets are lost along the way fault tolerance = being able to navigate through various conditions on the internet if there are problems with certain points on the network, the internet is able reroute packets reliability and TCP \u00b6 when hundreds or thousands of packets are transmitted from 1 location to another, they can take different paths based on changing network conditions and other factors when packets get to a destination they are unorganized and sometimes not complete, so the messages need audited and reviewed in order to put it together the right way TCP = transmission control protocol TCP uses a process where it looks at all the packets in a message and checks them using the header information in each packet, it knows how many there are, how large they should be, and in which order the packets should be in using this check list it is able to rearrange the packets, if it finds that a packet does not match the expected size or other characteristic, it is discarded and using the header information again, sends a request back to the sender for a specific package to be resent after assembly the packets received, if TCP finds that packets are missing, it goes back to the sender and asks for the items o be resent after TCP verifies that all the packets are accounted for, are in the right order, and are free of any issues, it certifies the data and the packets are merged together to recreate the original file that was on the sender's device for most transmissions on the internet, the TCP method is used, which is why the IP and TCP protocols are referred to as a single item TCP/IP TCP places reliability in a higher priority than speed or latency for instances where reliability isn't as important, but speed is, there is another protocol called UDP UDP = User Diagram Protocol UDP does not do the extensive reliability checks that TCP performs, but because of this it can send information at faster rate web servers \u00b6 identifying a server with URLs \u00b6 A records and CNAME records store rules for how domain names are translated to IP addresses A records are for pointing a domain name at the IP address of webserver A record = address record CNAME records are for redirecting domain names to a different domain CNAME record = canonical name record HTTP and requests \u00b6 HTTP = HyperText Transfer Protocol a daemon is a program that runs on a server and runs in the background and does not require any human interaction at all the daemon for most web servers is the HTTPd program, or HTTP daemon HTTPd does 1 thing, listens to requests that are routed to the server hypertext and HTML \u00b6 HTML = HyperText Markup Language remembering requests with cookies \u00b6 the time that you are on a site is called a session browser cookies store information about your sessions to make it easier to work with various websites and save settings or things in your shopping cart securing requests with SSL and TLS \u00b6 when you send information over the internet, it is publicly visible by default SSL = Secure Sockets Layer, early version of security, created by Netscape TLS = Transport Layer Security TLS performs a few basic things: it creates and verifies a connection from the client to the server it then creates and verifies the connection from the server to the client this is called handshaking, when you shake hands, both hands need to reach out and grasp the other, so the greeting is verified by both sides when the handshake happens, TLS then encrypts the data that is being sent in both directions when it encrypts the message it is still able to preserve the header of the packets that will be used to transport the data since this all still needs to work on the TCP/IP protocol authentication is done using a security certificate a certificate is granted by a known security entity that verifies that the companies, servers, and networks are who they say they are on that certificate it defines: the domain name that is allowed to use the certificate a public key that is used to encrypt the message the company that owns it when it was issued when it expires using the above information you are able to trust the certificate and send private information confidently between your computer and a server on the internet encryption \u00b6 Caesar's cypher and keys \u00b6 messages that are transmitted over the internet using protocols like TCP/IP are visible to the rest of the network so any message could be intercepted and read as you request and send information servers that handle sensitive information or products that want to offer greater encryption, such as messaging apps, online shopping services, and banking applications, need to offer a way to encrypt one of the earliest ways of encryption was called Ceasars cipher, invented by Julius Ceaser improving security with longer keys \u00b6 the more bits we add to a key, the more complex it becomes to solve for a long time keys on the internet were based on 128 bits using this each message as was decoded and transported over TCP/IP, via thousands or millions of packets, was considered secure with 128 bit keys there are 2 to the 128 power (339 decillion) combinations possible in the key, even then incredibly powerful computers were still able to crack security certificates that had 128-bit keys today there are 3 standard bit sizes for keys, 128-bit, 196-bit, 256-bit AES = Advanced Encryption standard AES is a standard for how electronic data is encrypted in the United States and is recognized throughout the world AES is based on a cipher called the Rijndael, in this cipher, information is organized in a 4-by-4 matrix of bytes, and each matrix has a unique key that either substitutes values, shifts rows, or mixes columns to scramble the message each one offers a greater level of security than the other, but as computers get more and more advanced, faster and smarter , new ways to secure information will need to be created to make sure that your information is safe symmetric and asymmetric keys \u00b6 simple keys like Ceasars cipher require that both sides of the message agree and will be applied to the message before it is sent, this is called symmetric Security symmetric security works fine in situations where you have exchanged that information in private, but in the case of the internet, it wouldn't work if i want to establish a security key with a server, if i want to let that server know what the key is, i would need to send it to the server over an unsecure connection, so anyone could read what the security key is, and then potentially use it to intercept messages and crack them later on the trick to make this work is to have two keys one that the sender uses to encrypt and send information, but is not able to be used to decrypt it the other is a key that is only on the receiver's end, and can be used to decrypt all the information that it receives, this is called asymmetric security as a sender encrypts and sends information, even if someone is able to find a key, it can be used to decrypt it, since the key works in only one way the receiver with the second key can be used to decrypt all the messages cryptography and advanced mathematics make it possible to have a single master key that can be used to decrypt multiple messages, while having multiple other keys that can be used to encrypt content, these are called public keys and private keys public keys can be exchanged and shared, but they work only in one way the private key is the only way a message can be decrypted, but it is never shared since it could be used to crack any coded messages sent to the server when you are working with the internet and use secure servers using AES security keys and certificates, these are based on asymmetric security, where there are public keys that are used to encode information, and a private key, used to decode and decipher encrypted messages sent to the server","title":"Internet"},{"location":"computer-science/internet/#internet","text":"the internet is not a strict set of rules, it is a design philosophy","title":"Internet"},{"location":"computer-science/internet/#internet-basics","text":"","title":"internet basics"},{"location":"computer-science/internet/#how-the-internet-was-born","text":"internet can be traced back to 1960's what we call the internet first started as a project for the United States government ARPANET = Advanced Research Projects Agency Network ARPANET was established in 1969 by the Department of Defense as a communication network in order for the network to work, it needed to have a way for information to be sent reliably from one point of the network to another the blocks of information that are sent are called packets, and they need to be transmitted multiple times, simultaneously to do this a set of rules needed to be created in the 1970's, Vint Cerf and Robert Kahn created 2 sets of rules to do exactly that the Transmission Control Protocol (TCP) and Internet Protocol (IP) TCP / IPas a communication network in 1982 TCP / IP was introduced as the standard networking protocols on the ARPANET which remained under the control of the government through the 1980's in 1990 Tim Berners-Lee created an application called World Wide Web (later renamed Nexus), at the European Organization for Nuclear Research, or CERN using a NeXT computer Berners-Lee created the first web browser that allowed a user to navigate through pages of information using links to connect phrases to additional pages with this browser Berners-Lee alos created the Hypertext Transfer Protocol (HTTP) and Hypertext Markup Language (HTML) Berners-Lee also created the very first web server called httpd","title":"how the internet was born"},{"location":"computer-science/internet/#who-manages-the-internet","text":"nobody controls the internet a combination of government agencies, international groups, and companies in the private sector collaborate together to keep the fundamental technologies of the internet working these groups form the rules that define how all of the different systems work the internet is formed of multiple networks that all conform to the standard protocols of the internet TCP/IP some of these networks are owned by private companies like your internet service provider, universities, cell phone companies and others all these different networks need to have a way to tell one from the other it is like having a bunch of airports, each airport is run by a different group of people: you need to have a way to know that if you are going from airport A to airport C that the pilot knows where they are going and that the airport you are going to knows to expect your arrival in the case of airports an agency known as the International Association or IATA developed a system of 3 letter codes that every airport throughout the world has adopted if you're at SFO and your bags and ticket have JFK on it, it knows that you are headed to New York City and every airport is aware of each other ICANN = Internet Corporation for Assigned Names and Numbers URLS = Uniform Resource Locator the same happens on the internet, but instead of airports there are networks ICANN does the same thing, it manages the names or identifiers that are part of the internet like URLS URLs are the phrases you know for websites, portions of a website name (called a domain) are managed by ICANN for example: a government website in the US typically ends in .gov commercial sites end in .com international sites have their own designation in the US it is google.com, but in Canada it is google.ca Amazon in the UK is amazon.co.uk there are a few international agencies called standards bodies, like the W3C and WHATWG that are groups of people that work to develop a universally adopted set of rules(called standards) that software and hardware companies can rely on to build products that will work with the technology many of these standards bodies have individuals from private companies, and they work to add new features to languages and rules of the internet if a new company really wants to add a new feature to their browser but it is not part of the standard rules, they might add the feature in and tell their users and fans that this awesome new feature is available to them if they like it they might demand that other browsers adopt it and then push for it to become a standard on the other side, some companies might want to push their solution over another so you have a situation where the makers of the browsers have alot of power in determining what goes into the rules, known as a specification(or spec)","title":"who manages the internet?"},{"location":"computer-science/internet/#addressing-routing-information","text":"","title":"addressing &amp; routing information"},{"location":"computer-science/internet/#sending-and-receiving-information","text":"everything that we create on the computer is translated into digital information using bits every message, file, or stream of information is broken down into small chunks called packets when packets are sent on the internet they usually wil travel the network together each packet contains some important information inside of it called the header first the packet says the IP where it came from (like the return address on an envelope) if there is an err sending the packet there is an IP to return to let the sender know it did not go through, or return to the sender and confirm the packet was sent the packets then says where it is going (like the address on an envelope) a packet also says how long it is by stating the number of bytes that are in the packet, this way we know if it is complete all the packets in a message are the same size, so we know if one is not the same size as the others, we know that we have lost some data we also need to know how many packets are in a message, each packet lives within its own set","title":"sending and receiving information"},{"location":"computer-science/internet/#internet-protocol-ip-address","text":"instead of a street address, address on the internet,use numbers the use of numbers as address is one of the core concepts of the internet and is called Internet Protocol (IP) each device on the internet has an address, called an IP address there is IPv4 and IPv6 IPv4 is 4 numbers seperated by periods from 0 to 255, allowing for over 4billion possible addresses on the internet each packet that is sent has the sender and receiver address in the header, store as IP addresses there are public addresses and private ones IANA = Internet Assigned Numbers Authority IANA determines what numbers and subsets are assigned to different groups within these groups there is the public IP you have on the internet, and a public on that you have on your local network the job of a router is to router data from the public address to the local device private addresses","title":"internet protocol &amp; IP address"},{"location":"computer-science/internet/#scaling-up-the-internet-from-ipv4-to-ipv6","text":"in 1995 an experimental stream protocol called IPv5 was designed but was never finalized in 1995 the IETF, Internet Engineering Task Force needed to create a new way to provide addresses on the internet that would expand beyond the 4 billion limit the result was to increase the number of bits used to store and address IPv4 uses 32 bits, IPv6 uses 128 (340 undecillion unique addresses / 340 trillion trillion trillion ), more then the amount of atoms on the surface of the planet new operating systems support something called dual stack, where both IPv4 and IPv6 are supported at the same time, which allows device to work regardless if the hardware is updated or not IPV6 is represented by binary bits, organized into 8 16 bit sections each 16bit block is converted to hexadecimal and is seperated with a colon","title":"scaling up the internet from IPv4 to IPv6"},{"location":"computer-science/internet/#domain-name-server-and-dns","text":"a domain name is a sequence of phrases that map to a giant internet-wide databae of IP address when you enter a domain name in your browser, it gets sent to a DNS the DNS holds a cache of tons of domain names and their matching IP addresses the process of using a domain name to find an IP address is called domain name resolution the .$ part of internet names is called the top level domain the parts before the custom domain is called the subdomain","title":"Domain Name Server and DNS"},{"location":"computer-science/internet/#routers-redirecting-requests","text":"routers are the signposts that packets use to travel across the internet and over private networks within an organization using the header information in data packets, routers read the information in the header to direct packets to go to the right location when you send data from your computer, it first gets sent to the router, the router reads the header to figure out where to send it the data could either be sent to the internet or another local devic on the network when you send data to the internet, it gets sent to your ISP and then to its destination routers have a component called a configuration table, which is a set of commands that defines how the router works","title":"routers &amp; redirecting requests"},{"location":"computer-science/internet/#packets-fault-tolerance","text":"messages are broken down into small pieces of data called a packet a packet consists of about a kilobyte of information, but if you are sending a long email, an audio file, or an image, that would require that the data is broken down into dozens or even hundreds of packets, or more these chains of packets will rarely stay together as a group and will break apart and take different paths along the internet the ping command sends packets to a server and then requests the server to send the information back using a ping you can test how long it takes to reach or ping a server and if any packets are lost along the way fault tolerance = being able to navigate through various conditions on the internet if there are problems with certain points on the network, the internet is able reroute packets","title":"packets &amp; fault tolerance"},{"location":"computer-science/internet/#reliability-and-tcp","text":"when hundreds or thousands of packets are transmitted from 1 location to another, they can take different paths based on changing network conditions and other factors when packets get to a destination they are unorganized and sometimes not complete, so the messages need audited and reviewed in order to put it together the right way TCP = transmission control protocol TCP uses a process where it looks at all the packets in a message and checks them using the header information in each packet, it knows how many there are, how large they should be, and in which order the packets should be in using this check list it is able to rearrange the packets, if it finds that a packet does not match the expected size or other characteristic, it is discarded and using the header information again, sends a request back to the sender for a specific package to be resent after assembly the packets received, if TCP finds that packets are missing, it goes back to the sender and asks for the items o be resent after TCP verifies that all the packets are accounted for, are in the right order, and are free of any issues, it certifies the data and the packets are merged together to recreate the original file that was on the sender's device for most transmissions on the internet, the TCP method is used, which is why the IP and TCP protocols are referred to as a single item TCP/IP TCP places reliability in a higher priority than speed or latency for instances where reliability isn't as important, but speed is, there is another protocol called UDP UDP = User Diagram Protocol UDP does not do the extensive reliability checks that TCP performs, but because of this it can send information at faster rate","title":"reliability and TCP"},{"location":"computer-science/internet/#web-servers","text":"","title":"web servers"},{"location":"computer-science/internet/#identifying-a-server-with-urls","text":"A records and CNAME records store rules for how domain names are translated to IP addresses A records are for pointing a domain name at the IP address of webserver A record = address record CNAME records are for redirecting domain names to a different domain CNAME record = canonical name record","title":"identifying a server with URLs"},{"location":"computer-science/internet/#http-and-requests","text":"HTTP = HyperText Transfer Protocol a daemon is a program that runs on a server and runs in the background and does not require any human interaction at all the daemon for most web servers is the HTTPd program, or HTTP daemon HTTPd does 1 thing, listens to requests that are routed to the server","title":"HTTP and requests"},{"location":"computer-science/internet/#hypertext-and-html","text":"HTML = HyperText Markup Language","title":"hypertext and HTML"},{"location":"computer-science/internet/#remembering-requests-with-cookies","text":"the time that you are on a site is called a session browser cookies store information about your sessions to make it easier to work with various websites and save settings or things in your shopping cart","title":"remembering requests with cookies"},{"location":"computer-science/internet/#securing-requests-with-ssl-and-tls","text":"when you send information over the internet, it is publicly visible by default SSL = Secure Sockets Layer, early version of security, created by Netscape TLS = Transport Layer Security TLS performs a few basic things: it creates and verifies a connection from the client to the server it then creates and verifies the connection from the server to the client this is called handshaking, when you shake hands, both hands need to reach out and grasp the other, so the greeting is verified by both sides when the handshake happens, TLS then encrypts the data that is being sent in both directions when it encrypts the message it is still able to preserve the header of the packets that will be used to transport the data since this all still needs to work on the TCP/IP protocol authentication is done using a security certificate a certificate is granted by a known security entity that verifies that the companies, servers, and networks are who they say they are on that certificate it defines: the domain name that is allowed to use the certificate a public key that is used to encrypt the message the company that owns it when it was issued when it expires using the above information you are able to trust the certificate and send private information confidently between your computer and a server on the internet","title":"securing requests with SSL and TLS"},{"location":"computer-science/internet/#encryption","text":"","title":"encryption"},{"location":"computer-science/internet/#caesars-cypher-and-keys","text":"messages that are transmitted over the internet using protocols like TCP/IP are visible to the rest of the network so any message could be intercepted and read as you request and send information servers that handle sensitive information or products that want to offer greater encryption, such as messaging apps, online shopping services, and banking applications, need to offer a way to encrypt one of the earliest ways of encryption was called Ceasars cipher, invented by Julius Ceaser","title":"Caesar's cypher and keys"},{"location":"computer-science/internet/#improving-security-with-longer-keys","text":"the more bits we add to a key, the more complex it becomes to solve for a long time keys on the internet were based on 128 bits using this each message as was decoded and transported over TCP/IP, via thousands or millions of packets, was considered secure with 128 bit keys there are 2 to the 128 power (339 decillion) combinations possible in the key, even then incredibly powerful computers were still able to crack security certificates that had 128-bit keys today there are 3 standard bit sizes for keys, 128-bit, 196-bit, 256-bit AES = Advanced Encryption standard AES is a standard for how electronic data is encrypted in the United States and is recognized throughout the world AES is based on a cipher called the Rijndael, in this cipher, information is organized in a 4-by-4 matrix of bytes, and each matrix has a unique key that either substitutes values, shifts rows, or mixes columns to scramble the message each one offers a greater level of security than the other, but as computers get more and more advanced, faster and smarter , new ways to secure information will need to be created to make sure that your information is safe","title":"improving security with longer keys"},{"location":"computer-science/internet/#symmetric-and-asymmetric-keys","text":"simple keys like Ceasars cipher require that both sides of the message agree and will be applied to the message before it is sent, this is called symmetric Security symmetric security works fine in situations where you have exchanged that information in private, but in the case of the internet, it wouldn't work if i want to establish a security key with a server, if i want to let that server know what the key is, i would need to send it to the server over an unsecure connection, so anyone could read what the security key is, and then potentially use it to intercept messages and crack them later on the trick to make this work is to have two keys one that the sender uses to encrypt and send information, but is not able to be used to decrypt it the other is a key that is only on the receiver's end, and can be used to decrypt all the information that it receives, this is called asymmetric security as a sender encrypts and sends information, even if someone is able to find a key, it can be used to decrypt it, since the key works in only one way the receiver with the second key can be used to decrypt all the messages cryptography and advanced mathematics make it possible to have a single master key that can be used to decrypt multiple messages, while having multiple other keys that can be used to encrypt content, these are called public keys and private keys public keys can be exchanged and shared, but they work only in one way the private key is the only way a message can be decrypted, but it is never shared since it could be used to crack any coded messages sent to the server when you are working with the internet and use secure servers using AES security keys and certificates, these are based on asymmetric security, where there are public keys that are used to encode information, and a private key, used to decode and decipher encrypted messages sent to the server","title":"symmetric and asymmetric keys"},{"location":"computer-science/programming/","text":"Programming Principals \u00b6 computers are useless unless they are told exactly what to do since the beginning of computers, there has always been the need for someone to tell it what to do this is where programmers come in programmers take a set up steps or jobs that need to be done by a computer and convert it from our language to their language control computers with code \u00b6 history of programming \u00b6 in the early 1840's Charles Babbage proposed a machine called the Analytical Engine it was only a proposal, no actual machine was built one inventive woman by the name of Ada Lovelace decided to write an article that provided detailed instructions on how to represent Bernoulli numbers, a recursive equation based in number theory on the Analytical Engine this article is considered the very first computer program since then the devices that can be programmed went from: theoretical to physical manual to automatic analog to digital with each evolutionary step, the way we program computers needed to evolve as well with the birth of main frame computers, data processing required instructions to be sent to the machine and interpret the instructions from the programmer this was then applied to data to organize and analyze it instructions were entered through a keyboard, but without a monitor, so everything was done through printouts on paper if you look carefully at text encodings, and at some programming languages, you'll see things like carriage return or print that are carryovers from those printer days from decades ago as computers got smaller and more powerful more languages were created languages were also created to serve specific types of projects and industries like mathematics and science, data storage and graphics today we work with programming language that can serve many different purposes a programmer often needs to use multiple programming languages to get a project completed as languages have evolved they have become specialized to complete specific tasks as a programmer you will use the best languages for specific tasks and combine them together to create your project the programming languages you learn today will continue to evolve and change in the future with future waves of new technology new languages with be developed to allow programmers to drive even more innovation forms of programming \u00b6 as programming as evolved over the decades, the types of programming you can do have changed as well depending on what you want to do there are different types or forms of programming languages that work in different ways machine, assembly, interpreted, compiled imperative, OOP, functional, scripting JS is an example of an interpreted language C is an example of a compiled language Java and C# are examples of OOP languages Haskell, Scala, F# are examples of functional languages SQL and R is for data powershell, perl, and bash are examples of scripting languages define actions using code \u00b6 work with values and variables \u00b6 when a programmer needs to store a value a variable is used when a variable is defined, the computer allocates the space needed to store a variable of a certain type sometimes the programmer defines what the type is that needs to be stored, like an integer the computer can then sometimes infer what type is needed based on the value that needs to be stored when you define a certain type, it can only store that type of value you can take a variable and then assign its value to another variable some languages copy the value from one variable to another, so that their are now 2 unique values other languages tell a variable to point to a value that is stored in memory, so if one of those variables changes, it changes in two places use functions to repeat actions \u00b6 functions are groups of actions that a programmer defines and gives a name while variables are named values, functions are named actions the steps that take place in a program and the order they go in are called the program flow functions are the generic name for named groupings of code functions can be used in different ways throughout programming and they form the basic organization of your code break down tasks \u00b6 part of a programmers job is to take complicated jobs and break them down into individual steps that cannot be broken down any further it is like looking at water and then drilling down to the molecules and then the atoms that form it you dive down to the smallest element that forms the basis of the object now take that principal and apply it to an action we take for granted so many steps that are part of a group of actions as a programmer you need to be as accurate and literal as possible with your code breaking down actions into smaller actions is critical to being successful with each function you write like take out the trash you need to define each statement or action that needs to happen within that to fulfill everything you expect and for the action, to be executed correctly when you breakdown a process or a task put yourself in someone else's shoes to see if the steps you outline make sense, if not add the clarity and details you need to make it fool proof to get the desired results customize functions with parameters \u00b6 when we create functions we take actions and group them together and give them a name we can then call those actions using the function name and run them as often as we need in our code sometimes we want to customize the steps a little bit based on information we might have parameters allow us to used different variable inside our function, like if we needed a sales tax variable to change bases on state, we could use a parameter for it variables and scope \u00b6 when we create variables we need them to hold values during our program, but how long do we need them to stick around? as we build programs we can define how long we want to use variables, using Scope Scope defines how long a variable and the memory that is used to store it, is kept and how it's available for the program one obvious instance of when the variable is not available anymore is when the program closes, when the program stops it releases all the memory that it used and frees it for other programs or systems to use inside of our program, if we create a variable, we can access it using the name on our code if we create a variable and then call a function or method, the variable is available to that method since it was already created if we enter into a function and create a variable inside of it, as soon as that function is complete the variable is thrown away, including the name and value a variable created inside a function, it is scoped to that function if a variable is created outside a function, and then a function changes it that variable, it changes for the entire program, it would be scoped outside of the function, and can apply to a larger portion of a program anything you create in a function will be gone when you have finished it you need to consider when and where you create your variables variable scope is an important part of knowing how to work with variables as you build more complex programs and code return values from functions \u00b6 functions, sometimes called methods, are tools for programmers to take common actions and to group them to call using a function name with a function you can send in values for it to use and perform actions on it you often need to get information out of a function because of variable's scope, any variable you create inside of it will be thrown away when the function is finished you need to have a way to return a value from the function when it is called there are 3 ways to work with a value: use a literal, a literal is a value itself without any name or container, it is simply the value, like answer = 5*5, the 5s are literals use a variable, that variable has a value, and can be assigned to another variable, like secondAnswer = answer the third is with a function or method, you essentially use it like a variable or literal, but to do this you need to have a return value, like answerPlusFive = function(answer) {return answer + 5} work with an API \u00b6 as a programmer you are building rules for how to program you and potentially others will use these rules to build out your program over time examples of these rules: you create variables that can store certain types of values you create functions that perform certain actions and functions that require parameters you create functions that return values of certain types you create functions that are a combination of these with all of these mixed together you are creating a set of rules that a programmer will work with in the program you are creating an interface, or API API = Application Programming Interface as you make more advanced programs your API will expand and get more complex as a programmer you are doing 2 things at once: you are defining steps that you want the program to perform with the hardware you are defining the rules that you will use to build your program at the same time you start off building the private API for your Application as you get more sophisticated with your programming and coding skills you can build a public API that others can use for their own apps and programs repeat actions and test for conditions \u00b6 capture input from the user \u00b6 as a programmer you will create code that will have your program listen for events you will define what that event is (touch swipe pressure-change temperature-change location click) your program will perform actions based on defined events the specifics on how you do this will vary slightly based on input type some input happens while the program runs and happens in parallel to other things other types of input require that the program stops and waits for you to provide input to continue the first type of input is called synchronous input, where the program and input capturing happen in parallel the other type of input is called asynchronous, where the program must wait for input from you to in order to continue based on the type of program you are creating and the type of device it is for will define how you will create code for your user interaction manage different variable types \u00b6 as you program you will be working with values of all kinds, but often you will find that things will not match up, and you will need to juggle different variable types to get your code to work there are different ways your program can manage differences between value types some ways are automatic and some you have to do yourself with some languages the variables are dynamically typed dynamically typed means that they adjust to whatever is assigned to them with dynamically types languages, a variable that is assigned as an unsigned integer can become a string if one is assigned to it sometimes a value does not match a variable type some languages may automatically convert that the best it can to match the variable type, like null to false sometimes you need to make the conversion explicit with some languages you need to manually convert from one type to another programming languages have functions and methods that can take a value and return it as a different type usually the tool that you are using for coding can help you see what your variable types are, but sometimes that is not possible in many languages there are methods that tell you what your types are, so you can make the right conversions it is important to remember, types do not just apply to functions and methods as well the parameters that define what data goes into the functions and the return values are all based on specific types any value, either a literal, variable, expression or function will need to be managed as you work with your program create conditional tests \u00b6 computers process in binary, yes no, 1 0 in programming you need to think in binary Boolean is a special datatype designed for this, and use equality operators there are 6 equality operators to choose from in programming == = checks if values are equal != = checks if values are not equal > = checks if value is greater than other value < = checks if value is less than other value >= = checks if value is greater than or equal other value <= = checks if value is less than or equal other value if else statements create more complex tests build compound conditional tests \u00b6 or = will be true if either condition is true and = will be true if both conditions are true not = returns the opposite of what the above tests would return loops arrays \u00b6 while loop = performs an action while a certain condition is true (or not true) do while loop = will run the action at least once then perform while loop for loop = perform an action for a specified count or amount of something array = one of the most basic ways to collect values as a single unit / collection in programming it is common to loop through arrays objects and OOP \u00b6 everything is an object \u00b6 in many languages, objects are the foundation in OOP languages, everything is considered an object objects consist of names, actions, characteristics everything is a class \u00b6 with objects everything can be defined as having characteristics, actions, and names to program with these, we need to have some framework or scaffolding to build objects from we do this using classes a class is a set of rules that define how a category of objects or a class of objects, look, behave, and take customization through various values and settings within a class you define 4 things, called class members: class name properties methods constructor class members define the basic structure of a class classes are a blueprint for objects you don't use a class directly, you create instances of classes defining a class is like creating a stack of sticky notes where every page is the same the sticky notes are templates that will define all the instances you create on that class when you take the top note off the stack you are instantiating the class you are creating an instance of the class that you can use in your program when you instantiate a class you give the instance a unique name, an instance name when you create an instance and give it a name you also trigger the constructor the special constructor function is where you define what needs to get setup when you create the instance sometimes you need to set some properties or execute a method to configure part of the instance since it is function you can set it up to accept a value generally a constructor doesn't return any value, but an instance of the class work with existing classes and objects \u00b6 as a programmer you will work with prebuilt classes that are part of the programming language and SDK (software development kit) that you will be working with when you create an instance of a class, you instantiate it and the code in the constructor runs the constructor is helpful if you need to set things up in the instance when it runs when you work with an instance you will access properties and methods inside it, defined by the class, using the instance name a static property is the same for all properties an example could be a count that tracks the total of all instances created from that class a constructor could bump that count up by 1 make your own classes and objects \u00b6 when you create a class with a property, you are by default making is accessible to everyone you do not always want to give unrestricted public access to your properties you can take members of a class and make them either private or public public means that anyone can access them they can access properties like any other variable and public methods like any function private properties are available only within the instance and they are hidden from anything outside of the class private properties can be accessed with getters and setters extend classes \u00b6 when you create a class you are not limited to just that class, you can add properties and methods to it use polymorphism using interfaces \u00b6 an interface is a tool in OOP that allows you to categorize classes this allows you to say that anything that uses this interface, includes its methods when you create a variable it has to have a type you either define a type or it is inferred by the value that is being assigned to it when you have a variable that has a type you define the type based on a class since everything is a class that means an integer, Boolean, string, and anything else to define a variable are also classes if we create a variable that accepts integers we are typing that variable using the integer class we can type variables to be any object we want, including objects based on classes that we create ourselves you can type variables to interfaces instead of classes which works better in some scenarios this is the basis of polymorphism using object orientated programming, class hierarchy, and polymorphism programmers have built tons of rules and recommendations on how to create code called best practices and design patterns beyond programming \u00b6 debug problems \u00b6 there are a few ways you can go about fixing problems you can print out things in your code as it runs to see what is happening and pinpoint where things went wrong there are also tools you can use to control how your code runs many IDEs have a special debugging mode that allows you to interactively run your code line by line you can also do this with browsers using their built in developer modes another way is to create code for catching errors and handling them more gracefully, maybe by prompting the user for different input an exception is an error that a programmer can use to adjust their code refactor code to make improvements \u00b6 coding is an iterative process, you may have to come back to code months later to adjust it, and wonder what you were thinking when you wrote it you maybe learned a new practice that makes the code better, or you overlooked something when you first wrote it when you update your code to make it work better, you are refactoring it refactoring is a common practice with programming as you add new capabilities to your programs, you will revisit and update older code the trick with refactoring is to make sure that any changes you make won't have adverse effects on the rest of your program refactoring is not about fixing errors or crashes, it's about improving already working code in some way there are 3 reasons why you may want to refactor your code the first reason to refactor is to improve performance: sometimes based on the types of data you work with, your program might require a lot of memory or processing power refactoring your code to be more efficient with resources can make you programs faster second reason is to support new features: as you add new capabilities to your project, you might have existing sections of code that need to be updated to better support the code you add to your program the third reason to refactor your code is to improve readability: sometimes when you write your code it might make sense to you, but going back and cleaning things up like variable names, method names, and adding comments can make your code easier for others to understand and work with refactoring existing code is a common practice for any programmer, and keeps your code working its best and makes you a better programmer along the way save progress and work with others \u00b6 working as a developer is an iterative process, as you add more capabilities to your project and re-factor existing code, you will want to keep a history of your progress sometime changes you make do not quite work out and you need a way to go back in time to an earlier point and restore from an earlier version using code repositories are the main way your are able to do that one of the most popular methods is Git and GitHub, which is used to manage your code and work with others collaboratively on a project code repositories are essentially snapshots in time, the capture your code at a certain point called a \"commit\" when you finish editing your code you perform a commit that saves that point in time and the state of the code in the repository you provide a description and then that is saved into the repository as you continue to make changes even if you make additional commits, if you ever need to go back to another point, you can restore code from an earlier point in time you can create a branch in code repositories branches are points in the life of your code that you break the development up into 2 parts one reason could be that you are getting ready to build the next major version of your product, but you need to keep the existing version around to fix bugs and issues that might crop up while you are developing the new version when you are ready to release your new version, you can then manage both versions of code or merge back if you need to code repositories allow you to work collaboratively with others coding projects can become really big and often too large for a single person to manage with a code repository, you can have multiple people work with different sections of code when they commit their code, you will get a notification that your project has been updated by another person you can then compare or diff between what you have and the new code to you see if you need if you need to refactor anything that you have been working on build iteratively using agile development \u00b6 agile means that the product is designed and built over multiple phases with each phase work goes into adding functionality or features that either the end user can use or you need to have in place before you can do other work each phase, sometimes called a sprint, is planned independently from one another a roadmap brings it all together and plots out all the sprints that are required to release the product to market as programmer you will learn that agile is use for many projects create for multiple platforms \u00b6 as a programmer you will build programmers and apps for customers and users not all of your users might be the same consider they might be using different OS, devices, or browsers you need to plan for this reality by planning to build for multiple platforms there are 2 ways to make apps for multiple platforms the first is to use first-party tools these are tools technologies and programming languages that are created by the makers of the operating system and ecosystem these tools come from companies such as google microsoft and apple although these tools are different the programming languages for each of them are very similar (c-sharp java swift) and are based on the same principals the alternative is to use 3rd party tools that can build applications for multiple platforms at the same time some of these are based on web technologies, like Cordova, while others are based on other platforms like Xamarin or Unity with C-sharp, .net the advantage of these is that you only need to learn 1 set of tools or technologies but you do trade off some platform specific-capabilities the important thing is that when learning programming you should keep in mind that you will be targeting many, many people and not all of these people will have the same devices or software as developer you need to plan on reaching as many people as you can with your project and that may require building for multiple platforms","title":"Programming"},{"location":"computer-science/programming/#programming-principals","text":"computers are useless unless they are told exactly what to do since the beginning of computers, there has always been the need for someone to tell it what to do this is where programmers come in programmers take a set up steps or jobs that need to be done by a computer and convert it from our language to their language","title":"Programming Principals"},{"location":"computer-science/programming/#control-computers-with-code","text":"","title":"control computers with code"},{"location":"computer-science/programming/#history-of-programming","text":"in the early 1840's Charles Babbage proposed a machine called the Analytical Engine it was only a proposal, no actual machine was built one inventive woman by the name of Ada Lovelace decided to write an article that provided detailed instructions on how to represent Bernoulli numbers, a recursive equation based in number theory on the Analytical Engine this article is considered the very first computer program since then the devices that can be programmed went from: theoretical to physical manual to automatic analog to digital with each evolutionary step, the way we program computers needed to evolve as well with the birth of main frame computers, data processing required instructions to be sent to the machine and interpret the instructions from the programmer this was then applied to data to organize and analyze it instructions were entered through a keyboard, but without a monitor, so everything was done through printouts on paper if you look carefully at text encodings, and at some programming languages, you'll see things like carriage return or print that are carryovers from those printer days from decades ago as computers got smaller and more powerful more languages were created languages were also created to serve specific types of projects and industries like mathematics and science, data storage and graphics today we work with programming language that can serve many different purposes a programmer often needs to use multiple programming languages to get a project completed as languages have evolved they have become specialized to complete specific tasks as a programmer you will use the best languages for specific tasks and combine them together to create your project the programming languages you learn today will continue to evolve and change in the future with future waves of new technology new languages with be developed to allow programmers to drive even more innovation","title":"history of programming"},{"location":"computer-science/programming/#forms-of-programming","text":"as programming as evolved over the decades, the types of programming you can do have changed as well depending on what you want to do there are different types or forms of programming languages that work in different ways machine, assembly, interpreted, compiled imperative, OOP, functional, scripting JS is an example of an interpreted language C is an example of a compiled language Java and C# are examples of OOP languages Haskell, Scala, F# are examples of functional languages SQL and R is for data powershell, perl, and bash are examples of scripting languages","title":"forms of programming"},{"location":"computer-science/programming/#define-actions-using-code","text":"","title":"define actions using code"},{"location":"computer-science/programming/#work-with-values-and-variables","text":"when a programmer needs to store a value a variable is used when a variable is defined, the computer allocates the space needed to store a variable of a certain type sometimes the programmer defines what the type is that needs to be stored, like an integer the computer can then sometimes infer what type is needed based on the value that needs to be stored when you define a certain type, it can only store that type of value you can take a variable and then assign its value to another variable some languages copy the value from one variable to another, so that their are now 2 unique values other languages tell a variable to point to a value that is stored in memory, so if one of those variables changes, it changes in two places","title":"work with values and variables"},{"location":"computer-science/programming/#use-functions-to-repeat-actions","text":"functions are groups of actions that a programmer defines and gives a name while variables are named values, functions are named actions the steps that take place in a program and the order they go in are called the program flow functions are the generic name for named groupings of code functions can be used in different ways throughout programming and they form the basic organization of your code","title":"use functions to repeat actions"},{"location":"computer-science/programming/#break-down-tasks","text":"part of a programmers job is to take complicated jobs and break them down into individual steps that cannot be broken down any further it is like looking at water and then drilling down to the molecules and then the atoms that form it you dive down to the smallest element that forms the basis of the object now take that principal and apply it to an action we take for granted so many steps that are part of a group of actions as a programmer you need to be as accurate and literal as possible with your code breaking down actions into smaller actions is critical to being successful with each function you write like take out the trash you need to define each statement or action that needs to happen within that to fulfill everything you expect and for the action, to be executed correctly when you breakdown a process or a task put yourself in someone else's shoes to see if the steps you outline make sense, if not add the clarity and details you need to make it fool proof to get the desired results","title":"break down tasks"},{"location":"computer-science/programming/#customize-functions-with-parameters","text":"when we create functions we take actions and group them together and give them a name we can then call those actions using the function name and run them as often as we need in our code sometimes we want to customize the steps a little bit based on information we might have parameters allow us to used different variable inside our function, like if we needed a sales tax variable to change bases on state, we could use a parameter for it","title":"customize functions with parameters"},{"location":"computer-science/programming/#variables-and-scope","text":"when we create variables we need them to hold values during our program, but how long do we need them to stick around? as we build programs we can define how long we want to use variables, using Scope Scope defines how long a variable and the memory that is used to store it, is kept and how it's available for the program one obvious instance of when the variable is not available anymore is when the program closes, when the program stops it releases all the memory that it used and frees it for other programs or systems to use inside of our program, if we create a variable, we can access it using the name on our code if we create a variable and then call a function or method, the variable is available to that method since it was already created if we enter into a function and create a variable inside of it, as soon as that function is complete the variable is thrown away, including the name and value a variable created inside a function, it is scoped to that function if a variable is created outside a function, and then a function changes it that variable, it changes for the entire program, it would be scoped outside of the function, and can apply to a larger portion of a program anything you create in a function will be gone when you have finished it you need to consider when and where you create your variables variable scope is an important part of knowing how to work with variables as you build more complex programs and code","title":"variables and scope"},{"location":"computer-science/programming/#return-values-from-functions","text":"functions, sometimes called methods, are tools for programmers to take common actions and to group them to call using a function name with a function you can send in values for it to use and perform actions on it you often need to get information out of a function because of variable's scope, any variable you create inside of it will be thrown away when the function is finished you need to have a way to return a value from the function when it is called there are 3 ways to work with a value: use a literal, a literal is a value itself without any name or container, it is simply the value, like answer = 5*5, the 5s are literals use a variable, that variable has a value, and can be assigned to another variable, like secondAnswer = answer the third is with a function or method, you essentially use it like a variable or literal, but to do this you need to have a return value, like answerPlusFive = function(answer) {return answer + 5}","title":"return values from functions"},{"location":"computer-science/programming/#work-with-an-api","text":"as a programmer you are building rules for how to program you and potentially others will use these rules to build out your program over time examples of these rules: you create variables that can store certain types of values you create functions that perform certain actions and functions that require parameters you create functions that return values of certain types you create functions that are a combination of these with all of these mixed together you are creating a set of rules that a programmer will work with in the program you are creating an interface, or API API = Application Programming Interface as you make more advanced programs your API will expand and get more complex as a programmer you are doing 2 things at once: you are defining steps that you want the program to perform with the hardware you are defining the rules that you will use to build your program at the same time you start off building the private API for your Application as you get more sophisticated with your programming and coding skills you can build a public API that others can use for their own apps and programs","title":"work with an API"},{"location":"computer-science/programming/#repeat-actions-and-test-for-conditions","text":"","title":"repeat actions and test for conditions"},{"location":"computer-science/programming/#capture-input-from-the-user","text":"as a programmer you will create code that will have your program listen for events you will define what that event is (touch swipe pressure-change temperature-change location click) your program will perform actions based on defined events the specifics on how you do this will vary slightly based on input type some input happens while the program runs and happens in parallel to other things other types of input require that the program stops and waits for you to provide input to continue the first type of input is called synchronous input, where the program and input capturing happen in parallel the other type of input is called asynchronous, where the program must wait for input from you to in order to continue based on the type of program you are creating and the type of device it is for will define how you will create code for your user interaction","title":"capture input from the user"},{"location":"computer-science/programming/#manage-different-variable-types","text":"as you program you will be working with values of all kinds, but often you will find that things will not match up, and you will need to juggle different variable types to get your code to work there are different ways your program can manage differences between value types some ways are automatic and some you have to do yourself with some languages the variables are dynamically typed dynamically typed means that they adjust to whatever is assigned to them with dynamically types languages, a variable that is assigned as an unsigned integer can become a string if one is assigned to it sometimes a value does not match a variable type some languages may automatically convert that the best it can to match the variable type, like null to false sometimes you need to make the conversion explicit with some languages you need to manually convert from one type to another programming languages have functions and methods that can take a value and return it as a different type usually the tool that you are using for coding can help you see what your variable types are, but sometimes that is not possible in many languages there are methods that tell you what your types are, so you can make the right conversions it is important to remember, types do not just apply to functions and methods as well the parameters that define what data goes into the functions and the return values are all based on specific types any value, either a literal, variable, expression or function will need to be managed as you work with your program","title":"manage different variable types"},{"location":"computer-science/programming/#create-conditional-tests","text":"computers process in binary, yes no, 1 0 in programming you need to think in binary Boolean is a special datatype designed for this, and use equality operators there are 6 equality operators to choose from in programming == = checks if values are equal != = checks if values are not equal > = checks if value is greater than other value < = checks if value is less than other value >= = checks if value is greater than or equal other value <= = checks if value is less than or equal other value if else statements create more complex tests","title":"create conditional tests"},{"location":"computer-science/programming/#build-compound-conditional-tests","text":"or = will be true if either condition is true and = will be true if both conditions are true not = returns the opposite of what the above tests would return","title":"build compound conditional tests"},{"location":"computer-science/programming/#loops-arrays","text":"while loop = performs an action while a certain condition is true (or not true) do while loop = will run the action at least once then perform while loop for loop = perform an action for a specified count or amount of something array = one of the most basic ways to collect values as a single unit / collection in programming it is common to loop through arrays","title":"loops arrays"},{"location":"computer-science/programming/#objects-and-oop","text":"","title":"objects and OOP"},{"location":"computer-science/programming/#everything-is-an-object","text":"in many languages, objects are the foundation in OOP languages, everything is considered an object objects consist of names, actions, characteristics","title":"everything is an object"},{"location":"computer-science/programming/#everything-is-a-class","text":"with objects everything can be defined as having characteristics, actions, and names to program with these, we need to have some framework or scaffolding to build objects from we do this using classes a class is a set of rules that define how a category of objects or a class of objects, look, behave, and take customization through various values and settings within a class you define 4 things, called class members: class name properties methods constructor class members define the basic structure of a class classes are a blueprint for objects you don't use a class directly, you create instances of classes defining a class is like creating a stack of sticky notes where every page is the same the sticky notes are templates that will define all the instances you create on that class when you take the top note off the stack you are instantiating the class you are creating an instance of the class that you can use in your program when you instantiate a class you give the instance a unique name, an instance name when you create an instance and give it a name you also trigger the constructor the special constructor function is where you define what needs to get setup when you create the instance sometimes you need to set some properties or execute a method to configure part of the instance since it is function you can set it up to accept a value generally a constructor doesn't return any value, but an instance of the class","title":"everything is a class"},{"location":"computer-science/programming/#work-with-existing-classes-and-objects","text":"as a programmer you will work with prebuilt classes that are part of the programming language and SDK (software development kit) that you will be working with when you create an instance of a class, you instantiate it and the code in the constructor runs the constructor is helpful if you need to set things up in the instance when it runs when you work with an instance you will access properties and methods inside it, defined by the class, using the instance name a static property is the same for all properties an example could be a count that tracks the total of all instances created from that class a constructor could bump that count up by 1","title":"work with existing classes and objects"},{"location":"computer-science/programming/#make-your-own-classes-and-objects","text":"when you create a class with a property, you are by default making is accessible to everyone you do not always want to give unrestricted public access to your properties you can take members of a class and make them either private or public public means that anyone can access them they can access properties like any other variable and public methods like any function private properties are available only within the instance and they are hidden from anything outside of the class private properties can be accessed with getters and setters","title":"make your own classes and objects"},{"location":"computer-science/programming/#extend-classes","text":"when you create a class you are not limited to just that class, you can add properties and methods to it","title":"extend classes"},{"location":"computer-science/programming/#use-polymorphism-using-interfaces","text":"an interface is a tool in OOP that allows you to categorize classes this allows you to say that anything that uses this interface, includes its methods when you create a variable it has to have a type you either define a type or it is inferred by the value that is being assigned to it when you have a variable that has a type you define the type based on a class since everything is a class that means an integer, Boolean, string, and anything else to define a variable are also classes if we create a variable that accepts integers we are typing that variable using the integer class we can type variables to be any object we want, including objects based on classes that we create ourselves you can type variables to interfaces instead of classes which works better in some scenarios this is the basis of polymorphism using object orientated programming, class hierarchy, and polymorphism programmers have built tons of rules and recommendations on how to create code called best practices and design patterns","title":"use polymorphism using interfaces"},{"location":"computer-science/programming/#beyond-programming","text":"","title":"beyond programming"},{"location":"computer-science/programming/#debug-problems","text":"there are a few ways you can go about fixing problems you can print out things in your code as it runs to see what is happening and pinpoint where things went wrong there are also tools you can use to control how your code runs many IDEs have a special debugging mode that allows you to interactively run your code line by line you can also do this with browsers using their built in developer modes another way is to create code for catching errors and handling them more gracefully, maybe by prompting the user for different input an exception is an error that a programmer can use to adjust their code","title":"debug problems"},{"location":"computer-science/programming/#refactor-code-to-make-improvements","text":"coding is an iterative process, you may have to come back to code months later to adjust it, and wonder what you were thinking when you wrote it you maybe learned a new practice that makes the code better, or you overlooked something when you first wrote it when you update your code to make it work better, you are refactoring it refactoring is a common practice with programming as you add new capabilities to your programs, you will revisit and update older code the trick with refactoring is to make sure that any changes you make won't have adverse effects on the rest of your program refactoring is not about fixing errors or crashes, it's about improving already working code in some way there are 3 reasons why you may want to refactor your code the first reason to refactor is to improve performance: sometimes based on the types of data you work with, your program might require a lot of memory or processing power refactoring your code to be more efficient with resources can make you programs faster second reason is to support new features: as you add new capabilities to your project, you might have existing sections of code that need to be updated to better support the code you add to your program the third reason to refactor your code is to improve readability: sometimes when you write your code it might make sense to you, but going back and cleaning things up like variable names, method names, and adding comments can make your code easier for others to understand and work with refactoring existing code is a common practice for any programmer, and keeps your code working its best and makes you a better programmer along the way","title":"refactor code to make improvements"},{"location":"computer-science/programming/#save-progress-and-work-with-others","text":"working as a developer is an iterative process, as you add more capabilities to your project and re-factor existing code, you will want to keep a history of your progress sometime changes you make do not quite work out and you need a way to go back in time to an earlier point and restore from an earlier version using code repositories are the main way your are able to do that one of the most popular methods is Git and GitHub, which is used to manage your code and work with others collaboratively on a project code repositories are essentially snapshots in time, the capture your code at a certain point called a \"commit\" when you finish editing your code you perform a commit that saves that point in time and the state of the code in the repository you provide a description and then that is saved into the repository as you continue to make changes even if you make additional commits, if you ever need to go back to another point, you can restore code from an earlier point in time you can create a branch in code repositories branches are points in the life of your code that you break the development up into 2 parts one reason could be that you are getting ready to build the next major version of your product, but you need to keep the existing version around to fix bugs and issues that might crop up while you are developing the new version when you are ready to release your new version, you can then manage both versions of code or merge back if you need to code repositories allow you to work collaboratively with others coding projects can become really big and often too large for a single person to manage with a code repository, you can have multiple people work with different sections of code when they commit their code, you will get a notification that your project has been updated by another person you can then compare or diff between what you have and the new code to you see if you need if you need to refactor anything that you have been working on","title":"save progress and work with others"},{"location":"computer-science/programming/#build-iteratively-using-agile-development","text":"agile means that the product is designed and built over multiple phases with each phase work goes into adding functionality or features that either the end user can use or you need to have in place before you can do other work each phase, sometimes called a sprint, is planned independently from one another a roadmap brings it all together and plots out all the sprints that are required to release the product to market as programmer you will learn that agile is use for many projects","title":"build iteratively using agile development"},{"location":"computer-science/programming/#create-for-multiple-platforms","text":"as a programmer you will build programmers and apps for customers and users not all of your users might be the same consider they might be using different OS, devices, or browsers you need to plan for this reality by planning to build for multiple platforms there are 2 ways to make apps for multiple platforms the first is to use first-party tools these are tools technologies and programming languages that are created by the makers of the operating system and ecosystem these tools come from companies such as google microsoft and apple although these tools are different the programming languages for each of them are very similar (c-sharp java swift) and are based on the same principals the alternative is to use 3rd party tools that can build applications for multiple platforms at the same time some of these are based on web technologies, like Cordova, while others are based on other platforms like Xamarin or Unity with C-sharp, .net the advantage of these is that you only need to learn 1 set of tools or technologies but you do trade off some platform specific-capabilities the important thing is that when learning programming you should keep in mind that you will be targeting many, many people and not all of these people will have the same devices or software as developer you need to plan on reaching as many people as you can with your project and that may require building for multiple platforms","title":"create for multiple platforms"},{"location":"computer-science/terms/","text":"Technical Terms \u00b6 explanations \u00b6 mutability \u00b6 mutability is the ability for some set or piece of data to change a mutable piece of data can be changed such as the day of the week immutability \u00b6 immutability is the inability for some set or piece of data to change an immutable piece of data cannot be changed such as the number of hours in a day reassignment \u00b6 some data can be reassigned but not technically changed an example of reassignment but not mutability is someone who legally changes their name their birthname cannot actually be changed, but their name variable is assigned a new value ASCII text \u00b6 there are many ways to represent information on a computer all methods involve defining a relationship between the information and some numbers that will be used to represent it computers only understand numbers and all data is converted to numeric representation some of these representation systems are very complex (such as compressed video files) and others are rather simple one of the earliest and simplest is called ASCII text ASCII (pronounced \"As-Key\") is short for American Standard Code for Information Interchange this is a simple encoding scheme that was first used on Teletype machines to map keyboard characters to numbers text is a simple one-to-one mapping of characters to numbers and it is very compact fifty characters of text translates to fifty bytes of data operand \u00b6 the number in a math problem that is getting operated on quick references \u00b6","title":"Terms"},{"location":"computer-science/terms/#technical-terms","text":"","title":"Technical Terms"},{"location":"computer-science/terms/#explanations","text":"","title":"explanations"},{"location":"computer-science/terms/#mutability","text":"mutability is the ability for some set or piece of data to change a mutable piece of data can be changed such as the day of the week","title":"mutability"},{"location":"computer-science/terms/#immutability","text":"immutability is the inability for some set or piece of data to change an immutable piece of data cannot be changed such as the number of hours in a day","title":"immutability"},{"location":"computer-science/terms/#reassignment","text":"some data can be reassigned but not technically changed an example of reassignment but not mutability is someone who legally changes their name their birthname cannot actually be changed, but their name variable is assigned a new value","title":"reassignment"},{"location":"computer-science/terms/#ascii-text","text":"there are many ways to represent information on a computer all methods involve defining a relationship between the information and some numbers that will be used to represent it computers only understand numbers and all data is converted to numeric representation some of these representation systems are very complex (such as compressed video files) and others are rather simple one of the earliest and simplest is called ASCII text ASCII (pronounced \"As-Key\") is short for American Standard Code for Information Interchange this is a simple encoding scheme that was first used on Teletype machines to map keyboard characters to numbers text is a simple one-to-one mapping of characters to numbers and it is very compact fifty characters of text translates to fifty bytes of data","title":"ASCII text"},{"location":"computer-science/terms/#operand","text":"the number in a math problem that is getting operated on","title":"operand"},{"location":"computer-science/terms/#quick-references","text":"","title":"quick references"},{"location":"computer-science/HTTP/headers/","text":"HTTP Headers \u00b6 overview \u00b6 HTTP is stateless this means if the client, or server,or both, need information about the state of the other (or any other info), we have to send that info along with our request or response this is what HTTP headers are for An HTTP header is a human-readable name-value pair, separated by colons, added to the HTTP request or response, which can be used to pass standard or custom information back and forth between the client and server a request can contain as many headers as are needed, each separated by a line-break if you wanted to send a POST request to a CMS to create a new resource, you would first have to authenticate yourself to prove to the server that you have the correct authorization to create new resources, in it's most basic form, this type of authentication is done by sending an authentication header, with basic authentication information, a username and password Authorization: Basic ouagnagf98u983u4ng308ving4== in the real world, the username password combo is Base64 encoded, to ensure it does not get misunderstood at a text a string, when passed to the server cookies \u00b6 if the server wants or needs the client to remember where its has been or what state it is in, like what video and how far in a client is while watching online content, it can use a set cookie header, to give the client a cookie, a small piece of data the next time the client visits the server it sends the cookie back, and the server brings the client to the right state, cookies like this are used everywhere on the web cookies are the reason why news and social media sites seem to remember where you have been and why you stay logged into sites even after you have closed the tab or the browser you may have seen warnings on some sites, telling you they use cookies to track you, this is what they are talking about you can see what cookies a website has sent to your browser, by looking at the cookies in the application section in your developer tools if you are worried about cookies stored in your browser, you can delete them by clearing the browser data this will log you out of any site using cookies, and will make your browser \"forget\" where it has been it does not actually forget anything but it forgets the cookies header information \u00b6 headers are also often used to provide information about the client or the server this can be anything, such as data and time information about the request / response pair it can be a user agent header identifying the client it can be server header identifying the software being used by the server proxy information security information cross origin resource sharing information with HTTP/2 and other modern technologies, we are also seeing new headers come online these new headers include Link, which allows us to use server Push, to push files to the client before they are requested viewing HTTP headers \u00b6 the easiest way to see HTTP headers is through the browser developer tools developer tools rely on the browser to generate requests if you need to send custom request headers to a server to test the response, you can do so using a REST client REST \u00b6 representational state transfer is a set of rules that describe how data is transferred and managed between clients and servers the entire web is a giant RESTful API, and you can use a REST client to interface with it for our purposes, a REST client is a request-only user agent that allows us to create custom request headers, send them off to a server, and inspect the response postman and vscode extension are REST client tools cache \u00b6 overview \u00b6 if the server wants a client to cache(to save some data for a specific period of time), it can send one or several cache headers these headers tell the browser what files to save and whether cached files should be updated, and for how long they should be kept caching files can dramatically improve website performance, because you are not sending as many files back and forth every time you reload a page BUT, when files are cached in the browser, the browser will not receive any new versions of those files, until those cached files are either cleared or have expired details \u00b6 on your website you may have contents that are rarely updated, like your JS and CSS files content that is sometimes updated such as pages content that is updated all the time, like the front page or a new section of an information site both servers and clients can tell the other party to cache (literally store store for later) any files they send through HTTP once cached, these files will be used instead of downloading fresh ones and cannot be overwritten from the server, this dramatically speeds up the site and performance you can provide specific instructions on how long to cache the files for and under what circumstances the cached files can be overwritten this is all done using the cache control header cache-control \u00b6 most commonly cache-control is used to store files in the browser to speed up future visits to the same address it does this by storing the files and then just using the stored files instead of downloading new ones this done using the cache-control max-age directive the below example says please store this file for one year and use it instead of requesting to download a fresh copy during that time Cache-Control: max-age: 31536000 cache request directives \u00b6 Cache-Control: max-age = <seconds> max-stale [= <seconds> ] min-fresh = <seconds> no-cache no-store no-transform only-if-cached cache response directives \u00b6 Cache-Control: must-revalidate no-cache no-store no-transform public private proxy-revalidate max-age = <seconds> s-maxage = <seconds>","title":"Headers"},{"location":"computer-science/HTTP/headers/#http-headers","text":"","title":"HTTP Headers"},{"location":"computer-science/HTTP/headers/#overview","text":"HTTP is stateless this means if the client, or server,or both, need information about the state of the other (or any other info), we have to send that info along with our request or response this is what HTTP headers are for An HTTP header is a human-readable name-value pair, separated by colons, added to the HTTP request or response, which can be used to pass standard or custom information back and forth between the client and server a request can contain as many headers as are needed, each separated by a line-break if you wanted to send a POST request to a CMS to create a new resource, you would first have to authenticate yourself to prove to the server that you have the correct authorization to create new resources, in it's most basic form, this type of authentication is done by sending an authentication header, with basic authentication information, a username and password Authorization: Basic ouagnagf98u983u4ng308ving4== in the real world, the username password combo is Base64 encoded, to ensure it does not get misunderstood at a text a string, when passed to the server","title":"overview"},{"location":"computer-science/HTTP/headers/#cookies","text":"if the server wants or needs the client to remember where its has been or what state it is in, like what video and how far in a client is while watching online content, it can use a set cookie header, to give the client a cookie, a small piece of data the next time the client visits the server it sends the cookie back, and the server brings the client to the right state, cookies like this are used everywhere on the web cookies are the reason why news and social media sites seem to remember where you have been and why you stay logged into sites even after you have closed the tab or the browser you may have seen warnings on some sites, telling you they use cookies to track you, this is what they are talking about you can see what cookies a website has sent to your browser, by looking at the cookies in the application section in your developer tools if you are worried about cookies stored in your browser, you can delete them by clearing the browser data this will log you out of any site using cookies, and will make your browser \"forget\" where it has been it does not actually forget anything but it forgets the cookies","title":"cookies"},{"location":"computer-science/HTTP/headers/#header-information","text":"headers are also often used to provide information about the client or the server this can be anything, such as data and time information about the request / response pair it can be a user agent header identifying the client it can be server header identifying the software being used by the server proxy information security information cross origin resource sharing information with HTTP/2 and other modern technologies, we are also seeing new headers come online these new headers include Link, which allows us to use server Push, to push files to the client before they are requested","title":"header information"},{"location":"computer-science/HTTP/headers/#viewing-http-headers","text":"the easiest way to see HTTP headers is through the browser developer tools developer tools rely on the browser to generate requests if you need to send custom request headers to a server to test the response, you can do so using a REST client","title":"viewing HTTP headers"},{"location":"computer-science/HTTP/headers/#rest","text":"representational state transfer is a set of rules that describe how data is transferred and managed between clients and servers the entire web is a giant RESTful API, and you can use a REST client to interface with it for our purposes, a REST client is a request-only user agent that allows us to create custom request headers, send them off to a server, and inspect the response postman and vscode extension are REST client tools","title":"REST"},{"location":"computer-science/HTTP/headers/#cache","text":"","title":"cache"},{"location":"computer-science/HTTP/headers/#overview_1","text":"if the server wants a client to cache(to save some data for a specific period of time), it can send one or several cache headers these headers tell the browser what files to save and whether cached files should be updated, and for how long they should be kept caching files can dramatically improve website performance, because you are not sending as many files back and forth every time you reload a page BUT, when files are cached in the browser, the browser will not receive any new versions of those files, until those cached files are either cleared or have expired","title":"overview"},{"location":"computer-science/HTTP/headers/#details","text":"on your website you may have contents that are rarely updated, like your JS and CSS files content that is sometimes updated such as pages content that is updated all the time, like the front page or a new section of an information site both servers and clients can tell the other party to cache (literally store store for later) any files they send through HTTP once cached, these files will be used instead of downloading fresh ones and cannot be overwritten from the server, this dramatically speeds up the site and performance you can provide specific instructions on how long to cache the files for and under what circumstances the cached files can be overwritten this is all done using the cache control header","title":"details"},{"location":"computer-science/HTTP/headers/#cache-control","text":"most commonly cache-control is used to store files in the browser to speed up future visits to the same address it does this by storing the files and then just using the stored files instead of downloading new ones this done using the cache-control max-age directive the below example says please store this file for one year and use it instead of requesting to download a fresh copy during that time Cache-Control: max-age: 31536000","title":"cache-control"},{"location":"computer-science/HTTP/headers/#cache-request-directives","text":"Cache-Control: max-age = <seconds> max-stale [= <seconds> ] min-fresh = <seconds> no-cache no-store no-transform only-if-cached","title":"cache request directives"},{"location":"computer-science/HTTP/headers/#cache-response-directives","text":"Cache-Control: must-revalidate no-cache no-store no-transform public private proxy-revalidate max-age = <seconds> s-maxage = <seconds>","title":"cache response directives"},{"location":"computer-science/HTTP/http-essentials/","text":"HTTP Essentials \u00b6 Hypertext transfer protocol, a protocol used to transfer hypertext in this context, a protocol is a system of rules that allow communication between different entities, such as computers hypertext is a somewhat outdated word for text that is displayed on a computer screen, which contains links to other texts (web documents) HTTP is the set of rules that servers and web browsers use to transfer web documents back and forth, which is why every URL starts with HTTP the core component of HTTP is the request-response pair HTTP headers \u00b6 when requests and responses are sent back and forth over HTTP, we can include HTTP headers with additional information these headers can include: - what type of client sent the request - server configuration - time and date of the response - how long the client should store the data - what format the data is in - the cookies used to track sessions seeing HTTP in action \u00b6 anytime you load something in a web browser, you are seeing HTTP work when using a web browser you are not actually seeing what is really happening because the browser puts a nice User Interface on top of all the code stuff happening behind the scenes to see what is happening behind the scenes, you need to use the browser's developer tools developer tools \u00b6 open developer tools go to the network tab this tool can capture all the network traffic, between the browser and the server and display it to you the tool does not always do this by default because it uses a lot of resources once you've opened the network tab, make sure all is checked, and then hit reload for the page all the files that the browser requested from the server will be displayed in the transferred column you can see which files have been cached by the computer you can click on any of these files and see the full transaction that took place you will see: - the URL that was requested by the browser - the request method , GET majority of the time - the remote IP address that the URL resolved to - the status code for the response - the HTTP version that was used - request headers - response headers to run more in depth tests on response and request headers, you can use a dedicated rest client to do so with these applications you can send custom request headers as plain text and get the responses back as plain text to inspect, without having to deal with the browser interface HTTP flow \u00b6 imagine the whole web as a library, and you are a client looking for information in this library, each row in a shelf is a website each site / row can carry a bunch if different books (information, documents, images, audio, stylesheets, js sheets, etc.) when you want to see what is on one of these websites / rows, you go to the librarian and make a HTTP protocol request can i get the stuff from row #3? this request is received and handled by the librarian (representing servers on the web), who goes to the cubby, gathers up the relevant pieces that match your request, and hands them back with a response status flow of all HTTP transactions \u00b6 the browser opens a TCP connection to the server this ensures data can be sent back and forth over the network and that the data sent from one end is put together the same way at the other end if the connection happens over HTTPS, TLS certificates are exchanged to ensure only the computer and the server can encrypt and decrypt the transmitted data this prevents anyone from being able to eaves drop on the conversation between the client and server, and steal the data they are transmitting the browser sends an HTTP message this message always contains an HTTP method like GET, PUT, DELETE, etc. the message also always contains a URL pointing at the requested resource the message can also contain headers like cookies, or authentication data the header can also contain data if the browser is submitting data to the server using the post, put, or patch methods the server performs the requested actions and sends a response back to the browser this response will contain a HTTP status message indicating what happened the response will include headers with information about the response the response will also return the data that was requested the returned data could be an HTML document, stylesheet, JS file, image, or any other type of content used in a standard website once the response is full received, the TCP connection is closed since HTTP is stateless we are now back to a clean state in most scenarios the HTTP transaction between a browser and a server is to receive a web document for a page or a view this document typically holds links to CSS and JS files as well as referenced elements like images each of these items is fetched from their server and brought into the browser using the same HTTP flow HTTP/2 multiplexing + server push \u00b6 HTTP2 allows multiplexing, meaning multiple transactions can take place over the same TCP connection at the same time this new protocol also allows the server to push the data to the browser pushing data to the browser means if the browser requests a specific document, the server can say \"this document depends on these other files, so i will push them to you at the same time\" this improves performance and reduces the load time for webpages and views significantly HTTP/2 vs HTTP/1.1 \u00b6 when people talk about HTTP they often refer to HTTPS and HTTP/2 just like other technology HTTP is constantly evolving and improved to be better, stronger, faster the page is referring to HTTP/2 HTTP/2 is relatively new in web terms, and as of 04/03/18 powers between 70-80% of all transactions over web the older protocol HTTP/1.1 is still alive and is also the fallback protocol anytime HTTP/2 fails, which means you will encounter HTTP/1.1 from time to time now and in the future HTTP/2: - is faster and more secure and uses compression algorithms to speed up requests - allows for multiplexing, which means multiple files are sent over a connection at the same time - requires an encrypted connection between the client and server through HTTPS HTTP/1.1 - uncompressed headers - transfers only 1 file at a time over a connection - no default encryption in an ideal world every HTTP transactions would be encrypted over a HTTPS connection using the HTTP/2 protocol in the real world most HTTP transactions will be done using HTTPS over HTTP/2 and when that does not work they will fall back on unencrypted HTTP/1.1, which while slower still gets the job done fine core principals \u00b6 Plain Language & Human Readable \u00b6 when you see a HTTP request or response you can read it out loud and understand what it is saying, even if you don't really know how the technology works for example, all HTTP request methods use simple human words (GET, POST, PUT, DELETE, CONNECT, HEAD) you do not need to know anything about computers or networks do get an idea of what the above verbs mean stateless protocol \u00b6 this means each request sent over the protocol is unique, and no request is connected to another request in other words, HTTP has no memory of other requests if you go to a webpage with a photo gallery slideshow and it will show you the first picture, reload the page and it will show you the first picture again because HTTP has no memory if you making that first request this means users cannot go through sequences of content using multiple requests to fix this, HTTP allows sessions, which are stored states shared between the browser and the server if a user is flipping through a photo gallery, the browser and server can exchange information about where the visitor is in the sequence by passing information back and forth in the form of cookies reload a page and your browser sends a cookie to server that says \"last time we spoke, we were looking at the 3rd picture\" HTTP is stateless, but it is not session-less request/response pairs \u00b6 HTTP works based on request / response pairs every action performed on HTTP starts with a request using one of the HTTP methods every action performed on HTTP ends with a response containing an HTTP status code, saying what happened to the request, along with data like headers, and content","title":"Essentials"},{"location":"computer-science/HTTP/http-essentials/#http-essentials","text":"Hypertext transfer protocol, a protocol used to transfer hypertext in this context, a protocol is a system of rules that allow communication between different entities, such as computers hypertext is a somewhat outdated word for text that is displayed on a computer screen, which contains links to other texts (web documents) HTTP is the set of rules that servers and web browsers use to transfer web documents back and forth, which is why every URL starts with HTTP the core component of HTTP is the request-response pair","title":"HTTP Essentials"},{"location":"computer-science/HTTP/http-essentials/#http-headers","text":"when requests and responses are sent back and forth over HTTP, we can include HTTP headers with additional information these headers can include: - what type of client sent the request - server configuration - time and date of the response - how long the client should store the data - what format the data is in - the cookies used to track sessions","title":"HTTP headers"},{"location":"computer-science/HTTP/http-essentials/#seeing-http-in-action","text":"anytime you load something in a web browser, you are seeing HTTP work when using a web browser you are not actually seeing what is really happening because the browser puts a nice User Interface on top of all the code stuff happening behind the scenes to see what is happening behind the scenes, you need to use the browser's developer tools","title":"seeing HTTP in action"},{"location":"computer-science/HTTP/http-essentials/#developer-tools","text":"open developer tools go to the network tab this tool can capture all the network traffic, between the browser and the server and display it to you the tool does not always do this by default because it uses a lot of resources once you've opened the network tab, make sure all is checked, and then hit reload for the page all the files that the browser requested from the server will be displayed in the transferred column you can see which files have been cached by the computer you can click on any of these files and see the full transaction that took place you will see: - the URL that was requested by the browser - the request method , GET majority of the time - the remote IP address that the URL resolved to - the status code for the response - the HTTP version that was used - request headers - response headers to run more in depth tests on response and request headers, you can use a dedicated rest client to do so with these applications you can send custom request headers as plain text and get the responses back as plain text to inspect, without having to deal with the browser interface","title":"developer tools"},{"location":"computer-science/HTTP/http-essentials/#http-flow","text":"imagine the whole web as a library, and you are a client looking for information in this library, each row in a shelf is a website each site / row can carry a bunch if different books (information, documents, images, audio, stylesheets, js sheets, etc.) when you want to see what is on one of these websites / rows, you go to the librarian and make a HTTP protocol request can i get the stuff from row #3? this request is received and handled by the librarian (representing servers on the web), who goes to the cubby, gathers up the relevant pieces that match your request, and hands them back with a response status","title":"HTTP flow"},{"location":"computer-science/HTTP/http-essentials/#flow-of-all-http-transactions","text":"the browser opens a TCP connection to the server this ensures data can be sent back and forth over the network and that the data sent from one end is put together the same way at the other end if the connection happens over HTTPS, TLS certificates are exchanged to ensure only the computer and the server can encrypt and decrypt the transmitted data this prevents anyone from being able to eaves drop on the conversation between the client and server, and steal the data they are transmitting the browser sends an HTTP message this message always contains an HTTP method like GET, PUT, DELETE, etc. the message also always contains a URL pointing at the requested resource the message can also contain headers like cookies, or authentication data the header can also contain data if the browser is submitting data to the server using the post, put, or patch methods the server performs the requested actions and sends a response back to the browser this response will contain a HTTP status message indicating what happened the response will include headers with information about the response the response will also return the data that was requested the returned data could be an HTML document, stylesheet, JS file, image, or any other type of content used in a standard website once the response is full received, the TCP connection is closed since HTTP is stateless we are now back to a clean state in most scenarios the HTTP transaction between a browser and a server is to receive a web document for a page or a view this document typically holds links to CSS and JS files as well as referenced elements like images each of these items is fetched from their server and brought into the browser using the same HTTP flow","title":"flow of all HTTP transactions"},{"location":"computer-science/HTTP/http-essentials/#http2-multiplexing-server-push","text":"HTTP2 allows multiplexing, meaning multiple transactions can take place over the same TCP connection at the same time this new protocol also allows the server to push the data to the browser pushing data to the browser means if the browser requests a specific document, the server can say \"this document depends on these other files, so i will push them to you at the same time\" this improves performance and reduces the load time for webpages and views significantly","title":"HTTP/2 multiplexing + server push"},{"location":"computer-science/HTTP/http-essentials/#http2-vs-http11","text":"when people talk about HTTP they often refer to HTTPS and HTTP/2 just like other technology HTTP is constantly evolving and improved to be better, stronger, faster the page is referring to HTTP/2 HTTP/2 is relatively new in web terms, and as of 04/03/18 powers between 70-80% of all transactions over web the older protocol HTTP/1.1 is still alive and is also the fallback protocol anytime HTTP/2 fails, which means you will encounter HTTP/1.1 from time to time now and in the future HTTP/2: - is faster and more secure and uses compression algorithms to speed up requests - allows for multiplexing, which means multiple files are sent over a connection at the same time - requires an encrypted connection between the client and server through HTTPS HTTP/1.1 - uncompressed headers - transfers only 1 file at a time over a connection - no default encryption in an ideal world every HTTP transactions would be encrypted over a HTTPS connection using the HTTP/2 protocol in the real world most HTTP transactions will be done using HTTPS over HTTP/2 and when that does not work they will fall back on unencrypted HTTP/1.1, which while slower still gets the job done fine","title":"HTTP/2 vs HTTP/1.1"},{"location":"computer-science/HTTP/http-essentials/#core-principals","text":"","title":"core principals"},{"location":"computer-science/HTTP/http-essentials/#plain-language-human-readable","text":"when you see a HTTP request or response you can read it out loud and understand what it is saying, even if you don't really know how the technology works for example, all HTTP request methods use simple human words (GET, POST, PUT, DELETE, CONNECT, HEAD) you do not need to know anything about computers or networks do get an idea of what the above verbs mean","title":"Plain Language &amp; Human Readable"},{"location":"computer-science/HTTP/http-essentials/#stateless-protocol","text":"this means each request sent over the protocol is unique, and no request is connected to another request in other words, HTTP has no memory of other requests if you go to a webpage with a photo gallery slideshow and it will show you the first picture, reload the page and it will show you the first picture again because HTTP has no memory if you making that first request this means users cannot go through sequences of content using multiple requests to fix this, HTTP allows sessions, which are stored states shared between the browser and the server if a user is flipping through a photo gallery, the browser and server can exchange information about where the visitor is in the sequence by passing information back and forth in the form of cookies reload a page and your browser sends a cookie to server that says \"last time we spoke, we were looking at the 3rd picture\" HTTP is stateless, but it is not session-less","title":"stateless protocol"},{"location":"computer-science/HTTP/http-essentials/#requestresponse-pairs","text":"HTTP works based on request / response pairs every action performed on HTTP starts with a request using one of the HTTP methods every action performed on HTTP ends with a response containing an HTTP status code, saying what happened to the request, along with data like headers, and content","title":"request/response pairs"},{"location":"computer-science/HTTP/http-terminology/","text":"HTTP terminology \u00b6 browser \u00b6 application used to access and navigate HTML documents browsers have many varieties aside from the normal visual browser other browser varieties include text-to-speech browsers, audio browsers, text-only browsers, vr, ar, mr, xr user agent \u00b6 application acting on behalf of the user literally an agent of the user that is typically in a browser commonly referred to as a client application normally the browser but not always, could be middleware for example TCP \u00b6 short for Transmission Control Protocol one of the main internet protocols used by the World Wide Web, email, File Transfer Protocol, and remote administration when you connect to a service over the internet, you are probably using a TCP connection IP \u00b6 short for Internet Protocol the protocol actually used to transfer data between computers over a network every device connected to the internet as a dedicated IP address URL \u00b6 short for Uniform Resource Locator an address pointing at a resource on the web DNS \u00b6 short for domain name server DNS catalogs all domain name URLs and points them to the IP addresses of servers resource \u00b6 the file or files available on a server when following a URL server \u00b6 computer on the internet running some form of data storage and sharing application, most commonly a web server application HTTP is a client-server protocol, meaning a client / user-agent / browser sends a request to the server and the server serves responses back to the client proxy \u00b6 dictionary definition 1. On e appointed or authorized to act for another , especially a person appointed to vote as on e wishes at a meeting . 2. The authority to act for another . 3. The written authorization to act in place of another . software or hardware service acting as a middle person between clients and servers proxies are often used when the IP address of a server needs to be hidden, or when a client or server sits behind some kind of network barrier like a firewall the proxy is quite literally a proxy, handing data back and forth between the client and server request-response pairs \u00b6 clients and servers communicate over HTTP using request-response pairs a request is sent and a response is returned the client request contains: - a request method , describing what action is requested - an address pointing to a resource - other information about the client - if a client is trying to send information to the server , that information is also packaged in the request as a payload the response is literally a response to the request, it contains: - a status response code explaining what happened - information about how the response was handled - any data requested if the response was successful header \u00b6 requests and responses use HTTP headers to: - pass information back and forth - identify themselves - explain what they want every request and response as a header and some also have payloads (the data that is transferred) the header contains metadata about the request facilitating communication between clients and servers HTTP request method / verb \u00b6 every HTTP request contains a method(a verb) explaining what action the sender wants to perform on the resource the request methods include: - GET to get something - PUT to put something - UPDATE to update something - DELETE to delete something Status Response Code \u00b6 the header of a HTTP response always contains a status response code numerical code in the 100 to 500 range describing what type of response the server sent back to the client different number ranges are used for different types of responses: - 100s for information - 200s for success - 300s for redirection - 400s for client error - 500s for server error cache \u00b6 dictionary definitions: 1. An amount of go ods or val uables , especially when kept in a concealed or hard - to - reach place . 2. The concealed or hard - to - reach place used for storing a cache . 3. A fast storage buffer in the central processing unit of a computer . method for storing data on the client or the server to speed up performance literally store data for a length of time to speed up transfers and performance for example, when you visit a regular website, your browser will likely download the CSS files for that website once, and then cache it in it's memory so when you navigate to the next page or come back to the site later, you don't have to re-download that CSS file websites and web servers can instruct clients to: - cache files - clear cached files - update specific cached files this is done through instructions passed in a cache header stateless \u00b6 HTTP is stateless, meaning every request and response is unique, and no state is stored cookie \u00b6 used to create stateful HTTP sessions, and notify the client and server what state each other is in string of data passed back and forth between the client and server to create a stateful session this is how once you have logged into a website, you stay logged in session \u00b6 clients and servers can share information about states by passing information back and forth, creating a session when you login to a website, you typically stayed logged in this happens because the server has placed a cookie in your browser, in it's cache","title":"Terminology"},{"location":"computer-science/HTTP/http-terminology/#http-terminology","text":"","title":"HTTP terminology"},{"location":"computer-science/HTTP/http-terminology/#browser","text":"application used to access and navigate HTML documents browsers have many varieties aside from the normal visual browser other browser varieties include text-to-speech browsers, audio browsers, text-only browsers, vr, ar, mr, xr","title":"browser"},{"location":"computer-science/HTTP/http-terminology/#user-agent","text":"application acting on behalf of the user literally an agent of the user that is typically in a browser commonly referred to as a client application normally the browser but not always, could be middleware for example","title":"user agent"},{"location":"computer-science/HTTP/http-terminology/#tcp","text":"short for Transmission Control Protocol one of the main internet protocols used by the World Wide Web, email, File Transfer Protocol, and remote administration when you connect to a service over the internet, you are probably using a TCP connection","title":"TCP"},{"location":"computer-science/HTTP/http-terminology/#ip","text":"short for Internet Protocol the protocol actually used to transfer data between computers over a network every device connected to the internet as a dedicated IP address","title":"IP"},{"location":"computer-science/HTTP/http-terminology/#url","text":"short for Uniform Resource Locator an address pointing at a resource on the web","title":"URL"},{"location":"computer-science/HTTP/http-terminology/#dns","text":"short for domain name server DNS catalogs all domain name URLs and points them to the IP addresses of servers","title":"DNS"},{"location":"computer-science/HTTP/http-terminology/#resource","text":"the file or files available on a server when following a URL","title":"resource"},{"location":"computer-science/HTTP/http-terminology/#server","text":"computer on the internet running some form of data storage and sharing application, most commonly a web server application HTTP is a client-server protocol, meaning a client / user-agent / browser sends a request to the server and the server serves responses back to the client","title":"server"},{"location":"computer-science/HTTP/http-terminology/#proxy","text":"dictionary definition 1. On e appointed or authorized to act for another , especially a person appointed to vote as on e wishes at a meeting . 2. The authority to act for another . 3. The written authorization to act in place of another . software or hardware service acting as a middle person between clients and servers proxies are often used when the IP address of a server needs to be hidden, or when a client or server sits behind some kind of network barrier like a firewall the proxy is quite literally a proxy, handing data back and forth between the client and server","title":"proxy"},{"location":"computer-science/HTTP/http-terminology/#request-response-pairs","text":"clients and servers communicate over HTTP using request-response pairs a request is sent and a response is returned the client request contains: - a request method , describing what action is requested - an address pointing to a resource - other information about the client - if a client is trying to send information to the server , that information is also packaged in the request as a payload the response is literally a response to the request, it contains: - a status response code explaining what happened - information about how the response was handled - any data requested if the response was successful","title":"request-response pairs"},{"location":"computer-science/HTTP/http-terminology/#header","text":"requests and responses use HTTP headers to: - pass information back and forth - identify themselves - explain what they want every request and response as a header and some also have payloads (the data that is transferred) the header contains metadata about the request facilitating communication between clients and servers","title":"header"},{"location":"computer-science/HTTP/http-terminology/#http-request-method-verb","text":"every HTTP request contains a method(a verb) explaining what action the sender wants to perform on the resource the request methods include: - GET to get something - PUT to put something - UPDATE to update something - DELETE to delete something","title":"HTTP request method / verb"},{"location":"computer-science/HTTP/http-terminology/#status-response-code","text":"the header of a HTTP response always contains a status response code numerical code in the 100 to 500 range describing what type of response the server sent back to the client different number ranges are used for different types of responses: - 100s for information - 200s for success - 300s for redirection - 400s for client error - 500s for server error","title":"Status Response Code"},{"location":"computer-science/HTTP/http-terminology/#cache","text":"dictionary definitions: 1. An amount of go ods or val uables , especially when kept in a concealed or hard - to - reach place . 2. The concealed or hard - to - reach place used for storing a cache . 3. A fast storage buffer in the central processing unit of a computer . method for storing data on the client or the server to speed up performance literally store data for a length of time to speed up transfers and performance for example, when you visit a regular website, your browser will likely download the CSS files for that website once, and then cache it in it's memory so when you navigate to the next page or come back to the site later, you don't have to re-download that CSS file websites and web servers can instruct clients to: - cache files - clear cached files - update specific cached files this is done through instructions passed in a cache header","title":"cache"},{"location":"computer-science/HTTP/http-terminology/#stateless","text":"HTTP is stateless, meaning every request and response is unique, and no state is stored","title":"stateless"},{"location":"computer-science/HTTP/http-terminology/#cookie","text":"used to create stateful HTTP sessions, and notify the client and server what state each other is in string of data passed back and forth between the client and server to create a stateful session this is how once you have logged into a website, you stay logged in","title":"cookie"},{"location":"computer-science/HTTP/http-terminology/#session","text":"clients and servers can share information about states by passing information back and forth, creating a session when you login to a website, you typically stayed logged in this happens because the server has placed a cookie in your browser, in it's cache","title":"session"},{"location":"computer-science/HTTP/requests-responses/","text":"Requests and Responses \u00b6 the core component of HTTP is the request-response pair anatomy of a URL \u00b6 to get access to information on the web, you need to know the address of that information this is what the Uniform Resource Locator is for URL is a human-readable address describing where on the web a particular resource is located a URL has two main parts: a protocol declaration, such as https:// a URN, Universal Resource Name, which provides the location of the resource the protocol declaration states how we are accessing the resource, using the http methods and transport layer the URN itself has different pieces: the host name, such as example.com, which is registered at a DNS (domain name service), which points to a dedicated server IP address somewhere on the web next we have the implied and invisible connection port, stating which port we want to connect with on the server, for HTTP connections the default port is 80, for HTTPS the default is 443 after the host and port is the resource path, which is the file location within the server lastly is an optional URL query such as https://example.com/search?q=my-search if the server uses the default port we do not see the port declared if the server uses another port or we want to access another port, like 3000, that port can be declared using a colon, like localhost:8080 the default names for web documents are index.html and default.htm or something similiar if we request a folder without a file specification, the server and browser automatically look for the default-named files if we are looking for something else, like contact.html or about.html, it needs to be requested specifically URL queries start with a ? and multiple can be strung together using an ampersand & HTTP methods \u00b6 every request sent over the HTTP protocol includes a method, aka a verb this method tells the server what type of action we want to perform with the request there are a limited set of these methods available and some are more used than others for standard web transactions, we typically only use 3 (GET, POST, and DELETE) the above 3 are not the only methods available to use methods include: - GET - POST - PUT - PATCH - DELETE - HEAD - OPTIONS - TRACE each of the HTTP methods has it's own request / response pair some methods require more information than others to send data to the server, we have 3 different methods (POST PUT PATCH) there are also 3 different methods to get data from server, without really touching the content(HEAD OPTIONS TRACE) GET \u00b6 the most frequently used HTTP method is GET it is also the most simple a GET request for a public resource only needs the method and the URL to work if the resource sits behind a security layer, the request typically also needs an authorization header, containing an encrypted username and password pair, and may require a cookie containing an authentication token if a get request if successful, a 200 OK HTTP status is returned, along with the requested data if a GET request does not work, the 404 Not Found status is returned, telling you the resource literally cannot be found at this address if the user does not have the correct access authorization,a 405 Not Allowed status is returned and if the resource is blocked by the server a 403 forbidden status is returned POST \u00b6 used for sending data to server is the one used most often, as it is the one used whenever you submit a form on a webpage a POST request asks the server to create a new resource, and give it an id for future retrieval because POST requests make changes to the server, they typically need an authorization header a successful POST request returns a 201 Created HTTP status, along with a link to the new resource ID, and a response header if the resource requested from a POST request already exists, the server returns a 409 conflict status if the POST request resource is sent to a resource that cannot create new resources then you get a 404 Not Found HTTP status in return PUT \u00b6 used to update a some or all contents of a resource with the contents of a request like POST, PUT typically requires an authorization header unlike POST, which just contains the contents of a resource, a PUT request contains the ID of a resource and the new content to be updated / added to that resource if the resource already exists, the existing contents in the resource are replaces with the contents in the PUT request if no resource with this ID exists, the server will in some cases allow a new resource to be created, or you will get an error message a successful PUT request returns a 200 OK status if there is no content on the server a 204 No Content status is returned if the id does not match an existing resource, a 404 Not Found status is returned if a PUT request is sent to a resource that cannot be updated, a 405 Method Not Allowed status is returned PATCH \u00b6 used to modify an existing resource while PUT updates a resource by replacing content, PATCH can carry along instructions on how to modify the existing resource, without necessarily replacing data PATCH also typically requires an authorization header and returns the same status as PUT DELETE \u00b6 deletes a specified resource a DELETE request must contain the id for the resource and an authorization header if you try to delete a resource you are not allowed to delete, you'll get a 405 Method Not Allowed Status what actually happens on a server when you send a DELETE request varies from server to server in some cases you delete a database entry in other cases you change the status of a database entry, without actually removing content it all depends on the design of the server you are interacting with HEAD \u00b6 returns just the HEAD section of the response OPTIONS \u00b6 returns a description of the communication options for the target resource TRACE \u00b6 creates a loop back of the request message, effectively telling the client where the request ended up HTTP status codes \u00b6 anytime you send a HTTP request to a server you will get a response, even if the response is that something went wrong this response starts with a HTTP status code, explaining what happened on the server and how your request was handled the client can use these status codes to identify successes and failures and automatically respond with next steps the HTTP response status codes are split into 5 main groupings to (100 200 300 400 500) codes 1xx information \u00b6 informational and rarely encountered used to inform the client of the status of the server 102 Processing tells the client to wait for the server to finish 100 Continue tells the client the server has received the request headers and is ready for the rest of the request body the last one is typically encountered when sending POST requests with a large data body 2xx success \u00b6 status codes of the 2xx format are success messages these are common codes including 200 OK 200 OK means the request was successful 201 Created means the request was successful and a new resource was create 204 No Content means the server processed the request but returned no content 3xx redirection \u00b6 indicates redirection the client is provided with a new URL to follow to get the requested resource 301 Moved Permanently which tells the client \"use this new URI for all future request\" 302 Found which technically means \"resource temporarily redirected to this other URI\", but is most often used to mean \"the response to this resource is actually found at this other URI\", which is the real job of 303 See Other 303 See Other ^ 307 Temporary redirect 308 Permanent redirect 4xx client error \u00b6 signal client errors 400 Bad request = the request is either malformed or too large or something similar 401 Unauthorized = the client lacks proper authentication to access the resource 403 Forbidden = the request is refused by the server, typically because the client is not logged in or does not have the correct permissions 404 Not found = the resource doesn't exist 405 Method not allowed = means the HTTP verb / request method, such as \"POST\" was used on a resource that can only receive a certain method like GET 5xx server error \u00b6 signal server errors 500 internal server error, meaning something went wrong on the server 502 bad gateway, meaning the server acts as a literal gateway or proxy and received an invalid response from wherever it was trying to connect to 503 service unavailable, encountered when a server is overloaded, or temporarily unavailable or something else goes wrong","title":"Requests & Responses"},{"location":"computer-science/HTTP/requests-responses/#requests-and-responses","text":"the core component of HTTP is the request-response pair","title":"Requests and Responses"},{"location":"computer-science/HTTP/requests-responses/#anatomy-of-a-url","text":"to get access to information on the web, you need to know the address of that information this is what the Uniform Resource Locator is for URL is a human-readable address describing where on the web a particular resource is located a URL has two main parts: a protocol declaration, such as https:// a URN, Universal Resource Name, which provides the location of the resource the protocol declaration states how we are accessing the resource, using the http methods and transport layer the URN itself has different pieces: the host name, such as example.com, which is registered at a DNS (domain name service), which points to a dedicated server IP address somewhere on the web next we have the implied and invisible connection port, stating which port we want to connect with on the server, for HTTP connections the default port is 80, for HTTPS the default is 443 after the host and port is the resource path, which is the file location within the server lastly is an optional URL query such as https://example.com/search?q=my-search if the server uses the default port we do not see the port declared if the server uses another port or we want to access another port, like 3000, that port can be declared using a colon, like localhost:8080 the default names for web documents are index.html and default.htm or something similiar if we request a folder without a file specification, the server and browser automatically look for the default-named files if we are looking for something else, like contact.html or about.html, it needs to be requested specifically URL queries start with a ? and multiple can be strung together using an ampersand &","title":"anatomy of a URL"},{"location":"computer-science/HTTP/requests-responses/#http-methods","text":"every request sent over the HTTP protocol includes a method, aka a verb this method tells the server what type of action we want to perform with the request there are a limited set of these methods available and some are more used than others for standard web transactions, we typically only use 3 (GET, POST, and DELETE) the above 3 are not the only methods available to use methods include: - GET - POST - PUT - PATCH - DELETE - HEAD - OPTIONS - TRACE each of the HTTP methods has it's own request / response pair some methods require more information than others to send data to the server, we have 3 different methods (POST PUT PATCH) there are also 3 different methods to get data from server, without really touching the content(HEAD OPTIONS TRACE)","title":"HTTP methods"},{"location":"computer-science/HTTP/requests-responses/#get","text":"the most frequently used HTTP method is GET it is also the most simple a GET request for a public resource only needs the method and the URL to work if the resource sits behind a security layer, the request typically also needs an authorization header, containing an encrypted username and password pair, and may require a cookie containing an authentication token if a get request if successful, a 200 OK HTTP status is returned, along with the requested data if a GET request does not work, the 404 Not Found status is returned, telling you the resource literally cannot be found at this address if the user does not have the correct access authorization,a 405 Not Allowed status is returned and if the resource is blocked by the server a 403 forbidden status is returned","title":"GET"},{"location":"computer-science/HTTP/requests-responses/#post","text":"used for sending data to server is the one used most often, as it is the one used whenever you submit a form on a webpage a POST request asks the server to create a new resource, and give it an id for future retrieval because POST requests make changes to the server, they typically need an authorization header a successful POST request returns a 201 Created HTTP status, along with a link to the new resource ID, and a response header if the resource requested from a POST request already exists, the server returns a 409 conflict status if the POST request resource is sent to a resource that cannot create new resources then you get a 404 Not Found HTTP status in return","title":"POST"},{"location":"computer-science/HTTP/requests-responses/#put","text":"used to update a some or all contents of a resource with the contents of a request like POST, PUT typically requires an authorization header unlike POST, which just contains the contents of a resource, a PUT request contains the ID of a resource and the new content to be updated / added to that resource if the resource already exists, the existing contents in the resource are replaces with the contents in the PUT request if no resource with this ID exists, the server will in some cases allow a new resource to be created, or you will get an error message a successful PUT request returns a 200 OK status if there is no content on the server a 204 No Content status is returned if the id does not match an existing resource, a 404 Not Found status is returned if a PUT request is sent to a resource that cannot be updated, a 405 Method Not Allowed status is returned","title":"PUT"},{"location":"computer-science/HTTP/requests-responses/#patch","text":"used to modify an existing resource while PUT updates a resource by replacing content, PATCH can carry along instructions on how to modify the existing resource, without necessarily replacing data PATCH also typically requires an authorization header and returns the same status as PUT","title":"PATCH"},{"location":"computer-science/HTTP/requests-responses/#delete","text":"deletes a specified resource a DELETE request must contain the id for the resource and an authorization header if you try to delete a resource you are not allowed to delete, you'll get a 405 Method Not Allowed Status what actually happens on a server when you send a DELETE request varies from server to server in some cases you delete a database entry in other cases you change the status of a database entry, without actually removing content it all depends on the design of the server you are interacting with","title":"DELETE"},{"location":"computer-science/HTTP/requests-responses/#head","text":"returns just the HEAD section of the response","title":"HEAD"},{"location":"computer-science/HTTP/requests-responses/#options","text":"returns a description of the communication options for the target resource","title":"OPTIONS"},{"location":"computer-science/HTTP/requests-responses/#trace","text":"creates a loop back of the request message, effectively telling the client where the request ended up","title":"TRACE"},{"location":"computer-science/HTTP/requests-responses/#http-status-codes","text":"anytime you send a HTTP request to a server you will get a response, even if the response is that something went wrong this response starts with a HTTP status code, explaining what happened on the server and how your request was handled the client can use these status codes to identify successes and failures and automatically respond with next steps the HTTP response status codes are split into 5 main groupings to (100 200 300 400 500) codes","title":"HTTP status codes"},{"location":"computer-science/HTTP/requests-responses/#1xx-information","text":"informational and rarely encountered used to inform the client of the status of the server 102 Processing tells the client to wait for the server to finish 100 Continue tells the client the server has received the request headers and is ready for the rest of the request body the last one is typically encountered when sending POST requests with a large data body","title":"1xx information"},{"location":"computer-science/HTTP/requests-responses/#2xx-success","text":"status codes of the 2xx format are success messages these are common codes including 200 OK 200 OK means the request was successful 201 Created means the request was successful and a new resource was create 204 No Content means the server processed the request but returned no content","title":"2xx success"},{"location":"computer-science/HTTP/requests-responses/#3xx-redirection","text":"indicates redirection the client is provided with a new URL to follow to get the requested resource 301 Moved Permanently which tells the client \"use this new URI for all future request\" 302 Found which technically means \"resource temporarily redirected to this other URI\", but is most often used to mean \"the response to this resource is actually found at this other URI\", which is the real job of 303 See Other 303 See Other ^ 307 Temporary redirect 308 Permanent redirect","title":"3xx redirection"},{"location":"computer-science/HTTP/requests-responses/#4xx-client-error","text":"signal client errors 400 Bad request = the request is either malformed or too large or something similar 401 Unauthorized = the client lacks proper authentication to access the resource 403 Forbidden = the request is refused by the server, typically because the client is not logged in or does not have the correct permissions 404 Not found = the resource doesn't exist 405 Method not allowed = means the HTTP verb / request method, such as \"POST\" was used on a resource that can only receive a certain method like GET","title":"4xx client error"},{"location":"computer-science/HTTP/requests-responses/#5xx-server-error","text":"signal server errors 500 internal server error, meaning something went wrong on the server 502 bad gateway, meaning the server acts as a literal gateway or proxy and received an invalid response from wherever it was trying to connect to 503 service unavailable, encountered when a server is overloaded, or temporarily unavailable or something else goes wrong","title":"5xx server error"},{"location":"creative/emojis/","text":"Emojis \u00b6 smileys \u00b6 \ud83d\ude00 \ud83d\ude03 \ud83d\ude04 \ud83d\ude01 \ud83d\ude06 \ud83d\ude05 \ud83d\ude02 \ud83e\udd23 \ud83e\udd72 \u263a\ufe0f \ud83d\ude0a \ud83d\ude07 \ud83d\ude42 \ud83d\ude43 \ud83d\ude09 \ud83d\ude0c \ud83d\ude0d \ud83e\udd70 \ud83d\ude18 \ud83d\ude17 \ud83d\ude19 \ud83d\ude1a \ud83d\ude0b \ud83d\ude1b \ud83d\ude1d \ud83d\ude1c \ud83e\udd2a \ud83e\udd28 \ud83e\uddd0 \ud83e\udd13 \ud83d\ude0e \ud83e\udd78 \ud83e\udd29 \ud83e\udd73 \ud83d\ude0f \ud83d\ude12 \ud83d\ude1e \ud83d\ude14 \ud83d\ude1f \ud83d\ude15 \ud83d\ude41 \u2639\ufe0f \ud83d\ude23 \ud83d\ude16 \ud83d\ude2b \ud83d\ude29 \ud83e\udd7a \ud83d\ude22 \ud83d\ude2d \ud83d\ude24 \ud83d\ude20 \ud83d\ude21 \ud83e\udd2c \ud83e\udd2f \ud83d\ude33 \ud83e\udd75 \ud83e\udd76 \ud83d\ude31 \ud83d\ude28 \ud83d\ude30 \ud83d\ude25 \ud83d\ude13 \ud83e\udd17 \ud83e\udd14 \ud83e\udd2d \ud83e\udd2b \ud83e\udd25 \ud83d\ude36 \ud83d\ude10 \ud83d\ude11 \ud83d\ude2c \ud83d\ude44 \ud83d\ude2f \ud83d\ude26 \ud83d\ude27 \ud83d\ude2e \ud83d\ude32 \ud83e\udd71 \ud83d\ude34 \ud83e\udd24 \ud83d\ude2a \ud83d\ude35 \ud83e\udd10 \ud83e\udd74 \ud83e\udd22 \ud83e\udd2e \ud83e\udd27 \ud83d\ude37 \ud83e\udd12 \ud83e\udd15 \ud83e\udd11 \ud83e\udd20 \ud83d\ude08 \ud83d\udc7f \ud83d\udc79 \ud83d\udc7a \ud83e\udd21 \ud83d\udca9 \ud83d\udc7b \ud83d\udc80 \u2620\ufe0f \ud83d\udc7d \ud83d\udc7e \ud83e\udd16 \ud83c\udf83 \ud83d\ude3a \ud83d\ude38 \ud83d\ude39 \ud83d\ude3b \ud83d\ude3c \ud83d\ude3d \ud83d\ude40 \ud83d\ude3f \ud83d\ude3e people and fantasy \u00b6 \ud83d\udc76 \ud83d\udc67 \ud83e\uddd2 \ud83d\udc66 \ud83d\udc69 \ud83e\uddd1 \ud83d\udc68 \ud83d\udc69\u200d\ud83e\uddb1 \ud83e\uddd1\u200d\ud83e\uddb1 \ud83d\udc68\u200d\ud83e\uddb1 \ud83d\udc69\u200d\ud83e\uddb0 \ud83e\uddd1\u200d\ud83e\uddb0 \ud83d\udc68\u200d\ud83e\uddb0 \ud83d\udc71\u200d\u2640\ufe0f \ud83d\udc71 \ud83d\udc71\u200d\u2642\ufe0f \ud83d\udc69\u200d\ud83e\uddb3 \ud83e\uddd1\u200d\ud83e\uddb3 \ud83d\udc68\u200d\ud83e\uddb3 \ud83d\udc69\u200d\ud83e\uddb2 \ud83e\uddd1\u200d\ud83e\uddb2 \ud83d\udc68\u200d\ud83e\uddb2 \ud83e\uddd4 \ud83d\udc75 \ud83e\uddd3 \ud83d\udc74 \ud83d\udc72 \ud83d\udc73\u200d\u2640\ufe0f \ud83d\udc73 \ud83d\udc73\u200d\u2642\ufe0f \ud83e\uddd5 \ud83d\udc6e\u200d\u2640\ufe0f \ud83d\udc6e \ud83d\udc6e\u200d\u2642\ufe0f \ud83d\udc77\u200d\u2640\ufe0f \ud83d\udc77 \ud83d\udc77\u200d\u2642\ufe0f \ud83d\udc82\u200d\u2640\ufe0f \ud83d\udc82 \ud83d\udc82\u200d\u2642\ufe0f \ud83d\udd75\ufe0f\u200d\u2640\ufe0f \ud83d\udd75\ufe0f \ud83d\udd75\ufe0f\u200d\u2642\ufe0f \ud83d\udc69\u200d\u2695\ufe0f \ud83e\uddd1\u200d\u2695\ufe0f \ud83d\udc68\u200d\u2695\ufe0f \ud83d\udc69\u200d\ud83c\udf3e \ud83e\uddd1\u200d\ud83c\udf3e \ud83d\udc68\u200d\ud83c\udf3e \ud83d\udc69\u200d\ud83c\udf73 \ud83e\uddd1\u200d\ud83c\udf73 \ud83d\udc68\u200d\ud83c\udf73 \ud83d\udc69\u200d\ud83c\udf93 \ud83e\uddd1\u200d\ud83c\udf93 \ud83d\udc68\u200d\ud83c\udf93 \ud83d\udc69\u200d\ud83c\udfa4 \ud83e\uddd1\u200d\ud83c\udfa4 \ud83d\udc68\u200d\ud83c\udfa4 \ud83d\udc69\u200d\ud83c\udfeb \ud83e\uddd1\u200d\ud83c\udfeb \ud83d\udc68\u200d\ud83c\udfeb \ud83d\udc69\u200d\ud83c\udfed \ud83e\uddd1\u200d\ud83c\udfed \ud83d\udc68\u200d\ud83c\udfed \ud83d\udc69\u200d\ud83d\udcbb \ud83e\uddd1\u200d\ud83d\udcbb \ud83d\udc68\u200d\ud83d\udcbb \ud83d\udc69\u200d\ud83d\udcbc \ud83e\uddd1\u200d\ud83d\udcbc \ud83d\udc68\u200d\ud83d\udcbc \ud83d\udc69\u200d\ud83d\udd27 \ud83e\uddd1\u200d\ud83d\udd27 \ud83d\udc68\u200d\ud83d\udd27 \ud83d\udc69\u200d\ud83d\udd2c \ud83e\uddd1\u200d\ud83d\udd2c \ud83d\udc68\u200d\ud83d\udd2c \ud83d\udc69\u200d\ud83c\udfa8 \ud83e\uddd1\u200d\ud83c\udfa8 \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udc69\u200d\ud83d\ude92 \ud83e\uddd1\u200d\ud83d\ude92 \ud83d\udc68\u200d\ud83d\ude92 \ud83d\udc69\u200d\u2708\ufe0f \ud83e\uddd1\u200d\u2708\ufe0f \ud83d\udc68\u200d\u2708\ufe0f \ud83d\udc69\u200d\ud83d\ude80 \ud83e\uddd1\u200d\ud83d\ude80 \ud83d\udc68\u200d\ud83d\ude80 \ud83d\udc69\u200d\u2696\ufe0f \ud83e\uddd1\u200d\u2696\ufe0f \ud83d\udc68\u200d\u2696\ufe0f \ud83d\udc70\u200d\u2640\ufe0f \ud83d\udc70 \ud83d\udc70\u200d\u2642\ufe0f \ud83e\udd35\u200d\u2640\ufe0f \ud83e\udd35 \ud83e\udd35\u200d\u2642\ufe0f \ud83d\udc78 \ud83e\udd34 \ud83e\udd77 \ud83e\uddb8\u200d\u2640\ufe0f \ud83e\uddb8 \ud83e\uddb8\u200d\u2642\ufe0f \ud83e\uddb9\u200d\u2640\ufe0f \ud83e\uddb9 \ud83e\uddb9\u200d\u2642\ufe0f \ud83e\udd36 \ud83e\uddd1\u200d\ud83c\udf84 \ud83c\udf85 \ud83e\uddd9\u200d\u2640\ufe0f \ud83e\uddd9 \ud83e\uddd9\u200d\u2642\ufe0f \ud83e\udddd\u200d\u2640\ufe0f \ud83e\udddd \ud83e\udddd\u200d\u2642\ufe0f \ud83e\udddb\u200d\u2640\ufe0f \ud83e\udddb \ud83e\udddb\u200d\u2642\ufe0f \ud83e\udddf\u200d\u2640\ufe0f \ud83e\udddf \ud83e\udddf\u200d\u2642\ufe0f \ud83e\uddde\u200d\u2640\ufe0f \ud83e\uddde \ud83e\uddde\u200d\u2642\ufe0f \ud83e\udddc\u200d\u2640\ufe0f \ud83e\udddc \ud83e\udddc\u200d\u2642\ufe0f \ud83e\uddda\u200d\u2640\ufe0f \ud83e\uddda \ud83e\uddda\u200d\u2642\ufe0f \ud83d\udc7c \ud83e\udd30 \ud83e\udd31 \ud83d\udc69\u200d\ud83c\udf7c \ud83e\uddd1\u200d\ud83c\udf7c \ud83d\udc68\u200d\ud83c\udf7c \ud83d\ude47\u200d\u2640\ufe0f \ud83d\ude47 \ud83d\ude47\u200d\u2642\ufe0f \ud83d\udc81\u200d\u2640\ufe0f \ud83d\udc81 \ud83d\udc81\u200d\u2642\ufe0f \ud83d\ude45\u200d\u2640\ufe0f \ud83d\ude45 \ud83d\ude45\u200d\u2642\ufe0f \ud83d\ude46\u200d\u2640\ufe0f \ud83d\ude46 \ud83d\ude46\u200d\u2642\ufe0f \ud83d\ude4b\u200d\u2640\ufe0f \ud83d\ude4b \ud83d\ude4b\u200d\u2642\ufe0f \ud83e\uddcf\u200d\u2640\ufe0f \ud83e\uddcf \ud83e\uddcf\u200d\u2642\ufe0f \ud83e\udd26\u200d\u2640\ufe0f \ud83e\udd26 \ud83e\udd26\u200d\u2642\ufe0f \ud83e\udd37\u200d\u2640\ufe0f \ud83e\udd37 \ud83e\udd37\u200d\u2642\ufe0f \ud83d\ude4e\u200d\u2640\ufe0f \ud83d\ude4e \ud83d\ude4e\u200d\u2642\ufe0f \ud83d\ude4d\u200d\u2640\ufe0f \ud83d\ude4d \ud83d\ude4d\u200d\u2642\ufe0f \ud83d\udc87\u200d\u2640\ufe0f \ud83d\udc87 \ud83d\udc87\u200d\u2642\ufe0f \ud83d\udc86\u200d\u2640\ufe0f \ud83d\udc86 \ud83d\udc86\u200d\u2642\ufe0f \ud83e\uddd6\u200d\u2640\ufe0f \ud83e\uddd6 \ud83e\uddd6\u200d\u2642\ufe0f \ud83d\udc85 \ud83e\udd33 \ud83d\udc83 \ud83d\udd7a \ud83d\udc6f\u200d\u2640\ufe0f \ud83d\udc6f \ud83d\udc6f\u200d\u2642\ufe0f \ud83d\udd74 \ud83d\udc69\u200d\ud83e\uddbd \ud83e\uddd1\u200d\ud83e\uddbd \ud83d\udc68\u200d\ud83e\uddbd \ud83d\udc69\u200d\ud83e\uddbc \ud83e\uddd1\u200d\ud83e\uddbc \ud83d\udc68\u200d\ud83e\uddbc \ud83d\udeb6\u200d\u2640\ufe0f \ud83d\udeb6 \ud83d\udeb6\u200d\u2642\ufe0f \ud83d\udc69\u200d\ud83e\uddaf \ud83e\uddd1\u200d\ud83e\uddaf \ud83d\udc68\u200d\ud83e\uddaf \ud83e\uddce\u200d\u2640\ufe0f \ud83e\uddce \ud83e\uddce\u200d\u2642\ufe0f \ud83c\udfc3\u200d\u2640\ufe0f \ud83c\udfc3 \ud83c\udfc3\u200d\u2642\ufe0f \ud83e\uddcd\u200d\u2640\ufe0f \ud83e\uddcd \ud83e\uddcd\u200d\u2642\ufe0f \ud83d\udc6d \ud83e\uddd1\u200d\ud83e\udd1d\u200d\ud83e\uddd1 \ud83d\udc6c \ud83d\udc6b \ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc69 \ud83d\udc91 \ud83d\udc68\u200d\u2764\ufe0f\u200d\ud83d\udc68 \ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc68 \ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69 \ud83d\udc8f \ud83d\udc68\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68 \ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68 \ud83d\udc6a \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc67 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc67 \ud83d\udc69\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc67 \ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67 \ud83d\udde3 \ud83d\udc64 \ud83d\udc65 \ud83e\udec2 clothing and accessories \u00b6 \ud83e\uddf3 \ud83c\udf02 \u2602\ufe0f \ud83e\uddf5 \ud83e\udea1 \ud83e\udea2 \ud83e\uddf6 \ud83d\udc53 \ud83d\udd76 \ud83e\udd7d \ud83e\udd7c \ud83e\uddba \ud83d\udc54 \ud83d\udc55 \ud83d\udc56 \ud83e\udde3 \ud83e\udde4 \ud83e\udde5 \ud83e\udde6 \ud83d\udc57 \ud83d\udc58 \ud83e\udd7b \ud83e\ude74 \ud83e\ude71 \ud83e\ude72 \ud83e\ude73 \ud83d\udc59 \ud83d\udc5a \ud83d\udc5b \ud83d\udc5c \ud83d\udc5d \ud83c\udf92 \ud83d\udc5e \ud83d\udc5f \ud83e\udd7e \ud83e\udd7f \ud83d\udc60 \ud83d\udc61 \ud83e\ude70 \ud83d\udc62 \ud83d\udc51 \ud83d\udc52 \ud83c\udfa9 \ud83c\udf93 \ud83e\udde2 \u26d1 \ud83e\ude96 \ud83d\udc84 \ud83d\udc8d \ud83d\udcbc gestures and body parts \u00b6 \ud83d\udc4b \ud83e\udd1a \u270b \ud83d\udd96 \ud83d\udc4c \ud83e\udd0c \ud83e\udd0f \u270c\ufe0f \ud83e\udd1e \ud83e\udd1f \ud83e\udd18 \ud83e\udd19 \ud83d\udc48 \ud83d\udc49 \ud83d\udc46 \ud83d\udd95 \ud83d\udc47 \u261d\ufe0f \ud83d\udc4d \ud83d\udc4e \u270a \ud83d\udc4a \ud83e\udd1b \ud83e\udd1c \ud83d\udc4f \ud83d\ude4c \ud83d\udc50 \ud83e\udd32 \ud83e\udd1d \ud83d\ude4f \u270d\ufe0f \ud83d\udc85 \ud83e\udd33 \ud83d\udcaa \ud83e\uddbe \ud83e\uddb5 \ud83e\uddbf \ud83e\uddb6 \ud83d\udc63 \ud83d\udc42 \ud83e\uddbb \ud83d\udc43 \ud83e\udec0 \ud83e\udec1 \ud83e\udde0 \ud83e\uddb7 \ud83e\uddb4 \ud83d\udc40 \ud83d\udc45 \ud83d\udc44 \ud83d\udc8b \ud83e\ude78 animals and nature \u00b6 \ud83d\udc36 \ud83d\udc31 \ud83d\udc2d \ud83d\udc39 \ud83d\udc30 \ud83e\udd8a \ud83d\udc3b \ud83d\udc3c \ud83d\udc3b \u2744\ufe0f \ud83d\udc28 \ud83d\udc2f \ud83e\udd81 \ud83d\udc2e \ud83d\udc37 \ud83d\udc3d \ud83d\udc38 \ud83d\udc35 \ud83d\ude48 \ud83d\ude49 \ud83d\ude4a \ud83d\udc12 \ud83d\udc14 \ud83d\udc27 \ud83d\udc26 \ud83d\udc24 \ud83d\udc23 \ud83d\udc25 \ud83e\udd86 \ud83e\udd85 \ud83e\udd89 \ud83e\udd87 \ud83d\udc3a \ud83d\udc17 \ud83d\udc34 \ud83e\udd84 \ud83d\udc1d \ud83e\udeb1 \ud83d\udc1b \ud83e\udd8b \ud83d\udc0c \ud83d\udc1e \ud83d\udc1c \ud83e\udeb0 \ud83e\udeb2 \ud83e\udeb3 \ud83e\udd9f \ud83e\udd97 \ud83e\udd82 \ud83d\udc22 \ud83d\udc0d \ud83e\udd8e \ud83e\udd96 \ud83e\udd95 \ud83d\udc19 \ud83e\udd91 \ud83e\udd90 \ud83e\udd9e \ud83e\udd80 \ud83d\udc21 \ud83d\udc20 \ud83d\udc1f \ud83d\udc2c \ud83d\udc33 \ud83d\udc0b \ud83e\udd88 \ud83d\udc0a \ud83d\udc05 \ud83d\udc06 \ud83e\udd93 \ud83e\udd8d \ud83e\udda7 \ud83e\udda3 \ud83d\udc18 \ud83e\udd9b \ud83e\udd8f \ud83d\udc2a \ud83d\udc2b \ud83e\udd92 \ud83e\udd98 \ud83e\uddac \ud83d\udc03 \ud83d\udc02 \ud83d\udc04 \ud83d\udc0e \ud83d\udc16 \ud83d\udc0f \ud83d\udc11 \ud83e\udd99 \ud83d\udc10 \ud83e\udd8c \ud83d\udc15 \ud83d\udc29 \ud83e\uddae \ud83d\udc15 \ud83e\uddba \ud83d\udc08 \ud83d\udc08 \ud83e\udeb6 \ud83d\udc13 \ud83e\udd83 \ud83e\udda4 \ud83e\udd9a \ud83e\udd9c \ud83e\udda2 \ud83e\udda9 \ud83d\udc07 \ud83e\udd9d \ud83e\udda8 \ud83e\udda1 \ud83e\uddab \ud83e\udda6 \ud83e\udda5 \ud83d\udc01 \ud83d\udc00 \ud83d\udc3f \ud83e\udd94 \ud83d\udc3e \ud83d\udc09 \ud83d\udc32 \ud83c\udf35 \ud83c\udf84 \ud83c\udf32 \ud83c\udf33 \ud83c\udf34 \ud83e\udeb5 \ud83c\udf31 \ud83c\udf3f \u2618\ufe0f \ud83c\udf40 \ud83c\udf8d \ud83e\udeb4 \ud83c\udf8b \ud83c\udf43 \ud83c\udf42 \ud83c\udf41 \ud83c\udf44 \ud83d\udc1a \ud83e\udea8 \ud83c\udf3e \ud83d\udc90 \ud83c\udf37 \ud83c\udf39 \ud83e\udd40 \ud83c\udf3a \ud83c\udf38 \ud83c\udf3c \ud83c\udf3b \ud83c\udf1e \ud83c\udf1d \ud83c\udf1b \ud83c\udf1c \ud83c\udf1a \ud83c\udf15 \ud83c\udf16 \ud83c\udf17 \ud83c\udf18 \ud83c\udf11 \ud83c\udf12 \ud83c\udf13 \ud83c\udf14 \ud83c\udf19 \ud83c\udf0e \ud83c\udf0d \ud83c\udf0f \ud83e\ude90 \ud83d\udcab \u2b50\ufe0f \ud83c\udf1f \u2728 \u26a1\ufe0f \u2604\ufe0f \ud83d\udca5 \ud83d\udd25 \ud83c\udf08 \u2600\ufe0f food and drink \u00b6 \ud83c\udf4f \ud83c\udf4e \ud83c\udf50 \ud83c\udf4a \ud83c\udf4b \ud83c\udf4c \ud83c\udf49 \ud83c\udf47 \ud83c\udf53 \ud83e\uded0 \ud83c\udf48 \ud83c\udf52 \ud83c\udf51 \ud83e\udd6d \ud83c\udf4d \ud83e\udd65 \ud83e\udd5d \ud83c\udf45 \ud83c\udf46 \ud83e\udd51 \ud83e\udd66 \ud83e\udd6c \ud83e\udd52 \ud83c\udf36 \ud83e\uded1 \ud83c\udf3d \ud83e\udd55 \ud83e\uded2 \ud83e\uddc4 \ud83e\uddc5 \ud83e\udd54 \ud83c\udf60 \ud83e\udd50 \ud83e\udd6f \ud83c\udf5e \ud83e\udd56 \ud83e\udd68 \ud83e\uddc0 \ud83e\udd5a \ud83c\udf73 \ud83e\uddc8 \ud83e\udd5e \ud83e\uddc7 \ud83e\udd53 \ud83e\udd69 \ud83c\udf57 \ud83c\udf56 \ud83e\uddb4 \ud83c\udf2d \ud83c\udf54 \ud83c\udf5f \ud83c\udf55 \ud83e\uded3 \ud83e\udd6a \ud83e\udd59 \ud83e\uddc6 \ud83c\udf2e \ud83c\udf2f \ud83e\uded4 \ud83e\udd57 \ud83e\udd58 \ud83e\uded5 \ud83e\udd6b \ud83c\udf5d \ud83c\udf5c \ud83c\udf72 \ud83c\udf5b \ud83c\udf63 \ud83c\udf71 \ud83e\udd5f \ud83e\uddaa \ud83c\udf64 \ud83c\udf59 \ud83c\udf5a \ud83c\udf58 \ud83c\udf65 \ud83e\udd60 \ud83e\udd6e \ud83c\udf62 \ud83c\udf61 \ud83c\udf67 \ud83c\udf68 \ud83c\udf66 \ud83e\udd67 \ud83e\uddc1 \ud83c\udf70 \ud83c\udf82 \ud83c\udf6e \ud83c\udf6d \ud83c\udf6c \ud83c\udf6b \ud83c\udf7f \ud83c\udf69 \ud83c\udf6a \ud83c\udf30 \ud83e\udd5c \ud83c\udf6f \ud83e\udd5b \ud83c\udf7c \ud83e\uded6 \u2615\ufe0f \ud83c\udf75 \ud83e\uddc3 \ud83e\udd64 \ud83e\uddcb \ud83c\udf76 \ud83c\udf7a \ud83c\udf7b \ud83e\udd42 \ud83c\udf77 \ud83e\udd43 \ud83c\udf78 \ud83c\udf79 \ud83e\uddc9 \ud83c\udf7e \ud83e\uddca \ud83e\udd44 \ud83c\udf74 \ud83c\udf7d \ud83e\udd63 \ud83e\udd61 \ud83e\udd62 \ud83e\uddc2 activity and sports \u00b6 \u26bd\ufe0f \ud83c\udfc0 \ud83c\udfc8 \u26be\ufe0f \ud83e\udd4e \ud83c\udfbe \ud83c\udfd0 \ud83c\udfc9 \ud83e\udd4f \ud83c\udfb1 \ud83e\ude80 \ud83c\udfd3 \ud83c\udff8 \ud83c\udfd2 \ud83c\udfd1 \ud83e\udd4d \ud83c\udfcf \ud83e\ude83 \ud83e\udd45 \u26f3\ufe0f \ud83e\ude81 \ud83c\udff9 \ud83c\udfa3 \ud83e\udd3f \ud83e\udd4a \ud83e\udd4b \ud83c\udfbd \ud83d\udef9 \ud83d\udefc \ud83d\udef7 \u26f8 \ud83e\udd4c \ud83c\udfbf \u26f7 \ud83c\udfc2 \ud83e\ude82 \ud83c\udfcb\ufe0f\u200d\u2640\ufe0f \ud83c\udfcb\ufe0f \ud83c\udfcb\ufe0f\u200d\u2642\ufe0f \ud83e\udd3c\u200d\u2640\ufe0f \ud83e\udd3c \ud83e\udd3c\u200d\u2642\ufe0f \ud83e\udd38\u200d\u2640\ufe0f \ud83e\udd38 \ud83e\udd38\u200d\u2642\ufe0f \u26f9\ufe0f\u200d\u2640\ufe0f \u26f9\ufe0f \u26f9\ufe0f\u200d\u2642\ufe0f \ud83e\udd3a \ud83e\udd3e\u200d\u2640\ufe0f \ud83e\udd3e \ud83e\udd3e\u200d\u2642\ufe0f \ud83c\udfcc\ufe0f\u200d\u2640\ufe0f \ud83c\udfcc\ufe0f \ud83c\udfcc\ufe0f\u200d\u2642\ufe0f \ud83c\udfc7 \ud83e\uddd8\u200d\u2640\ufe0f \ud83e\uddd8 \ud83e\uddd8\u200d\u2642\ufe0f \ud83c\udfc4\u200d\u2640\ufe0f \ud83c\udfc4 \ud83c\udfc4\u200d\u2642\ufe0f \ud83c\udfca\u200d\u2640\ufe0f \ud83c\udfca \ud83c\udfca\u200d\u2642\ufe0f \ud83e\udd3d\u200d\u2640\ufe0f \ud83e\udd3d \ud83e\udd3d\u200d\u2642\ufe0f \ud83d\udea3\u200d\u2640\ufe0f \ud83d\udea3 \ud83d\udea3\u200d\u2642\ufe0f \ud83e\uddd7\u200d\u2640\ufe0f \ud83e\uddd7 \ud83e\uddd7\u200d\u2642\ufe0f \ud83d\udeb5\u200d\u2640\ufe0f \ud83d\udeb5 \ud83d\udeb5\u200d\u2642\ufe0f \ud83d\udeb4\u200d\u2640\ufe0f \ud83d\udeb4 \ud83d\udeb4\u200d\u2642\ufe0f \ud83c\udfc6 \ud83e\udd47 \ud83e\udd48 \ud83e\udd49 \ud83c\udfc5 \ud83c\udf96 \ud83c\udff5 \ud83c\udf97 \ud83c\udfab \ud83c\udf9f \ud83c\udfaa \ud83e\udd39 \ud83e\udd39\u200d\u2642\ufe0f \ud83e\udd39\u200d\u2640\ufe0f \ud83c\udfad \ud83e\ude70 \ud83c\udfa8 \ud83c\udfac \ud83c\udfa4 \ud83c\udfa7 \ud83c\udfbc \ud83c\udfb9 \ud83e\udd41 \ud83e\ude98 \ud83c\udfb7 \ud83c\udfba \ud83e\ude97 \ud83c\udfb8 \ud83e\ude95 \ud83c\udfbb \ud83c\udfb2 \u265f \ud83c\udfaf \ud83c\udfb3 \ud83c\udfae \ud83c\udfb0 \ud83e\udde9 flags \u00b6 \ud83c\udff3\ufe0f \ud83c\udff4 \ud83c\udfc1 \ud83d\udea9 \ud83c\udff3\ufe0f\u200d\ud83c\udf08 \ud83c\udff3\ufe0f\u200d\u26a7\ufe0f \ud83c\udff4\u200d\u2620\ufe0f \ud83c\udde6\ud83c\uddeb \ud83c\udde6\ud83c\uddfd \ud83c\udde6\ud83c\uddf1 \ud83c\udde9\ud83c\uddff \ud83c\udde6\ud83c\uddf8 \ud83c\udde6\ud83c\udde9 \ud83c\udde6\ud83c\uddf4 \ud83c\udde6\ud83c\uddee \ud83c\udde6\ud83c\uddf6 \ud83c\udde6\ud83c\uddec \ud83c\udde6\ud83c\uddf7 \ud83c\udde6\ud83c\uddf2 \ud83c\udde6\ud83c\uddfc \ud83c\udde6\ud83c\uddfa \ud83c\udde6\ud83c\uddf9 \ud83c\udde6\ud83c\uddff \ud83c\udde7\ud83c\uddf8 \ud83c\udde7\ud83c\udded \ud83c\udde7\ud83c\udde9 \ud83c\udde7\ud83c\udde7 \ud83c\udde7\ud83c\uddfe \ud83c\udde7\ud83c\uddea \ud83c\udde7\ud83c\uddff \ud83c\udde7\ud83c\uddef \ud83c\udde7\ud83c\uddf2 \ud83c\udde7\ud83c\uddf9 \ud83c\udde7\ud83c\uddf4 \ud83c\udde7\ud83c\udde6 \ud83c\udde7\ud83c\uddfc \ud83c\udde7\ud83c\uddf7 \ud83c\uddee\ud83c\uddf4 \ud83c\uddfb\ud83c\uddec \ud83c\udde7\ud83c\uddf3 \ud83c\udde7\ud83c\uddec \ud83c\udde7\ud83c\uddeb \ud83c\udde7\ud83c\uddee \ud83c\uddf0\ud83c\udded \ud83c\udde8\ud83c\uddf2 \ud83c\udde8\ud83c\udde6 \ud83c\uddee\ud83c\udde8 \ud83c\udde8\ud83c\uddfb \ud83c\udde7\ud83c\uddf6 \ud83c\uddf0\ud83c\uddfe \ud83c\udde8\ud83c\uddeb \ud83c\uddf9\ud83c\udde9 \ud83c\udde8\ud83c\uddf1 \ud83c\udde8\ud83c\uddf3 \ud83c\udde8\ud83c\uddfd \ud83c\udde8\ud83c\udde8 \ud83c\udde8\ud83c\uddf4 \ud83c\uddf0\ud83c\uddf2 \ud83c\udde8\ud83c\uddec \ud83c\udde8\ud83c\udde9 \ud83c\udde8\ud83c\uddf0 \ud83c\udde8\ud83c\uddf7 \ud83c\udde8\ud83c\uddee \ud83c\udded\ud83c\uddf7 \ud83c\udde8\ud83c\uddfa \ud83c\udde8\ud83c\uddfc \ud83c\udde8\ud83c\uddfe \ud83c\udde8\ud83c\uddff \ud83c\udde9\ud83c\uddf0 \ud83c\udde9\ud83c\uddef \ud83c\udde9\ud83c\uddf2 \ud83c\udde9\ud83c\uddf4 \ud83c\uddea\ud83c\udde8 \ud83c\uddea\ud83c\uddec \ud83c\uddf8\ud83c\uddfb \ud83c\uddec\ud83c\uddf6 \ud83c\uddea\ud83c\uddf7 \ud83c\uddea\ud83c\uddea \ud83c\uddea\ud83c\uddf9 \ud83c\uddea\ud83c\uddfa \ud83c\uddeb\ud83c\uddf0 \ud83c\uddeb\ud83c\uddf4 \ud83c\uddeb\ud83c\uddef \ud83c\uddeb\ud83c\uddee \ud83c\uddeb\ud83c\uddf7 \ud83c\uddec\ud83c\uddeb \ud83c\uddf5\ud83c\uddeb \ud83c\uddf9\ud83c\uddeb \ud83c\uddec\ud83c\udde6 \ud83c\uddec\ud83c\uddf2 \ud83c\uddec\ud83c\uddea \ud83c\udde9\ud83c\uddea \ud83c\uddec\ud83c\udded \ud83c\uddec\ud83c\uddee \ud83c\uddec\ud83c\uddf7 \ud83c\uddec\ud83c\uddf1 \ud83c\uddec\ud83c\udde9 \ud83c\uddec\ud83c\uddf5 \ud83c\uddec\ud83c\uddfa \ud83c\uddec\ud83c\uddf9 \ud83c\uddec\ud83c\uddec \ud83c\uddec\ud83c\uddf3 \ud83c\uddec\ud83c\uddfc \ud83c\uddec\ud83c\uddfe \ud83c\udded\ud83c\uddf9 \ud83c\udded\ud83c\uddf3 \ud83c\udded\ud83c\uddf0 \ud83c\udded\ud83c\uddfa \ud83c\uddee\ud83c\uddf8 \ud83c\uddee\ud83c\uddf3 \ud83c\uddee\ud83c\udde9 \ud83c\uddee\ud83c\uddf7 \ud83c\uddee\ud83c\uddf6 \ud83c\uddee\ud83c\uddea \ud83c\uddee\ud83c\uddf2 \ud83c\uddee\ud83c\uddf1 \ud83c\uddee\ud83c\uddf9 \ud83c\uddef\ud83c\uddf2 \ud83c\uddef\ud83c\uddf5 \ud83c\udf8c \ud83c\uddef\ud83c\uddea \ud83c\uddef\ud83c\uddf4 \ud83c\uddf0\ud83c\uddff \ud83c\uddf0\ud83c\uddea \ud83c\uddf0\ud83c\uddee \ud83c\uddfd\ud83c\uddf0 \ud83c\uddf0\ud83c\uddfc \ud83c\uddf0\ud83c\uddec \ud83c\uddf1\ud83c\udde6 \ud83c\uddf1\ud83c\uddfb \ud83c\uddf1\ud83c\udde7 \ud83c\uddf1\ud83c\uddf8 \ud83c\uddf1\ud83c\uddf7 \ud83c\uddf1\ud83c\uddfe \ud83c\uddf1\ud83c\uddee \ud83c\uddf1\ud83c\uddf9 \ud83c\uddf1\ud83c\uddfa \ud83c\uddf2\ud83c\uddf4 \ud83c\uddf2\ud83c\uddf0 \ud83c\uddf2\ud83c\uddec \ud83c\uddf2\ud83c\uddfc \ud83c\uddf2\ud83c\uddfe \ud83c\uddf2\ud83c\uddfb \ud83c\uddf2\ud83c\uddf1 \ud83c\uddf2\ud83c\uddf9 \ud83c\uddf2\ud83c\udded \ud83c\uddf2\ud83c\uddf6 \ud83c\uddf2\ud83c\uddf7 \ud83c\uddf2\ud83c\uddfa \ud83c\uddfe\ud83c\uddf9 \ud83c\uddf2\ud83c\uddfd \ud83c\uddeb\ud83c\uddf2 \ud83c\uddf2\ud83c\udde9 \ud83c\uddf2\ud83c\udde8 \ud83c\uddf2\ud83c\uddf3 \ud83c\uddf2\ud83c\uddea \ud83c\uddf2\ud83c\uddf8 \ud83c\uddf2\ud83c\udde6 \ud83c\uddf2\ud83c\uddff \ud83c\uddf2\ud83c\uddf2 \ud83c\uddf3\ud83c\udde6 \ud83c\uddf3\ud83c\uddf7 \ud83c\uddf3\ud83c\uddf5 \ud83c\uddf3\ud83c\uddf1 \ud83c\uddf3\ud83c\udde8 \ud83c\uddf3\ud83c\uddff \ud83c\uddf3\ud83c\uddee \ud83c\uddf3\ud83c\uddea \ud83c\uddf3\ud83c\uddec \ud83c\uddf3\ud83c\uddfa \ud83c\uddf3\ud83c\uddeb \ud83c\uddf0\ud83c\uddf5 \ud83c\uddf2\ud83c\uddf5 \ud83c\uddf3\ud83c\uddf4 \ud83c\uddf4\ud83c\uddf2 \ud83c\uddf5\ud83c\uddf0 \ud83c\uddf5\ud83c\uddfc \ud83c\uddf5\ud83c\uddf8 \ud83c\uddf5\ud83c\udde6 \ud83c\uddf5\ud83c\uddec \ud83c\uddf5\ud83c\uddfe \ud83c\uddf5\ud83c\uddea \ud83c\uddf5\ud83c\udded \ud83c\uddf5\ud83c\uddf3 \ud83c\uddf5\ud83c\uddf1 \ud83c\uddf5\ud83c\uddf9 \ud83c\uddf5\ud83c\uddf7 \ud83c\uddf6\ud83c\udde6 \ud83c\uddf7\ud83c\uddea \ud83c\uddf7\ud83c\uddf4 \ud83c\uddf7\ud83c\uddfa \ud83c\uddf7\ud83c\uddfc \ud83c\uddfc\ud83c\uddf8 \ud83c\uddf8\ud83c\uddf2 \ud83c\uddf8\ud83c\udde6 \ud83c\uddf8\ud83c\uddf3 \ud83c\uddf7\ud83c\uddf8 \ud83c\uddf8\ud83c\udde8 \ud83c\uddf8\ud83c\uddf1 \ud83c\uddf8\ud83c\uddec \ud83c\uddf8\ud83c\uddfd \ud83c\uddf8\ud83c\uddf0 \ud83c\uddf8\ud83c\uddee \ud83c\uddec\ud83c\uddf8 \ud83c\uddf8\ud83c\udde7 \ud83c\uddf8\ud83c\uddf4 \ud83c\uddff\ud83c\udde6 \ud83c\uddf0\ud83c\uddf7 \ud83c\uddf8\ud83c\uddf8 \ud83c\uddea\ud83c\uddf8 \ud83c\uddf1\ud83c\uddf0 \ud83c\udde7\ud83c\uddf1 \ud83c\uddf8\ud83c\udded \ud83c\uddf0\ud83c\uddf3 \ud83c\uddf1\ud83c\udde8 \ud83c\uddf5\ud83c\uddf2 \ud83c\uddfb\ud83c\udde8 \ud83c\uddf8\ud83c\udde9 \ud83c\uddf8\ud83c\uddf7 \ud83c\uddf8\ud83c\uddff \ud83c\uddf8\ud83c\uddea \ud83c\udde8\ud83c\udded \ud83c\uddf8\ud83c\uddfe \ud83c\uddf9\ud83c\uddfc \ud83c\uddf9\ud83c\uddef \ud83c\uddf9\ud83c\uddff \ud83c\uddf9\ud83c\udded \ud83c\uddf9\ud83c\uddf1 \ud83c\uddf9\ud83c\uddec \ud83c\uddf9\ud83c\uddf0 \ud83c\uddf9\ud83c\uddf4 \ud83c\uddf9\ud83c\uddf9 \ud83c\uddf9\ud83c\uddf3 \ud83c\uddf9\ud83c\uddf7 \ud83c\uddf9\ud83c\uddf2 \ud83c\uddf9\ud83c\udde8 \ud83c\uddf9\ud83c\uddfb \ud83c\uddfb\ud83c\uddee \ud83c\uddfa\ud83c\uddec \ud83c\uddfa\ud83c\udde6 \ud83c\udde6\ud83c\uddea \ud83c\uddec\ud83c\udde7 \ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc65\udb40\udc6e\udb40\udc67\udb40\udc7f \ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc73\udb40\udc63\udb40\udc74\udb40\udc7f \ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc77\udb40\udc6c\udb40\udc73\udb40\udc7f \ud83c\uddfa\ud83c\uddf3 \ud83c\uddfa\ud83c\uddf8 \ud83c\uddfa\ud83c\uddfe \ud83c\uddfa\ud83c\uddff \ud83c\uddfb\ud83c\uddfa \ud83c\uddfb\ud83c\udde6 \ud83c\uddfb\ud83c\uddea \ud83c\uddfb\ud83c\uddf3 \ud83c\uddfc\ud83c\uddeb \ud83c\uddea\ud83c\udded \ud83c\uddfe\ud83c\uddea \ud83c\uddff\ud83c\uddf2 \ud83c\uddff\ud83c\uddfc newer emojis \u00b6 \ud83e\udd72 \ud83e\udd78 \ud83e\udd0c \ud83e\udd0c\ud83c\udffb \ud83e\udd0c\ud83c\udffc \ud83e\udd0c\ud83c\udffd \ud83e\udd0c\ud83c\udffe \ud83e\udd0c\ud83c\udfff \ud83e\udec0 \ud83e\udec1 \ud83e\udd77 \ud83e\udd35\u200d\u2640\ufe0f \ud83e\udd35\ud83c\udffb\u200d\u2640\ufe0f \ud83e\udd35\ud83c\udffc\u200d\u2640\ufe0f \ud83e\udd35\ud83c\udffd\u200d\u2640\ufe0f \ud83e\udd35\ud83c\udffe\u200d\u2640\ufe0f \ud83e\udd35\ud83c\udfff\u200d\u2640\ufe0f \ud83e\udd35\u200d\u2642\ufe0f \ud83e\udd35\ud83c\udffb\u200d\u2642\ufe0f \ud83e\udd35\ud83c\udffc\u200d\u2642\ufe0f \ud83e\udd35\ud83c\udffd\u200d\u2642\ufe0f \ud83e\udd35\ud83c\udffe\u200d\u2642\ufe0f \ud83e\udd35\ud83c\udfff\u200d\u2642\ufe0f \ud83d\udc70\u200d\u2640\ufe0f \ud83d\udc70\ud83c\udffb\u200d\u2640\ufe0f \ud83d\udc70\ud83c\udffc\u200d\u2640\ufe0f \ud83d\udc70\ud83c\udffd\u200d\u2640\ufe0f \ud83d\udc70\ud83c\udffe\u200d\u2640\ufe0f \ud83d\udc70\ud83c\udfff\u200d\u2640\ufe0f \ud83d\udc70\u200d\u2642\ufe0f \ud83d\udc70\ud83c\udffb\u200d\u2642\ufe0f \ud83d\udc70\ud83c\udffc\u200d\u2642\ufe0f \ud83d\udc70\ud83c\udffd\u200d\u2642\ufe0f \ud83d\udc70\ud83c\udffe\u200d\u2642\ufe0f \ud83d\udc70\ud83c\udfff\u200d\u2642\ufe0f \ud83d\udc69\u200d\ud83c\udf7c \ud83d\udc69\ud83c\udffb\u200d\ud83c\udf7c \ud83d\udc69\ud83c\udffc\u200d\ud83c\udf7c \ud83d\udc69\ud83c\udffd\u200d\ud83c\udf7c \ud83d\udc69\ud83c\udffe\u200d\ud83c\udf7c \ud83d\udc69\ud83c\udfff\u200d\ud83c\udf7c \ud83e\uddd1\u200d\ud83c\udf7c \ud83e\uddd1\ud83c\udffb\u200d\ud83c\udf7c \ud83e\uddd1\ud83c\udffc\u200d\ud83c\udf7c \ud83e\uddd1\ud83c\udffd\u200d\ud83c\udf7c \ud83e\uddd1\ud83c\udffe\u200d\ud83c\udf7c \ud83e\uddd1\ud83c\udfff\u200d\ud83c\udf7c \ud83d\udc68\u200d\ud83c\udf7c \ud83d\udc68\ud83c\udffb\u200d\ud83c\udf7c \ud83d\udc68\ud83c\udffc\u200d\ud83c\udf7c \ud83d\udc68\ud83c\udffd\u200d\ud83c\udf7c \ud83d\udc68\ud83c\udffe\u200d\ud83c\udf7c \ud83d\udc68\ud83c\udfff\u200d\ud83c\udf7c \ud83e\uddd1\u200d\ud83c\udf84 \ud83e\uddd1\ud83c\udffb\u200d\ud83c\udf84 \ud83e\uddd1\ud83c\udffc\u200d\ud83c\udf84 \ud83e\uddd1\ud83c\udffd\u200d\ud83c\udf84 \ud83e\uddd1\ud83c\udffe\u200d\ud83c\udf84 \ud83e\uddd1\ud83c\udfff\u200d\ud83c\udf84 \ud83e\udec2 \ud83d\udc08\u200d\u2b1b \ud83e\uddac \ud83e\udda3 \ud83e\uddab \ud83d\udc3b\u200d\u2744\ufe0f \ud83e\udda4 \ud83e\udeb6 \ud83e\uddad \ud83e\udeb2 \ud83e\udeb3 \ud83e\udeb0 \ud83e\udeb1 \ud83e\udeb4 \ud83e\uded0 \ud83e\uded2 \ud83e\uded1 \ud83e\uded3 \ud83e\uded4 \ud83e\uded5 \ud83e\uded6 \ud83e\uddcb \ud83e\udea8 \ud83e\udeb5 \ud83d\uded6 \ud83d\udefb \ud83d\udefc \ud83e\ude84 \ud83e\ude85 \ud83e\ude86 \ud83e\udea1 \ud83e\udea2 \ud83e\ude74 \ud83e\ude96 \ud83e\ude97 \ud83e\ude98 \ud83e\ude99 \ud83e\ude83 \ud83e\ude9a \ud83e\ude9b \ud83e\ude9d \ud83e\ude9c \ud83d\uded7 \ud83e\ude9e \ud83e\ude9f \ud83e\udea0 \ud83e\udea4 \ud83e\udea3 \ud83e\udea5 \ud83e\udea6 \ud83e\udea7 \ud83c\udff3\ufe0f\u200d\u26a7\ufe0f \ud83d\ude2e\u200d\ud83d\udca8 \ud83d\ude35\u200d\ud83d\udcab \ud83d\ude36\u200d\ud83c\udf2b\ufe0f \u2764\ufe0f\u200d\ud83d\udd25 \u2764\ufe0f\u200d\ud83e\ude79 \ud83e\uddd4\u200d\u2640\ufe0f \ud83e\uddd4\ud83c\udffb\u200d\u2640\ufe0f \ud83e\uddd4\ud83c\udffc\u200d\u2640\ufe0f \ud83e\uddd4\ud83c\udffd\u200d\u2640\ufe0f \ud83e\uddd4\ud83c\udffe\u200d\u2640\ufe0f \ud83e\uddd4\ud83c\udfff\u200d\u2640\ufe0f \ud83e\uddd4\u200d\u2642\ufe0f \ud83e\uddd4\ud83c\udffb\u200d\u2642\ufe0f \ud83e\uddd4\ud83c\udffc\u200d\u2642\ufe0f \ud83e\uddd4\ud83c\udffd\u200d\u2642\ufe0f \ud83e\uddd4\ud83c\udffe\u200d\u2642\ufe0f \ud83e\uddd4\ud83c\udfff\u200d\u2642\ufe0f \ud83d\udc91\ud83c\udffb \ud83d\udc91\ud83c\udffc \ud83d\udc91\ud83c\udffd \ud83d\udc91\ud83c\udffe \ud83d\udc91\ud83c\udfff \ud83d\udc8f\ud83c\udffb \ud83d\udc8f\ud83c\udffc \ud83d\udc8f\ud83c\udffd \ud83d\udc8f\ud83c\udffe \ud83d\udc8f\ud83c\udfff \ud83d\udc68\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc68\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc68\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc68\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc68\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc68\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc68\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc68\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc68\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc68\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc68\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc68\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc68\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc68\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc68\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc68\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc68\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc68\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc68\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc68\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc68\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc68\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc68\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc68\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc68\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffb \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffc \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffd \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffe \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udfff \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffb \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffc \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffd \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffe \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udfff \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffb \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffc \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffd \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffe \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udfff \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffb \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffc \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffd \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffe \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udfff \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffb \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffc \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffd \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffe \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udfff \ud83e\uddd1\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffc \ud83e\uddd1\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffd \ud83e\uddd1\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffe \ud83e\uddd1\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udfff \ud83e\uddd1\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffb \ud83e\uddd1\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffd \ud83e\uddd1\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffe \ud83e\uddd1\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udfff \ud83e\uddd1\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffb \ud83e\uddd1\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffc \ud83e\uddd1\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffe \ud83e\uddd1\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udfff \ud83e\uddd1\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffb \ud83e\uddd1\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffc \ud83e\uddd1\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffd \ud83e\uddd1\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udfff \ud83e\uddd1\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffb \ud83e\uddd1\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffc \ud83e\uddd1\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffd \ud83e\uddd1\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffe \ud83d\udc68\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc68\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc68\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc68\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc68\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc68\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc68\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc68\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc68\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc68\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc68\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc68\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc68\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc68\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc68\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc68\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc68\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc68\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc68\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc68\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc68\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc68\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc68\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc68\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc68\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffb \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffc \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffd \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffe \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udfff \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffb \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffc \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffd \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffe \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udfff \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffb \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffc \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffd \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffe \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udfff \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffb \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffc \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffd \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffe \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udfff \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffb \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffc \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffd \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffe \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udfff \ud83e\uddd1\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffc \ud83e\uddd1\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffd \ud83e\uddd1\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffe \ud83e\uddd1\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udfff \ud83e\uddd1\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffb \ud83e\uddd1\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffd \ud83e\uddd1\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffe \ud83e\uddd1\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udfff \ud83e\uddd1\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffb \ud83e\uddd1\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffc \ud83e\uddd1\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffe \ud83e\uddd1\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udfff \ud83e\uddd1\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffb \ud83e\uddd1\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffc \ud83e\uddd1\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffd \ud83e\uddd1\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udfff \ud83e\uddd1\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffb \ud83e\uddd1\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffc \ud83e\uddd1\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffd \ud83e\uddd1\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffe non-emoji symbols \u00b6 \u2722 \u2723 \u2724 \u2725 \u2726 \u2727 \u2605 \u2606 \u272f \u2721\ufe0e \u2729 \u272a \u272b \u272c \u272d \u272e \u2736 \u2737 \u2735 \u2738 \u2739 \u2192 \u21d2 \u27f9 \u21e8 \u21fe \u27be \u21e2 \u261b \u261e \u2794 \u279c \u2799 \u279b \u279d \u279e \u2660\ufe0e \u2663\ufe0e \u2665\ufe0e \u2666\ufe0e \u2664 \u2667 \u2661 \u2662 \u265a \u265b \u265c \u265d \u265e \u265f \u2654 \u2655 \u2656 \u2657 \u2658 \u2659 \u2680 \u2681 \u2682 \u2683 \u2684 \u2685 \ud83c\udca0 \u2688 \u2689 \u2686 \u2687 \ud80c\udc00 \ud80c\udc01 \ud80c\udc02 \ud80c\udc03 \ud80c\udc04 \ud80c\udc05 \ud80c\udc06 \ud80c\udc07 \ud80c\udc08 \ud80c\udc09 \ud80c\udc0a \ud80c\udc0b \ud80c\udc0c \ud80c\udc0d \ud80c\udc0e \ud80c\udc0f \ud80c\udc10 \ud80c\udc11 \ud80c\udc12 \ud80c\udc13 \ud80c\udc14 \ud80c\udc15 \ud80c\udc16 \ud80c\udc17 \ud80c\udc18 \ud80c\udc19 \ud80c\udc1a \ud80c\udc1b \ud80c\udc1c \ud80c\udc1d","title":"Emojis"},{"location":"creative/emojis/#emojis","text":"","title":"Emojis"},{"location":"creative/emojis/#smileys","text":"\ud83d\ude00 \ud83d\ude03 \ud83d\ude04 \ud83d\ude01 \ud83d\ude06 \ud83d\ude05 \ud83d\ude02 \ud83e\udd23 \ud83e\udd72 \u263a\ufe0f \ud83d\ude0a \ud83d\ude07 \ud83d\ude42 \ud83d\ude43 \ud83d\ude09 \ud83d\ude0c \ud83d\ude0d \ud83e\udd70 \ud83d\ude18 \ud83d\ude17 \ud83d\ude19 \ud83d\ude1a \ud83d\ude0b \ud83d\ude1b \ud83d\ude1d \ud83d\ude1c \ud83e\udd2a \ud83e\udd28 \ud83e\uddd0 \ud83e\udd13 \ud83d\ude0e \ud83e\udd78 \ud83e\udd29 \ud83e\udd73 \ud83d\ude0f \ud83d\ude12 \ud83d\ude1e \ud83d\ude14 \ud83d\ude1f \ud83d\ude15 \ud83d\ude41 \u2639\ufe0f \ud83d\ude23 \ud83d\ude16 \ud83d\ude2b \ud83d\ude29 \ud83e\udd7a \ud83d\ude22 \ud83d\ude2d \ud83d\ude24 \ud83d\ude20 \ud83d\ude21 \ud83e\udd2c \ud83e\udd2f \ud83d\ude33 \ud83e\udd75 \ud83e\udd76 \ud83d\ude31 \ud83d\ude28 \ud83d\ude30 \ud83d\ude25 \ud83d\ude13 \ud83e\udd17 \ud83e\udd14 \ud83e\udd2d \ud83e\udd2b \ud83e\udd25 \ud83d\ude36 \ud83d\ude10 \ud83d\ude11 \ud83d\ude2c \ud83d\ude44 \ud83d\ude2f \ud83d\ude26 \ud83d\ude27 \ud83d\ude2e \ud83d\ude32 \ud83e\udd71 \ud83d\ude34 \ud83e\udd24 \ud83d\ude2a \ud83d\ude35 \ud83e\udd10 \ud83e\udd74 \ud83e\udd22 \ud83e\udd2e \ud83e\udd27 \ud83d\ude37 \ud83e\udd12 \ud83e\udd15 \ud83e\udd11 \ud83e\udd20 \ud83d\ude08 \ud83d\udc7f \ud83d\udc79 \ud83d\udc7a \ud83e\udd21 \ud83d\udca9 \ud83d\udc7b \ud83d\udc80 \u2620\ufe0f \ud83d\udc7d \ud83d\udc7e \ud83e\udd16 \ud83c\udf83 \ud83d\ude3a \ud83d\ude38 \ud83d\ude39 \ud83d\ude3b \ud83d\ude3c \ud83d\ude3d \ud83d\ude40 \ud83d\ude3f \ud83d\ude3e","title":"smileys"},{"location":"creative/emojis/#people-and-fantasy","text":"\ud83d\udc76 \ud83d\udc67 \ud83e\uddd2 \ud83d\udc66 \ud83d\udc69 \ud83e\uddd1 \ud83d\udc68 \ud83d\udc69\u200d\ud83e\uddb1 \ud83e\uddd1\u200d\ud83e\uddb1 \ud83d\udc68\u200d\ud83e\uddb1 \ud83d\udc69\u200d\ud83e\uddb0 \ud83e\uddd1\u200d\ud83e\uddb0 \ud83d\udc68\u200d\ud83e\uddb0 \ud83d\udc71\u200d\u2640\ufe0f \ud83d\udc71 \ud83d\udc71\u200d\u2642\ufe0f \ud83d\udc69\u200d\ud83e\uddb3 \ud83e\uddd1\u200d\ud83e\uddb3 \ud83d\udc68\u200d\ud83e\uddb3 \ud83d\udc69\u200d\ud83e\uddb2 \ud83e\uddd1\u200d\ud83e\uddb2 \ud83d\udc68\u200d\ud83e\uddb2 \ud83e\uddd4 \ud83d\udc75 \ud83e\uddd3 \ud83d\udc74 \ud83d\udc72 \ud83d\udc73\u200d\u2640\ufe0f \ud83d\udc73 \ud83d\udc73\u200d\u2642\ufe0f \ud83e\uddd5 \ud83d\udc6e\u200d\u2640\ufe0f \ud83d\udc6e \ud83d\udc6e\u200d\u2642\ufe0f \ud83d\udc77\u200d\u2640\ufe0f \ud83d\udc77 \ud83d\udc77\u200d\u2642\ufe0f \ud83d\udc82\u200d\u2640\ufe0f \ud83d\udc82 \ud83d\udc82\u200d\u2642\ufe0f \ud83d\udd75\ufe0f\u200d\u2640\ufe0f \ud83d\udd75\ufe0f \ud83d\udd75\ufe0f\u200d\u2642\ufe0f \ud83d\udc69\u200d\u2695\ufe0f \ud83e\uddd1\u200d\u2695\ufe0f \ud83d\udc68\u200d\u2695\ufe0f \ud83d\udc69\u200d\ud83c\udf3e \ud83e\uddd1\u200d\ud83c\udf3e \ud83d\udc68\u200d\ud83c\udf3e \ud83d\udc69\u200d\ud83c\udf73 \ud83e\uddd1\u200d\ud83c\udf73 \ud83d\udc68\u200d\ud83c\udf73 \ud83d\udc69\u200d\ud83c\udf93 \ud83e\uddd1\u200d\ud83c\udf93 \ud83d\udc68\u200d\ud83c\udf93 \ud83d\udc69\u200d\ud83c\udfa4 \ud83e\uddd1\u200d\ud83c\udfa4 \ud83d\udc68\u200d\ud83c\udfa4 \ud83d\udc69\u200d\ud83c\udfeb \ud83e\uddd1\u200d\ud83c\udfeb \ud83d\udc68\u200d\ud83c\udfeb \ud83d\udc69\u200d\ud83c\udfed \ud83e\uddd1\u200d\ud83c\udfed \ud83d\udc68\u200d\ud83c\udfed \ud83d\udc69\u200d\ud83d\udcbb \ud83e\uddd1\u200d\ud83d\udcbb \ud83d\udc68\u200d\ud83d\udcbb \ud83d\udc69\u200d\ud83d\udcbc \ud83e\uddd1\u200d\ud83d\udcbc \ud83d\udc68\u200d\ud83d\udcbc \ud83d\udc69\u200d\ud83d\udd27 \ud83e\uddd1\u200d\ud83d\udd27 \ud83d\udc68\u200d\ud83d\udd27 \ud83d\udc69\u200d\ud83d\udd2c \ud83e\uddd1\u200d\ud83d\udd2c \ud83d\udc68\u200d\ud83d\udd2c \ud83d\udc69\u200d\ud83c\udfa8 \ud83e\uddd1\u200d\ud83c\udfa8 \ud83d\udc68\u200d\ud83c\udfa8 \ud83d\udc69\u200d\ud83d\ude92 \ud83e\uddd1\u200d\ud83d\ude92 \ud83d\udc68\u200d\ud83d\ude92 \ud83d\udc69\u200d\u2708\ufe0f \ud83e\uddd1\u200d\u2708\ufe0f \ud83d\udc68\u200d\u2708\ufe0f \ud83d\udc69\u200d\ud83d\ude80 \ud83e\uddd1\u200d\ud83d\ude80 \ud83d\udc68\u200d\ud83d\ude80 \ud83d\udc69\u200d\u2696\ufe0f \ud83e\uddd1\u200d\u2696\ufe0f \ud83d\udc68\u200d\u2696\ufe0f \ud83d\udc70\u200d\u2640\ufe0f \ud83d\udc70 \ud83d\udc70\u200d\u2642\ufe0f \ud83e\udd35\u200d\u2640\ufe0f \ud83e\udd35 \ud83e\udd35\u200d\u2642\ufe0f \ud83d\udc78 \ud83e\udd34 \ud83e\udd77 \ud83e\uddb8\u200d\u2640\ufe0f \ud83e\uddb8 \ud83e\uddb8\u200d\u2642\ufe0f \ud83e\uddb9\u200d\u2640\ufe0f \ud83e\uddb9 \ud83e\uddb9\u200d\u2642\ufe0f \ud83e\udd36 \ud83e\uddd1\u200d\ud83c\udf84 \ud83c\udf85 \ud83e\uddd9\u200d\u2640\ufe0f \ud83e\uddd9 \ud83e\uddd9\u200d\u2642\ufe0f \ud83e\udddd\u200d\u2640\ufe0f \ud83e\udddd \ud83e\udddd\u200d\u2642\ufe0f \ud83e\udddb\u200d\u2640\ufe0f \ud83e\udddb \ud83e\udddb\u200d\u2642\ufe0f \ud83e\udddf\u200d\u2640\ufe0f \ud83e\udddf \ud83e\udddf\u200d\u2642\ufe0f \ud83e\uddde\u200d\u2640\ufe0f \ud83e\uddde \ud83e\uddde\u200d\u2642\ufe0f \ud83e\udddc\u200d\u2640\ufe0f \ud83e\udddc \ud83e\udddc\u200d\u2642\ufe0f \ud83e\uddda\u200d\u2640\ufe0f \ud83e\uddda \ud83e\uddda\u200d\u2642\ufe0f \ud83d\udc7c \ud83e\udd30 \ud83e\udd31 \ud83d\udc69\u200d\ud83c\udf7c \ud83e\uddd1\u200d\ud83c\udf7c \ud83d\udc68\u200d\ud83c\udf7c \ud83d\ude47\u200d\u2640\ufe0f \ud83d\ude47 \ud83d\ude47\u200d\u2642\ufe0f \ud83d\udc81\u200d\u2640\ufe0f \ud83d\udc81 \ud83d\udc81\u200d\u2642\ufe0f \ud83d\ude45\u200d\u2640\ufe0f \ud83d\ude45 \ud83d\ude45\u200d\u2642\ufe0f \ud83d\ude46\u200d\u2640\ufe0f \ud83d\ude46 \ud83d\ude46\u200d\u2642\ufe0f \ud83d\ude4b\u200d\u2640\ufe0f \ud83d\ude4b \ud83d\ude4b\u200d\u2642\ufe0f \ud83e\uddcf\u200d\u2640\ufe0f \ud83e\uddcf \ud83e\uddcf\u200d\u2642\ufe0f \ud83e\udd26\u200d\u2640\ufe0f \ud83e\udd26 \ud83e\udd26\u200d\u2642\ufe0f \ud83e\udd37\u200d\u2640\ufe0f \ud83e\udd37 \ud83e\udd37\u200d\u2642\ufe0f \ud83d\ude4e\u200d\u2640\ufe0f \ud83d\ude4e \ud83d\ude4e\u200d\u2642\ufe0f \ud83d\ude4d\u200d\u2640\ufe0f \ud83d\ude4d \ud83d\ude4d\u200d\u2642\ufe0f \ud83d\udc87\u200d\u2640\ufe0f \ud83d\udc87 \ud83d\udc87\u200d\u2642\ufe0f \ud83d\udc86\u200d\u2640\ufe0f \ud83d\udc86 \ud83d\udc86\u200d\u2642\ufe0f \ud83e\uddd6\u200d\u2640\ufe0f \ud83e\uddd6 \ud83e\uddd6\u200d\u2642\ufe0f \ud83d\udc85 \ud83e\udd33 \ud83d\udc83 \ud83d\udd7a \ud83d\udc6f\u200d\u2640\ufe0f \ud83d\udc6f \ud83d\udc6f\u200d\u2642\ufe0f \ud83d\udd74 \ud83d\udc69\u200d\ud83e\uddbd \ud83e\uddd1\u200d\ud83e\uddbd \ud83d\udc68\u200d\ud83e\uddbd \ud83d\udc69\u200d\ud83e\uddbc \ud83e\uddd1\u200d\ud83e\uddbc \ud83d\udc68\u200d\ud83e\uddbc \ud83d\udeb6\u200d\u2640\ufe0f \ud83d\udeb6 \ud83d\udeb6\u200d\u2642\ufe0f \ud83d\udc69\u200d\ud83e\uddaf \ud83e\uddd1\u200d\ud83e\uddaf \ud83d\udc68\u200d\ud83e\uddaf \ud83e\uddce\u200d\u2640\ufe0f \ud83e\uddce \ud83e\uddce\u200d\u2642\ufe0f \ud83c\udfc3\u200d\u2640\ufe0f \ud83c\udfc3 \ud83c\udfc3\u200d\u2642\ufe0f \ud83e\uddcd\u200d\u2640\ufe0f \ud83e\uddcd \ud83e\uddcd\u200d\u2642\ufe0f \ud83d\udc6d \ud83e\uddd1\u200d\ud83e\udd1d\u200d\ud83e\uddd1 \ud83d\udc6c \ud83d\udc6b \ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc69 \ud83d\udc91 \ud83d\udc68\u200d\u2764\ufe0f\u200d\ud83d\udc68 \ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc68 \ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69 \ud83d\udc8f \ud83d\udc68\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68 \ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68 \ud83d\udc6a \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc67 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc67 \ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d\udc67 \ud83d\udc69\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc67 \ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66 \ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc67 \ud83d\udde3 \ud83d\udc64 \ud83d\udc65 \ud83e\udec2","title":"people and fantasy"},{"location":"creative/emojis/#clothing-and-accessories","text":"\ud83e\uddf3 \ud83c\udf02 \u2602\ufe0f \ud83e\uddf5 \ud83e\udea1 \ud83e\udea2 \ud83e\uddf6 \ud83d\udc53 \ud83d\udd76 \ud83e\udd7d \ud83e\udd7c \ud83e\uddba \ud83d\udc54 \ud83d\udc55 \ud83d\udc56 \ud83e\udde3 \ud83e\udde4 \ud83e\udde5 \ud83e\udde6 \ud83d\udc57 \ud83d\udc58 \ud83e\udd7b \ud83e\ude74 \ud83e\ude71 \ud83e\ude72 \ud83e\ude73 \ud83d\udc59 \ud83d\udc5a \ud83d\udc5b \ud83d\udc5c \ud83d\udc5d \ud83c\udf92 \ud83d\udc5e \ud83d\udc5f \ud83e\udd7e \ud83e\udd7f \ud83d\udc60 \ud83d\udc61 \ud83e\ude70 \ud83d\udc62 \ud83d\udc51 \ud83d\udc52 \ud83c\udfa9 \ud83c\udf93 \ud83e\udde2 \u26d1 \ud83e\ude96 \ud83d\udc84 \ud83d\udc8d \ud83d\udcbc","title":"clothing and accessories"},{"location":"creative/emojis/#gestures-and-body-parts","text":"\ud83d\udc4b \ud83e\udd1a \u270b \ud83d\udd96 \ud83d\udc4c \ud83e\udd0c \ud83e\udd0f \u270c\ufe0f \ud83e\udd1e \ud83e\udd1f \ud83e\udd18 \ud83e\udd19 \ud83d\udc48 \ud83d\udc49 \ud83d\udc46 \ud83d\udd95 \ud83d\udc47 \u261d\ufe0f \ud83d\udc4d \ud83d\udc4e \u270a \ud83d\udc4a \ud83e\udd1b \ud83e\udd1c \ud83d\udc4f \ud83d\ude4c \ud83d\udc50 \ud83e\udd32 \ud83e\udd1d \ud83d\ude4f \u270d\ufe0f \ud83d\udc85 \ud83e\udd33 \ud83d\udcaa \ud83e\uddbe \ud83e\uddb5 \ud83e\uddbf \ud83e\uddb6 \ud83d\udc63 \ud83d\udc42 \ud83e\uddbb \ud83d\udc43 \ud83e\udec0 \ud83e\udec1 \ud83e\udde0 \ud83e\uddb7 \ud83e\uddb4 \ud83d\udc40 \ud83d\udc45 \ud83d\udc44 \ud83d\udc8b \ud83e\ude78","title":"gestures and body parts"},{"location":"creative/emojis/#animals-and-nature","text":"\ud83d\udc36 \ud83d\udc31 \ud83d\udc2d \ud83d\udc39 \ud83d\udc30 \ud83e\udd8a \ud83d\udc3b \ud83d\udc3c \ud83d\udc3b \u2744\ufe0f \ud83d\udc28 \ud83d\udc2f \ud83e\udd81 \ud83d\udc2e \ud83d\udc37 \ud83d\udc3d \ud83d\udc38 \ud83d\udc35 \ud83d\ude48 \ud83d\ude49 \ud83d\ude4a \ud83d\udc12 \ud83d\udc14 \ud83d\udc27 \ud83d\udc26 \ud83d\udc24 \ud83d\udc23 \ud83d\udc25 \ud83e\udd86 \ud83e\udd85 \ud83e\udd89 \ud83e\udd87 \ud83d\udc3a \ud83d\udc17 \ud83d\udc34 \ud83e\udd84 \ud83d\udc1d \ud83e\udeb1 \ud83d\udc1b \ud83e\udd8b \ud83d\udc0c \ud83d\udc1e \ud83d\udc1c \ud83e\udeb0 \ud83e\udeb2 \ud83e\udeb3 \ud83e\udd9f \ud83e\udd97 \ud83e\udd82 \ud83d\udc22 \ud83d\udc0d \ud83e\udd8e \ud83e\udd96 \ud83e\udd95 \ud83d\udc19 \ud83e\udd91 \ud83e\udd90 \ud83e\udd9e \ud83e\udd80 \ud83d\udc21 \ud83d\udc20 \ud83d\udc1f \ud83d\udc2c \ud83d\udc33 \ud83d\udc0b \ud83e\udd88 \ud83d\udc0a \ud83d\udc05 \ud83d\udc06 \ud83e\udd93 \ud83e\udd8d \ud83e\udda7 \ud83e\udda3 \ud83d\udc18 \ud83e\udd9b \ud83e\udd8f \ud83d\udc2a \ud83d\udc2b \ud83e\udd92 \ud83e\udd98 \ud83e\uddac \ud83d\udc03 \ud83d\udc02 \ud83d\udc04 \ud83d\udc0e \ud83d\udc16 \ud83d\udc0f \ud83d\udc11 \ud83e\udd99 \ud83d\udc10 \ud83e\udd8c \ud83d\udc15 \ud83d\udc29 \ud83e\uddae \ud83d\udc15 \ud83e\uddba \ud83d\udc08 \ud83d\udc08 \ud83e\udeb6 \ud83d\udc13 \ud83e\udd83 \ud83e\udda4 \ud83e\udd9a \ud83e\udd9c \ud83e\udda2 \ud83e\udda9 \ud83d\udc07 \ud83e\udd9d \ud83e\udda8 \ud83e\udda1 \ud83e\uddab \ud83e\udda6 \ud83e\udda5 \ud83d\udc01 \ud83d\udc00 \ud83d\udc3f \ud83e\udd94 \ud83d\udc3e \ud83d\udc09 \ud83d\udc32 \ud83c\udf35 \ud83c\udf84 \ud83c\udf32 \ud83c\udf33 \ud83c\udf34 \ud83e\udeb5 \ud83c\udf31 \ud83c\udf3f \u2618\ufe0f \ud83c\udf40 \ud83c\udf8d \ud83e\udeb4 \ud83c\udf8b \ud83c\udf43 \ud83c\udf42 \ud83c\udf41 \ud83c\udf44 \ud83d\udc1a \ud83e\udea8 \ud83c\udf3e \ud83d\udc90 \ud83c\udf37 \ud83c\udf39 \ud83e\udd40 \ud83c\udf3a \ud83c\udf38 \ud83c\udf3c \ud83c\udf3b \ud83c\udf1e \ud83c\udf1d \ud83c\udf1b \ud83c\udf1c \ud83c\udf1a \ud83c\udf15 \ud83c\udf16 \ud83c\udf17 \ud83c\udf18 \ud83c\udf11 \ud83c\udf12 \ud83c\udf13 \ud83c\udf14 \ud83c\udf19 \ud83c\udf0e \ud83c\udf0d \ud83c\udf0f \ud83e\ude90 \ud83d\udcab \u2b50\ufe0f \ud83c\udf1f \u2728 \u26a1\ufe0f \u2604\ufe0f \ud83d\udca5 \ud83d\udd25 \ud83c\udf08 \u2600\ufe0f","title":"animals and nature"},{"location":"creative/emojis/#food-and-drink","text":"\ud83c\udf4f \ud83c\udf4e \ud83c\udf50 \ud83c\udf4a \ud83c\udf4b \ud83c\udf4c \ud83c\udf49 \ud83c\udf47 \ud83c\udf53 \ud83e\uded0 \ud83c\udf48 \ud83c\udf52 \ud83c\udf51 \ud83e\udd6d \ud83c\udf4d \ud83e\udd65 \ud83e\udd5d \ud83c\udf45 \ud83c\udf46 \ud83e\udd51 \ud83e\udd66 \ud83e\udd6c \ud83e\udd52 \ud83c\udf36 \ud83e\uded1 \ud83c\udf3d \ud83e\udd55 \ud83e\uded2 \ud83e\uddc4 \ud83e\uddc5 \ud83e\udd54 \ud83c\udf60 \ud83e\udd50 \ud83e\udd6f \ud83c\udf5e \ud83e\udd56 \ud83e\udd68 \ud83e\uddc0 \ud83e\udd5a \ud83c\udf73 \ud83e\uddc8 \ud83e\udd5e \ud83e\uddc7 \ud83e\udd53 \ud83e\udd69 \ud83c\udf57 \ud83c\udf56 \ud83e\uddb4 \ud83c\udf2d \ud83c\udf54 \ud83c\udf5f \ud83c\udf55 \ud83e\uded3 \ud83e\udd6a \ud83e\udd59 \ud83e\uddc6 \ud83c\udf2e \ud83c\udf2f \ud83e\uded4 \ud83e\udd57 \ud83e\udd58 \ud83e\uded5 \ud83e\udd6b \ud83c\udf5d \ud83c\udf5c \ud83c\udf72 \ud83c\udf5b \ud83c\udf63 \ud83c\udf71 \ud83e\udd5f \ud83e\uddaa \ud83c\udf64 \ud83c\udf59 \ud83c\udf5a \ud83c\udf58 \ud83c\udf65 \ud83e\udd60 \ud83e\udd6e \ud83c\udf62 \ud83c\udf61 \ud83c\udf67 \ud83c\udf68 \ud83c\udf66 \ud83e\udd67 \ud83e\uddc1 \ud83c\udf70 \ud83c\udf82 \ud83c\udf6e \ud83c\udf6d \ud83c\udf6c \ud83c\udf6b \ud83c\udf7f \ud83c\udf69 \ud83c\udf6a \ud83c\udf30 \ud83e\udd5c \ud83c\udf6f \ud83e\udd5b \ud83c\udf7c \ud83e\uded6 \u2615\ufe0f \ud83c\udf75 \ud83e\uddc3 \ud83e\udd64 \ud83e\uddcb \ud83c\udf76 \ud83c\udf7a \ud83c\udf7b \ud83e\udd42 \ud83c\udf77 \ud83e\udd43 \ud83c\udf78 \ud83c\udf79 \ud83e\uddc9 \ud83c\udf7e \ud83e\uddca \ud83e\udd44 \ud83c\udf74 \ud83c\udf7d \ud83e\udd63 \ud83e\udd61 \ud83e\udd62 \ud83e\uddc2","title":"food and drink"},{"location":"creative/emojis/#activity-and-sports","text":"\u26bd\ufe0f \ud83c\udfc0 \ud83c\udfc8 \u26be\ufe0f \ud83e\udd4e \ud83c\udfbe \ud83c\udfd0 \ud83c\udfc9 \ud83e\udd4f \ud83c\udfb1 \ud83e\ude80 \ud83c\udfd3 \ud83c\udff8 \ud83c\udfd2 \ud83c\udfd1 \ud83e\udd4d \ud83c\udfcf \ud83e\ude83 \ud83e\udd45 \u26f3\ufe0f \ud83e\ude81 \ud83c\udff9 \ud83c\udfa3 \ud83e\udd3f \ud83e\udd4a \ud83e\udd4b \ud83c\udfbd \ud83d\udef9 \ud83d\udefc \ud83d\udef7 \u26f8 \ud83e\udd4c \ud83c\udfbf \u26f7 \ud83c\udfc2 \ud83e\ude82 \ud83c\udfcb\ufe0f\u200d\u2640\ufe0f \ud83c\udfcb\ufe0f \ud83c\udfcb\ufe0f\u200d\u2642\ufe0f \ud83e\udd3c\u200d\u2640\ufe0f \ud83e\udd3c \ud83e\udd3c\u200d\u2642\ufe0f \ud83e\udd38\u200d\u2640\ufe0f \ud83e\udd38 \ud83e\udd38\u200d\u2642\ufe0f \u26f9\ufe0f\u200d\u2640\ufe0f \u26f9\ufe0f \u26f9\ufe0f\u200d\u2642\ufe0f \ud83e\udd3a \ud83e\udd3e\u200d\u2640\ufe0f \ud83e\udd3e \ud83e\udd3e\u200d\u2642\ufe0f \ud83c\udfcc\ufe0f\u200d\u2640\ufe0f \ud83c\udfcc\ufe0f \ud83c\udfcc\ufe0f\u200d\u2642\ufe0f \ud83c\udfc7 \ud83e\uddd8\u200d\u2640\ufe0f \ud83e\uddd8 \ud83e\uddd8\u200d\u2642\ufe0f \ud83c\udfc4\u200d\u2640\ufe0f \ud83c\udfc4 \ud83c\udfc4\u200d\u2642\ufe0f \ud83c\udfca\u200d\u2640\ufe0f \ud83c\udfca \ud83c\udfca\u200d\u2642\ufe0f \ud83e\udd3d\u200d\u2640\ufe0f \ud83e\udd3d \ud83e\udd3d\u200d\u2642\ufe0f \ud83d\udea3\u200d\u2640\ufe0f \ud83d\udea3 \ud83d\udea3\u200d\u2642\ufe0f \ud83e\uddd7\u200d\u2640\ufe0f \ud83e\uddd7 \ud83e\uddd7\u200d\u2642\ufe0f \ud83d\udeb5\u200d\u2640\ufe0f \ud83d\udeb5 \ud83d\udeb5\u200d\u2642\ufe0f \ud83d\udeb4\u200d\u2640\ufe0f \ud83d\udeb4 \ud83d\udeb4\u200d\u2642\ufe0f \ud83c\udfc6 \ud83e\udd47 \ud83e\udd48 \ud83e\udd49 \ud83c\udfc5 \ud83c\udf96 \ud83c\udff5 \ud83c\udf97 \ud83c\udfab \ud83c\udf9f \ud83c\udfaa \ud83e\udd39 \ud83e\udd39\u200d\u2642\ufe0f \ud83e\udd39\u200d\u2640\ufe0f \ud83c\udfad \ud83e\ude70 \ud83c\udfa8 \ud83c\udfac \ud83c\udfa4 \ud83c\udfa7 \ud83c\udfbc \ud83c\udfb9 \ud83e\udd41 \ud83e\ude98 \ud83c\udfb7 \ud83c\udfba \ud83e\ude97 \ud83c\udfb8 \ud83e\ude95 \ud83c\udfbb \ud83c\udfb2 \u265f \ud83c\udfaf \ud83c\udfb3 \ud83c\udfae \ud83c\udfb0 \ud83e\udde9","title":"activity and sports"},{"location":"creative/emojis/#flags","text":"\ud83c\udff3\ufe0f \ud83c\udff4 \ud83c\udfc1 \ud83d\udea9 \ud83c\udff3\ufe0f\u200d\ud83c\udf08 \ud83c\udff3\ufe0f\u200d\u26a7\ufe0f \ud83c\udff4\u200d\u2620\ufe0f \ud83c\udde6\ud83c\uddeb \ud83c\udde6\ud83c\uddfd \ud83c\udde6\ud83c\uddf1 \ud83c\udde9\ud83c\uddff \ud83c\udde6\ud83c\uddf8 \ud83c\udde6\ud83c\udde9 \ud83c\udde6\ud83c\uddf4 \ud83c\udde6\ud83c\uddee \ud83c\udde6\ud83c\uddf6 \ud83c\udde6\ud83c\uddec \ud83c\udde6\ud83c\uddf7 \ud83c\udde6\ud83c\uddf2 \ud83c\udde6\ud83c\uddfc \ud83c\udde6\ud83c\uddfa \ud83c\udde6\ud83c\uddf9 \ud83c\udde6\ud83c\uddff \ud83c\udde7\ud83c\uddf8 \ud83c\udde7\ud83c\udded \ud83c\udde7\ud83c\udde9 \ud83c\udde7\ud83c\udde7 \ud83c\udde7\ud83c\uddfe \ud83c\udde7\ud83c\uddea \ud83c\udde7\ud83c\uddff \ud83c\udde7\ud83c\uddef \ud83c\udde7\ud83c\uddf2 \ud83c\udde7\ud83c\uddf9 \ud83c\udde7\ud83c\uddf4 \ud83c\udde7\ud83c\udde6 \ud83c\udde7\ud83c\uddfc \ud83c\udde7\ud83c\uddf7 \ud83c\uddee\ud83c\uddf4 \ud83c\uddfb\ud83c\uddec \ud83c\udde7\ud83c\uddf3 \ud83c\udde7\ud83c\uddec \ud83c\udde7\ud83c\uddeb \ud83c\udde7\ud83c\uddee \ud83c\uddf0\ud83c\udded \ud83c\udde8\ud83c\uddf2 \ud83c\udde8\ud83c\udde6 \ud83c\uddee\ud83c\udde8 \ud83c\udde8\ud83c\uddfb \ud83c\udde7\ud83c\uddf6 \ud83c\uddf0\ud83c\uddfe \ud83c\udde8\ud83c\uddeb \ud83c\uddf9\ud83c\udde9 \ud83c\udde8\ud83c\uddf1 \ud83c\udde8\ud83c\uddf3 \ud83c\udde8\ud83c\uddfd \ud83c\udde8\ud83c\udde8 \ud83c\udde8\ud83c\uddf4 \ud83c\uddf0\ud83c\uddf2 \ud83c\udde8\ud83c\uddec \ud83c\udde8\ud83c\udde9 \ud83c\udde8\ud83c\uddf0 \ud83c\udde8\ud83c\uddf7 \ud83c\udde8\ud83c\uddee \ud83c\udded\ud83c\uddf7 \ud83c\udde8\ud83c\uddfa \ud83c\udde8\ud83c\uddfc \ud83c\udde8\ud83c\uddfe \ud83c\udde8\ud83c\uddff \ud83c\udde9\ud83c\uddf0 \ud83c\udde9\ud83c\uddef \ud83c\udde9\ud83c\uddf2 \ud83c\udde9\ud83c\uddf4 \ud83c\uddea\ud83c\udde8 \ud83c\uddea\ud83c\uddec \ud83c\uddf8\ud83c\uddfb \ud83c\uddec\ud83c\uddf6 \ud83c\uddea\ud83c\uddf7 \ud83c\uddea\ud83c\uddea \ud83c\uddea\ud83c\uddf9 \ud83c\uddea\ud83c\uddfa \ud83c\uddeb\ud83c\uddf0 \ud83c\uddeb\ud83c\uddf4 \ud83c\uddeb\ud83c\uddef \ud83c\uddeb\ud83c\uddee \ud83c\uddeb\ud83c\uddf7 \ud83c\uddec\ud83c\uddeb \ud83c\uddf5\ud83c\uddeb \ud83c\uddf9\ud83c\uddeb \ud83c\uddec\ud83c\udde6 \ud83c\uddec\ud83c\uddf2 \ud83c\uddec\ud83c\uddea \ud83c\udde9\ud83c\uddea \ud83c\uddec\ud83c\udded \ud83c\uddec\ud83c\uddee \ud83c\uddec\ud83c\uddf7 \ud83c\uddec\ud83c\uddf1 \ud83c\uddec\ud83c\udde9 \ud83c\uddec\ud83c\uddf5 \ud83c\uddec\ud83c\uddfa \ud83c\uddec\ud83c\uddf9 \ud83c\uddec\ud83c\uddec \ud83c\uddec\ud83c\uddf3 \ud83c\uddec\ud83c\uddfc \ud83c\uddec\ud83c\uddfe \ud83c\udded\ud83c\uddf9 \ud83c\udded\ud83c\uddf3 \ud83c\udded\ud83c\uddf0 \ud83c\udded\ud83c\uddfa \ud83c\uddee\ud83c\uddf8 \ud83c\uddee\ud83c\uddf3 \ud83c\uddee\ud83c\udde9 \ud83c\uddee\ud83c\uddf7 \ud83c\uddee\ud83c\uddf6 \ud83c\uddee\ud83c\uddea \ud83c\uddee\ud83c\uddf2 \ud83c\uddee\ud83c\uddf1 \ud83c\uddee\ud83c\uddf9 \ud83c\uddef\ud83c\uddf2 \ud83c\uddef\ud83c\uddf5 \ud83c\udf8c \ud83c\uddef\ud83c\uddea \ud83c\uddef\ud83c\uddf4 \ud83c\uddf0\ud83c\uddff \ud83c\uddf0\ud83c\uddea \ud83c\uddf0\ud83c\uddee \ud83c\uddfd\ud83c\uddf0 \ud83c\uddf0\ud83c\uddfc \ud83c\uddf0\ud83c\uddec \ud83c\uddf1\ud83c\udde6 \ud83c\uddf1\ud83c\uddfb \ud83c\uddf1\ud83c\udde7 \ud83c\uddf1\ud83c\uddf8 \ud83c\uddf1\ud83c\uddf7 \ud83c\uddf1\ud83c\uddfe \ud83c\uddf1\ud83c\uddee \ud83c\uddf1\ud83c\uddf9 \ud83c\uddf1\ud83c\uddfa \ud83c\uddf2\ud83c\uddf4 \ud83c\uddf2\ud83c\uddf0 \ud83c\uddf2\ud83c\uddec \ud83c\uddf2\ud83c\uddfc \ud83c\uddf2\ud83c\uddfe \ud83c\uddf2\ud83c\uddfb \ud83c\uddf2\ud83c\uddf1 \ud83c\uddf2\ud83c\uddf9 \ud83c\uddf2\ud83c\udded \ud83c\uddf2\ud83c\uddf6 \ud83c\uddf2\ud83c\uddf7 \ud83c\uddf2\ud83c\uddfa \ud83c\uddfe\ud83c\uddf9 \ud83c\uddf2\ud83c\uddfd \ud83c\uddeb\ud83c\uddf2 \ud83c\uddf2\ud83c\udde9 \ud83c\uddf2\ud83c\udde8 \ud83c\uddf2\ud83c\uddf3 \ud83c\uddf2\ud83c\uddea \ud83c\uddf2\ud83c\uddf8 \ud83c\uddf2\ud83c\udde6 \ud83c\uddf2\ud83c\uddff \ud83c\uddf2\ud83c\uddf2 \ud83c\uddf3\ud83c\udde6 \ud83c\uddf3\ud83c\uddf7 \ud83c\uddf3\ud83c\uddf5 \ud83c\uddf3\ud83c\uddf1 \ud83c\uddf3\ud83c\udde8 \ud83c\uddf3\ud83c\uddff \ud83c\uddf3\ud83c\uddee \ud83c\uddf3\ud83c\uddea \ud83c\uddf3\ud83c\uddec \ud83c\uddf3\ud83c\uddfa \ud83c\uddf3\ud83c\uddeb \ud83c\uddf0\ud83c\uddf5 \ud83c\uddf2\ud83c\uddf5 \ud83c\uddf3\ud83c\uddf4 \ud83c\uddf4\ud83c\uddf2 \ud83c\uddf5\ud83c\uddf0 \ud83c\uddf5\ud83c\uddfc \ud83c\uddf5\ud83c\uddf8 \ud83c\uddf5\ud83c\udde6 \ud83c\uddf5\ud83c\uddec \ud83c\uddf5\ud83c\uddfe \ud83c\uddf5\ud83c\uddea \ud83c\uddf5\ud83c\udded \ud83c\uddf5\ud83c\uddf3 \ud83c\uddf5\ud83c\uddf1 \ud83c\uddf5\ud83c\uddf9 \ud83c\uddf5\ud83c\uddf7 \ud83c\uddf6\ud83c\udde6 \ud83c\uddf7\ud83c\uddea \ud83c\uddf7\ud83c\uddf4 \ud83c\uddf7\ud83c\uddfa \ud83c\uddf7\ud83c\uddfc \ud83c\uddfc\ud83c\uddf8 \ud83c\uddf8\ud83c\uddf2 \ud83c\uddf8\ud83c\udde6 \ud83c\uddf8\ud83c\uddf3 \ud83c\uddf7\ud83c\uddf8 \ud83c\uddf8\ud83c\udde8 \ud83c\uddf8\ud83c\uddf1 \ud83c\uddf8\ud83c\uddec \ud83c\uddf8\ud83c\uddfd \ud83c\uddf8\ud83c\uddf0 \ud83c\uddf8\ud83c\uddee \ud83c\uddec\ud83c\uddf8 \ud83c\uddf8\ud83c\udde7 \ud83c\uddf8\ud83c\uddf4 \ud83c\uddff\ud83c\udde6 \ud83c\uddf0\ud83c\uddf7 \ud83c\uddf8\ud83c\uddf8 \ud83c\uddea\ud83c\uddf8 \ud83c\uddf1\ud83c\uddf0 \ud83c\udde7\ud83c\uddf1 \ud83c\uddf8\ud83c\udded \ud83c\uddf0\ud83c\uddf3 \ud83c\uddf1\ud83c\udde8 \ud83c\uddf5\ud83c\uddf2 \ud83c\uddfb\ud83c\udde8 \ud83c\uddf8\ud83c\udde9 \ud83c\uddf8\ud83c\uddf7 \ud83c\uddf8\ud83c\uddff \ud83c\uddf8\ud83c\uddea \ud83c\udde8\ud83c\udded \ud83c\uddf8\ud83c\uddfe \ud83c\uddf9\ud83c\uddfc \ud83c\uddf9\ud83c\uddef \ud83c\uddf9\ud83c\uddff \ud83c\uddf9\ud83c\udded \ud83c\uddf9\ud83c\uddf1 \ud83c\uddf9\ud83c\uddec \ud83c\uddf9\ud83c\uddf0 \ud83c\uddf9\ud83c\uddf4 \ud83c\uddf9\ud83c\uddf9 \ud83c\uddf9\ud83c\uddf3 \ud83c\uddf9\ud83c\uddf7 \ud83c\uddf9\ud83c\uddf2 \ud83c\uddf9\ud83c\udde8 \ud83c\uddf9\ud83c\uddfb \ud83c\uddfb\ud83c\uddee \ud83c\uddfa\ud83c\uddec \ud83c\uddfa\ud83c\udde6 \ud83c\udde6\ud83c\uddea \ud83c\uddec\ud83c\udde7 \ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc65\udb40\udc6e\udb40\udc67\udb40\udc7f \ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc73\udb40\udc63\udb40\udc74\udb40\udc7f \ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc77\udb40\udc6c\udb40\udc73\udb40\udc7f \ud83c\uddfa\ud83c\uddf3 \ud83c\uddfa\ud83c\uddf8 \ud83c\uddfa\ud83c\uddfe \ud83c\uddfa\ud83c\uddff \ud83c\uddfb\ud83c\uddfa \ud83c\uddfb\ud83c\udde6 \ud83c\uddfb\ud83c\uddea \ud83c\uddfb\ud83c\uddf3 \ud83c\uddfc\ud83c\uddeb \ud83c\uddea\ud83c\udded \ud83c\uddfe\ud83c\uddea \ud83c\uddff\ud83c\uddf2 \ud83c\uddff\ud83c\uddfc","title":"flags"},{"location":"creative/emojis/#newer-emojis","text":"\ud83e\udd72 \ud83e\udd78 \ud83e\udd0c \ud83e\udd0c\ud83c\udffb \ud83e\udd0c\ud83c\udffc \ud83e\udd0c\ud83c\udffd \ud83e\udd0c\ud83c\udffe \ud83e\udd0c\ud83c\udfff \ud83e\udec0 \ud83e\udec1 \ud83e\udd77 \ud83e\udd35\u200d\u2640\ufe0f \ud83e\udd35\ud83c\udffb\u200d\u2640\ufe0f \ud83e\udd35\ud83c\udffc\u200d\u2640\ufe0f \ud83e\udd35\ud83c\udffd\u200d\u2640\ufe0f \ud83e\udd35\ud83c\udffe\u200d\u2640\ufe0f \ud83e\udd35\ud83c\udfff\u200d\u2640\ufe0f \ud83e\udd35\u200d\u2642\ufe0f \ud83e\udd35\ud83c\udffb\u200d\u2642\ufe0f \ud83e\udd35\ud83c\udffc\u200d\u2642\ufe0f \ud83e\udd35\ud83c\udffd\u200d\u2642\ufe0f \ud83e\udd35\ud83c\udffe\u200d\u2642\ufe0f \ud83e\udd35\ud83c\udfff\u200d\u2642\ufe0f \ud83d\udc70\u200d\u2640\ufe0f \ud83d\udc70\ud83c\udffb\u200d\u2640\ufe0f \ud83d\udc70\ud83c\udffc\u200d\u2640\ufe0f \ud83d\udc70\ud83c\udffd\u200d\u2640\ufe0f \ud83d\udc70\ud83c\udffe\u200d\u2640\ufe0f \ud83d\udc70\ud83c\udfff\u200d\u2640\ufe0f \ud83d\udc70\u200d\u2642\ufe0f \ud83d\udc70\ud83c\udffb\u200d\u2642\ufe0f \ud83d\udc70\ud83c\udffc\u200d\u2642\ufe0f \ud83d\udc70\ud83c\udffd\u200d\u2642\ufe0f \ud83d\udc70\ud83c\udffe\u200d\u2642\ufe0f \ud83d\udc70\ud83c\udfff\u200d\u2642\ufe0f \ud83d\udc69\u200d\ud83c\udf7c \ud83d\udc69\ud83c\udffb\u200d\ud83c\udf7c \ud83d\udc69\ud83c\udffc\u200d\ud83c\udf7c \ud83d\udc69\ud83c\udffd\u200d\ud83c\udf7c \ud83d\udc69\ud83c\udffe\u200d\ud83c\udf7c \ud83d\udc69\ud83c\udfff\u200d\ud83c\udf7c \ud83e\uddd1\u200d\ud83c\udf7c \ud83e\uddd1\ud83c\udffb\u200d\ud83c\udf7c \ud83e\uddd1\ud83c\udffc\u200d\ud83c\udf7c \ud83e\uddd1\ud83c\udffd\u200d\ud83c\udf7c \ud83e\uddd1\ud83c\udffe\u200d\ud83c\udf7c \ud83e\uddd1\ud83c\udfff\u200d\ud83c\udf7c \ud83d\udc68\u200d\ud83c\udf7c \ud83d\udc68\ud83c\udffb\u200d\ud83c\udf7c \ud83d\udc68\ud83c\udffc\u200d\ud83c\udf7c \ud83d\udc68\ud83c\udffd\u200d\ud83c\udf7c \ud83d\udc68\ud83c\udffe\u200d\ud83c\udf7c \ud83d\udc68\ud83c\udfff\u200d\ud83c\udf7c \ud83e\uddd1\u200d\ud83c\udf84 \ud83e\uddd1\ud83c\udffb\u200d\ud83c\udf84 \ud83e\uddd1\ud83c\udffc\u200d\ud83c\udf84 \ud83e\uddd1\ud83c\udffd\u200d\ud83c\udf84 \ud83e\uddd1\ud83c\udffe\u200d\ud83c\udf84 \ud83e\uddd1\ud83c\udfff\u200d\ud83c\udf84 \ud83e\udec2 \ud83d\udc08\u200d\u2b1b \ud83e\uddac \ud83e\udda3 \ud83e\uddab \ud83d\udc3b\u200d\u2744\ufe0f \ud83e\udda4 \ud83e\udeb6 \ud83e\uddad \ud83e\udeb2 \ud83e\udeb3 \ud83e\udeb0 \ud83e\udeb1 \ud83e\udeb4 \ud83e\uded0 \ud83e\uded2 \ud83e\uded1 \ud83e\uded3 \ud83e\uded4 \ud83e\uded5 \ud83e\uded6 \ud83e\uddcb \ud83e\udea8 \ud83e\udeb5 \ud83d\uded6 \ud83d\udefb \ud83d\udefc \ud83e\ude84 \ud83e\ude85 \ud83e\ude86 \ud83e\udea1 \ud83e\udea2 \ud83e\ude74 \ud83e\ude96 \ud83e\ude97 \ud83e\ude98 \ud83e\ude99 \ud83e\ude83 \ud83e\ude9a \ud83e\ude9b \ud83e\ude9d \ud83e\ude9c \ud83d\uded7 \ud83e\ude9e \ud83e\ude9f \ud83e\udea0 \ud83e\udea4 \ud83e\udea3 \ud83e\udea5 \ud83e\udea6 \ud83e\udea7 \ud83c\udff3\ufe0f\u200d\u26a7\ufe0f \ud83d\ude2e\u200d\ud83d\udca8 \ud83d\ude35\u200d\ud83d\udcab \ud83d\ude36\u200d\ud83c\udf2b\ufe0f \u2764\ufe0f\u200d\ud83d\udd25 \u2764\ufe0f\u200d\ud83e\ude79 \ud83e\uddd4\u200d\u2640\ufe0f \ud83e\uddd4\ud83c\udffb\u200d\u2640\ufe0f \ud83e\uddd4\ud83c\udffc\u200d\u2640\ufe0f \ud83e\uddd4\ud83c\udffd\u200d\u2640\ufe0f \ud83e\uddd4\ud83c\udffe\u200d\u2640\ufe0f \ud83e\uddd4\ud83c\udfff\u200d\u2640\ufe0f \ud83e\uddd4\u200d\u2642\ufe0f \ud83e\uddd4\ud83c\udffb\u200d\u2642\ufe0f \ud83e\uddd4\ud83c\udffc\u200d\u2642\ufe0f \ud83e\uddd4\ud83c\udffd\u200d\u2642\ufe0f \ud83e\uddd4\ud83c\udffe\u200d\u2642\ufe0f \ud83e\uddd4\ud83c\udfff\u200d\u2642\ufe0f \ud83d\udc91\ud83c\udffb \ud83d\udc91\ud83c\udffc \ud83d\udc91\ud83c\udffd \ud83d\udc91\ud83c\udffe \ud83d\udc91\ud83c\udfff \ud83d\udc8f\ud83c\udffb \ud83d\udc8f\ud83c\udffc \ud83d\udc8f\ud83c\udffd \ud83d\udc8f\ud83c\udffe \ud83d\udc8f\ud83c\udfff \ud83d\udc68\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc68\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc68\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc68\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc68\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc68\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc68\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc68\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc68\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc68\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc68\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc68\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc68\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc68\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc68\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc68\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc68\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc68\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc68\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc68\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc68\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc68\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc68\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc68\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc68\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffb \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffc \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffd \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffe \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udfff \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffb \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffc \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffd \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffe \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udfff \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffb \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffc \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffd \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffe \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udfff \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffb \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffc \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffd \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffe \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udfff \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffb \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffc \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffd \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udffe \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c\udfff \ud83e\uddd1\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffc \ud83e\uddd1\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffd \ud83e\uddd1\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffe \ud83e\uddd1\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udfff \ud83e\uddd1\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffb \ud83e\uddd1\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffd \ud83e\uddd1\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffe \ud83e\uddd1\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udfff \ud83e\uddd1\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffb \ud83e\uddd1\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffc \ud83e\uddd1\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffe \ud83e\uddd1\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udfff \ud83e\uddd1\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffb \ud83e\uddd1\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffc \ud83e\uddd1\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffd \ud83e\uddd1\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udfff \ud83e\uddd1\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffb \ud83e\uddd1\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffc \ud83e\uddd1\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffd \ud83e\uddd1\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c\udffe \ud83d\udc68\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc68\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc68\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc68\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc68\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc68\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc68\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc68\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc68\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc68\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc68\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc68\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc68\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc68\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc68\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc68\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc68\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc68\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc68\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc68\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc68\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc68\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc68\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc68\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc68\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffb \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffc \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffd \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffe \ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udfff \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffb \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffc \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffd \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffe \ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udfff \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffb \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffc \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffd \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffe \ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udfff \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffb \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffc \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffd \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffe \ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udfff \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffb \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffc \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffd \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udffe \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c\udfff \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffb \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffc \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffd \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udffe \ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c\udfff \ud83e\uddd1\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffc \ud83e\uddd1\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffd \ud83e\uddd1\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffe \ud83e\uddd1\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udfff \ud83e\uddd1\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffb \ud83e\uddd1\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffd \ud83e\uddd1\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffe \ud83e\uddd1\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udfff \ud83e\uddd1\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffb \ud83e\uddd1\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffc \ud83e\uddd1\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffe \ud83e\uddd1\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udfff \ud83e\uddd1\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffb \ud83e\uddd1\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffc \ud83e\uddd1\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffd \ud83e\uddd1\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udfff \ud83e\uddd1\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffb \ud83e\uddd1\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffc \ud83e\uddd1\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffd \ud83e\uddd1\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c\udffe","title":"newer emojis"},{"location":"creative/emojis/#non-emoji-symbols","text":"\u2722 \u2723 \u2724 \u2725 \u2726 \u2727 \u2605 \u2606 \u272f \u2721\ufe0e \u2729 \u272a \u272b \u272c \u272d \u272e \u2736 \u2737 \u2735 \u2738 \u2739 \u2192 \u21d2 \u27f9 \u21e8 \u21fe \u27be \u21e2 \u261b \u261e \u2794 \u279c \u2799 \u279b \u279d \u279e \u2660\ufe0e \u2663\ufe0e \u2665\ufe0e \u2666\ufe0e \u2664 \u2667 \u2661 \u2662 \u265a \u265b \u265c \u265d \u265e \u265f \u2654 \u2655 \u2656 \u2657 \u2658 \u2659 \u2680 \u2681 \u2682 \u2683 \u2684 \u2685 \ud83c\udca0 \u2688 \u2689 \u2686 \u2687 \ud80c\udc00 \ud80c\udc01 \ud80c\udc02 \ud80c\udc03 \ud80c\udc04 \ud80c\udc05 \ud80c\udc06 \ud80c\udc07 \ud80c\udc08 \ud80c\udc09 \ud80c\udc0a \ud80c\udc0b \ud80c\udc0c \ud80c\udc0d \ud80c\udc0e \ud80c\udc0f \ud80c\udc10 \ud80c\udc11 \ud80c\udc12 \ud80c\udc13 \ud80c\udc14 \ud80c\udc15 \ud80c\udc16 \ud80c\udc17 \ud80c\udc18 \ud80c\udc19 \ud80c\udc1a \ud80c\udc1b \ud80c\udc1c \ud80c\udc1d","title":"non-emoji symbols"},{"location":"creative/seo-fundamentals/","text":"SEO Fundamentals \u00b6 overview of SEO \u00b6 what is SEO? \u00b6 the process of making improvements on and off your website in order to gain more exposure in search engine results more exposure in SEO will lead to more visitors finding you for the right reasons SEs try to find and understand all the content out there on the internet quickly deliver relevant and authoritative results based on any phrase the user might be searching for when user searches for California Hotels, SE wants to show list of results relevant to the topic of Cali hotels SE analyze all pages ever visited and pick out pages they believe are most relevant relevance is determined by things such as how your content is written and implemented in code, as well as how other websites around the internet are linking to you all of this is stuffed into a very complex and very proprietary index. uses complex algorithms to rank and display all of those webpages in order of relevance to that phrase that the user just typed in, such as Cali Hotels SE makes clear distinctions between content that is for Cali Hotels and content that is for Cali Resorts SE understand quite a bit about semantic and thematic connections between words and concepts SE knows that the search dog crates is relevant to a site selling pet carriers SE also takes authority very seriously, is your website a trusted place that the Engine wants to show their users? one way SE determine how safe you are is evaluating how many websites link to you this is measure by links and sentiment (product reviews and such) links are like a vote on the internet, links from more trusted sites are valued more fake links are very bad for SEO reading search engine results pages (SERP) \u00b6 paid listings are actual advertisements a typical SERP will have 10 organic results that link out to different webpages sometimes referred to as the 10 blue links, each include at least a headline, description, and visible URL also return things like videos and maps, we now have blended results setting SEO expectations \u00b6 SEO is a bit different from other marketing strategies patience is a virtue, especially with SEO approach SEO as a long term process that builds long term value there is a reason the \"rank #1 in google scams\" are called scams (they are scams) it takes time to: develop and execute on your strategy research your keywords and understand their intent create valuable and useful content attract relevant links and authority signals resolve any technical issues with your site never ending process, always work to be done SE algos frequently change and your SEO work needs to keep up with them how SEO affects your business \u00b6 intent = motivation behind a search what people search for and the words they choose when making their query says a lot about their intent, or what actions they want to take at a specific moment in time one of the biggest benefits of SEO is the ability to actually measure your results you can use your website analytics data to find out exactly how successful you are in acquiring search engine users you can see if those users actions are inline with your business goals you can evaluate the effectiveness of your content in attracting and advancing the user through your sales flow you can measure what they do and do not do on your website and beyond by attaching real dollars and cents to users actions that began with a simple search, you will be able to truly measure return on investment from your SEO channel why you need a keyword-research plan \u00b6 before you optimize your website you need to know what your are optimizing for keywords = search terms that people enter into search engines formal keyword research is the foundational piece in SEO, that will help you understand what people are typing in the search engines keyword research: the intent of those keywords frequency relevance to business objectives how competitive the terms will be to try to rank for (car would be a highly competitive and not the best choice) how to research keywords \u00b6 tools to help you analyze keywords \u00b6 understanding keyword attributes \u00b6 understanding keyword distribution \u00b6 ongoing keyword evaluation \u00b6 keywords: foundation of SEO \u00b6 content optimization \u00b6 how search engines and people view web pages technical SEO \u00b6 long-term content planning \u00b6 link-building strategies \u00b6 measuring SEO effectiveness \u00b6 ecommerce \u00b6 local and mobile SEO considerations","title":"SEO Fundamentals"},{"location":"creative/seo-fundamentals/#seo-fundamentals","text":"","title":"SEO Fundamentals"},{"location":"creative/seo-fundamentals/#overview-of-seo","text":"","title":"overview of SEO"},{"location":"creative/seo-fundamentals/#what-is-seo","text":"the process of making improvements on and off your website in order to gain more exposure in search engine results more exposure in SEO will lead to more visitors finding you for the right reasons SEs try to find and understand all the content out there on the internet quickly deliver relevant and authoritative results based on any phrase the user might be searching for when user searches for California Hotels, SE wants to show list of results relevant to the topic of Cali hotels SE analyze all pages ever visited and pick out pages they believe are most relevant relevance is determined by things such as how your content is written and implemented in code, as well as how other websites around the internet are linking to you all of this is stuffed into a very complex and very proprietary index. uses complex algorithms to rank and display all of those webpages in order of relevance to that phrase that the user just typed in, such as Cali Hotels SE makes clear distinctions between content that is for Cali Hotels and content that is for Cali Resorts SE understand quite a bit about semantic and thematic connections between words and concepts SE knows that the search dog crates is relevant to a site selling pet carriers SE also takes authority very seriously, is your website a trusted place that the Engine wants to show their users? one way SE determine how safe you are is evaluating how many websites link to you this is measure by links and sentiment (product reviews and such) links are like a vote on the internet, links from more trusted sites are valued more fake links are very bad for SEO","title":"what is SEO?"},{"location":"creative/seo-fundamentals/#reading-search-engine-results-pages-serp","text":"paid listings are actual advertisements a typical SERP will have 10 organic results that link out to different webpages sometimes referred to as the 10 blue links, each include at least a headline, description, and visible URL also return things like videos and maps, we now have blended results","title":"reading search engine results pages (SERP)"},{"location":"creative/seo-fundamentals/#setting-seo-expectations","text":"SEO is a bit different from other marketing strategies patience is a virtue, especially with SEO approach SEO as a long term process that builds long term value there is a reason the \"rank #1 in google scams\" are called scams (they are scams) it takes time to: develop and execute on your strategy research your keywords and understand their intent create valuable and useful content attract relevant links and authority signals resolve any technical issues with your site never ending process, always work to be done SE algos frequently change and your SEO work needs to keep up with them","title":"setting SEO expectations"},{"location":"creative/seo-fundamentals/#how-seo-affects-your-business","text":"intent = motivation behind a search what people search for and the words they choose when making their query says a lot about their intent, or what actions they want to take at a specific moment in time one of the biggest benefits of SEO is the ability to actually measure your results you can use your website analytics data to find out exactly how successful you are in acquiring search engine users you can see if those users actions are inline with your business goals you can evaluate the effectiveness of your content in attracting and advancing the user through your sales flow you can measure what they do and do not do on your website and beyond by attaching real dollars and cents to users actions that began with a simple search, you will be able to truly measure return on investment from your SEO channel","title":"how SEO affects your business"},{"location":"creative/seo-fundamentals/#why-you-need-a-keyword-research-plan","text":"before you optimize your website you need to know what your are optimizing for keywords = search terms that people enter into search engines formal keyword research is the foundational piece in SEO, that will help you understand what people are typing in the search engines keyword research: the intent of those keywords frequency relevance to business objectives how competitive the terms will be to try to rank for (car would be a highly competitive and not the best choice)","title":"why you need a keyword-research plan"},{"location":"creative/seo-fundamentals/#how-to-research-keywords","text":"","title":"how to research keywords"},{"location":"creative/seo-fundamentals/#tools-to-help-you-analyze-keywords","text":"","title":"tools to help you analyze keywords"},{"location":"creative/seo-fundamentals/#understanding-keyword-attributes","text":"","title":"understanding keyword attributes"},{"location":"creative/seo-fundamentals/#understanding-keyword-distribution","text":"","title":"understanding keyword distribution"},{"location":"creative/seo-fundamentals/#ongoing-keyword-evaluation","text":"","title":"ongoing keyword evaluation"},{"location":"creative/seo-fundamentals/#keywords-foundation-of-seo","text":"","title":"keywords: foundation of SEO"},{"location":"creative/seo-fundamentals/#content-optimization","text":"how search engines and people view web pages","title":"content optimization"},{"location":"creative/seo-fundamentals/#technical-seo","text":"","title":"technical SEO"},{"location":"creative/seo-fundamentals/#long-term-content-planning","text":"","title":"long-term content planning"},{"location":"creative/seo-fundamentals/#link-building-strategies","text":"","title":"link-building strategies"},{"location":"creative/seo-fundamentals/#measuring-seo-effectiveness","text":"","title":"measuring SEO effectiveness"},{"location":"creative/seo-fundamentals/#ecommerce","text":"local and mobile SEO considerations","title":"ecommerce"},{"location":"creative/writing-blogs/","text":"Blog Tips \u00b6 must serve the readers using list formatted paragraphs are a good choice, makes it scan-able and more digestible for readers, and easier to write for the author use numbered paragraphs or bullet points depending on the topic can use subheads to break up post blogging best practices \u00b6 have integrity maintain high standards with what you publish keep truth and accuracy get your facts straight verify information take responsibility for mistakes keep fairness give credit where it's due and cite sources of information consider the long term impacts of anyone who may be affected by your posts be a truthful, fair and authentic writer CTA, calls to action \u00b6 in the art of conversation, you cannot just talk about yourself blog posts are no different even though your end of the conversation may go on longer offer points of engagement for readers, (CTA) a CTA is u an invitation for your readers to do something a CTA could be a link to another site to do something, a pitch to buy your product, as to follow you on social media, request for them to donate to a charity blogs with CTA have much higher engagement rates than blogs without CTAs are usually best put at the end of a post, asking readers an ending question is also a good way to produce engagement reasons people read a blog \u00b6 it offers something we want or need at that moment it is useful to us in someway informative and helpful educational challenges you not reasons people read a blog \u00b6 they don't read because the writer love to hear themselves talk it's a self-serving rant it's a diary not because it's some meta gazing view on a topic blog voice \u00b6 strive to have a unique voice its not just what you say but how you say it \"voice is the distinct personality, style, or point of view of a piece or writing\" conviction is contagious writing passionate posts \u00b6 write passionate posts, but do not rant choose a clear point develop a well organized argument how to develop your voice \u00b6 read other blogs and see what you like and what works well for other writers experiment with different styles to see what fits you ask yourself \u00b6 what would audience find useful how can I help readers - achieve a common goal - understand a complex issue - soothe a worry - teach them to feel better about themselves - teach them something to improve their lives in someway - laugh how to optimize blog \u00b6 become a search engine optimization expert (seo) practice writing attention grabbing headlines learn to write quickly and efficiently use today's news to help direct readers attention to posts, stay current and fresh post predictably and consistently post as often as you can commit to posting compelling content on a regular basis write down ideas in notes as potential future posts use eye catching pictures and videos to keep readers attention on the post one study shows one picture for every 350 words be knowledgable \u00b6 everyone is a relative expert in something random politics, cooking, areas of well-being how-tos, easy to follow numbered lists are good ways of presenting knowledge a good idea to show readers how or why you are an expert on a subject a tagline at end of post is a good place to put description of self and qualifications or experience explain complex words in a simple way ensure accuracy on posts, even on the smallest details double check facts and site articles and sources when needed stick to a clear and concise point in your blog post how to stay focused on topic \u00b6 write headline first use a list of bullet points don't just blurt stream of conscience onto page length of blog post \u00b6 as long as it needs to be to make your argument / point word count should be determined on what you have to say word count also depends on how clearly and concisely you can say it the average person reads between 150 - 300 words per minute people spend 3-5 minutes reading a post 450 - 1,500 words per post shorter posts of around 300 generate more comments longer posts of 1,000 - 1,500 get more media shares longer posts up to 2,500 get better search rankings google search engine favors a low bounce rate, meaning readers stay on your page longer dealing with criticism \u00b6 remember it takes courage to write a blog monitor and learn from comments do not engage with trolls recognize the privilege of having a blog","title":"Writing Blogs"},{"location":"creative/writing-blogs/#blog-tips","text":"must serve the readers using list formatted paragraphs are a good choice, makes it scan-able and more digestible for readers, and easier to write for the author use numbered paragraphs or bullet points depending on the topic can use subheads to break up post","title":"Blog Tips"},{"location":"creative/writing-blogs/#blogging-best-practices","text":"have integrity maintain high standards with what you publish keep truth and accuracy get your facts straight verify information take responsibility for mistakes keep fairness give credit where it's due and cite sources of information consider the long term impacts of anyone who may be affected by your posts be a truthful, fair and authentic writer","title":"blogging best practices"},{"location":"creative/writing-blogs/#cta-calls-to-action","text":"in the art of conversation, you cannot just talk about yourself blog posts are no different even though your end of the conversation may go on longer offer points of engagement for readers, (CTA) a CTA is u an invitation for your readers to do something a CTA could be a link to another site to do something, a pitch to buy your product, as to follow you on social media, request for them to donate to a charity blogs with CTA have much higher engagement rates than blogs without CTAs are usually best put at the end of a post, asking readers an ending question is also a good way to produce engagement","title":"CTA, calls to action"},{"location":"creative/writing-blogs/#reasons-people-read-a-blog","text":"it offers something we want or need at that moment it is useful to us in someway informative and helpful educational challenges you","title":"reasons people read a blog"},{"location":"creative/writing-blogs/#not-reasons-people-read-a-blog","text":"they don't read because the writer love to hear themselves talk it's a self-serving rant it's a diary not because it's some meta gazing view on a topic","title":"not reasons people read a blog"},{"location":"creative/writing-blogs/#blog-voice","text":"strive to have a unique voice its not just what you say but how you say it \"voice is the distinct personality, style, or point of view of a piece or writing\" conviction is contagious","title":"blog voice"},{"location":"creative/writing-blogs/#writing-passionate-posts","text":"write passionate posts, but do not rant choose a clear point develop a well organized argument","title":"writing passionate posts"},{"location":"creative/writing-blogs/#how-to-develop-your-voice","text":"read other blogs and see what you like and what works well for other writers experiment with different styles to see what fits you","title":"how to develop your voice"},{"location":"creative/writing-blogs/#ask-yourself","text":"what would audience find useful how can I help readers - achieve a common goal - understand a complex issue - soothe a worry - teach them to feel better about themselves - teach them something to improve their lives in someway - laugh","title":"ask yourself"},{"location":"creative/writing-blogs/#how-to-optimize-blog","text":"become a search engine optimization expert (seo) practice writing attention grabbing headlines learn to write quickly and efficiently use today's news to help direct readers attention to posts, stay current and fresh post predictably and consistently post as often as you can commit to posting compelling content on a regular basis write down ideas in notes as potential future posts use eye catching pictures and videos to keep readers attention on the post one study shows one picture for every 350 words","title":"how to optimize blog"},{"location":"creative/writing-blogs/#be-knowledgable","text":"everyone is a relative expert in something random politics, cooking, areas of well-being how-tos, easy to follow numbered lists are good ways of presenting knowledge a good idea to show readers how or why you are an expert on a subject a tagline at end of post is a good place to put description of self and qualifications or experience explain complex words in a simple way ensure accuracy on posts, even on the smallest details double check facts and site articles and sources when needed stick to a clear and concise point in your blog post","title":"be knowledgable"},{"location":"creative/writing-blogs/#how-to-stay-focused-on-topic","text":"write headline first use a list of bullet points don't just blurt stream of conscience onto page","title":"how to stay focused on topic"},{"location":"creative/writing-blogs/#length-of-blog-post","text":"as long as it needs to be to make your argument / point word count should be determined on what you have to say word count also depends on how clearly and concisely you can say it the average person reads between 150 - 300 words per minute people spend 3-5 minutes reading a post 450 - 1,500 words per post shorter posts of around 300 generate more comments longer posts of 1,000 - 1,500 get more media shares longer posts up to 2,500 get better search rankings google search engine favors a low bounce rate, meaning readers stay on your page longer","title":"length of blog post"},{"location":"creative/writing-blogs/#dealing-with-criticism","text":"remember it takes courage to write a blog monitor and learn from comments do not engage with trolls recognize the privilege of having a blog","title":"dealing with criticism"},{"location":"linux/code-snips/","text":"Handy Code Snips \u00b6 find paths containing WORD \u00b6 ls -R | grep WORD","title":"Code Snips"},{"location":"linux/code-snips/#handy-code-snips","text":"","title":"Handy Code Snips"},{"location":"linux/code-snips/#find-paths-containing-word","text":"ls -R | grep WORD","title":"find paths containing WORD"},{"location":"linux/command-line/","text":"Linux Command Line \u00b6 quick Linux intro \u00b6 Linux broadly refers to a free, open-source operating system first released by Linus Torvalds in 1991 Linux is really just the name of the kernel a kernel allows software to communicate with a computers hardware Linux was inspired by Unix, which in turn was inspired by MINIX Linux is free software under the GPL (GNU General Public License) all Linux systems run a version of the Linux kernel most Linux systems use the same set of core tools called the GNU coreutils the combination of these tools and the kernel are referred to as GNU/Linux Linux distributions are operating systems that include the kernel and various other software Distribution maintainers make choices about how their distributions are configured and what tools they provide many distributions are related to each other: Arch, Debian, Red Hat, Slackware, and others we choose a distro based on many factors Debian: Ubuntu Linux mint Elementary OS Kali Linux all distributions differ in various ways the command line or shell is common to all of them the Bash shell is very widely used and widely available Red Hat: CentOS Fedora Red Hat Enterprise Linux Unix \u00b6 what is Unix? \u00b6 an operating system created around 1970 by AT&T employees working at Bell Labs many of the Bell Labs employees were involved in the design of a mainframe operating system called MULTICS MULTICS = Multiplex Information and Computing Service back around 1970 mainframes were expensive, so users were granted timesharing slots to do their work, often by logging in from a remote terminal with less computing power MULTICS was designed to manage that remote login, timesharing process MULTICS became a large and complex project and Bell Labs decided to pull out of it the employees who worked on it still liked the projects goals, so like as side project, they worked on building a smaller and simpler version their first version only supported a single user, so as a play on the name MULTICS, they called it UNICS UNICS = Uniplexed Information and Computing Service UNICS became able to support multiple users and was renamed Unix (not an acronym anymore) at this point Unix was now a main frame operating system being used by Bell Labs 2 events gave Unix a big boost in popularity in 1972 Unix was rewritten in the C programming language prior operating systems were typically written in Assembly, a very low-level programming language Assembly requires code to be written for specific computer hardware Assembly is very fast but it is not portable, if you wanted to take your operating system to new hardware, you had to rewrite portions of your code The C programming language language was originally designed to write programs for the Unix operating system C is a low level language, but not as low level as Assembly, and so the programs are easier to write, and they are hardware-independent the developers liked C and decided to rewrite the whole Unix operating system using it, so Unix became portable to other hardware the next important event is the spread of Unix outside of AT&Ts Bell Labs a court order in an antitrust case forbid AT&T from entering the computer software business, so AT&T could not sell the Unix operating system, but they could give it away if you wrote to AT&T and asked for a copy of Unix, they would give you a free license, and send you all the source code free high-quality software was very attractive to government agencies, corporations, and especially universities, who'd bought these expensive mainframe computers Unix spread quickly and in 1975 programming was taking off and students at universities were learning to program on mainframe computers using Unix those students went on to work at corporations and software companies, and took their fondness of Unix with them since then Unix has grown an improved branches and improvements \u00b6 the first public version of Unix in 1975 is often referred to as System 5 over time more branches have been released and that still continues today one of the most famous of these is the Berkeley Software Distribution (BSD) Linux is open source and comes in many variations, such as Red Hat, CentOS, Debian, Ubuntu, Kali, Gentoo command-line basics \u00b6 what is the command line? \u00b6 allows us to interact with programs using text commands command-line programs can read text inputs and output text to the screen command-line programs can read and write from files and the network Bash is a widely used shell or command-line interpreter Bash was released in 1989 and is named Bourne Again SHell Bash builds on earlier shells, like Bourne shell and Thompson shell Many other shells are available, offering varying features Bash is widely available on Linux command-line interface (CLI) is any place we can enter text commands a shell is a piece of software that interprets typed commands and runs them terminal is a software that a shell program runs inside of these terms are easily confused with each other command structure \u00b6 command option(s) argument(s) commands are programs that are available on a system when we run a command, the system takes a specific action many commands have short names in order to save typing command names can seem tricky at first many aspects of the command line are all about efficiency commands are programs that take a particular action options tell the command how to operate, changing the behavior of the command options often begin with a dash or minus sign (like -e or -s) options are often represented by one letter or number most commands offer more than 1 option options can be used together arguments tell the command what to operate on this could be files, directories, urls, etc write commands in a shell at the prompt \u00b6 F11 makes terminal full screen spacing matters spelling command names matters misspelled commands usually will just fail mistyped options or arguments can cause unexpected outcomes or data loss always double check what you've typed before you run a command most commands are programs installed many common utilities come from the GNU coreutils the system provides ways for us to find programs finding help for commands \u00b6 Albert Einstein was credited with saying he didn't keep certain technical information in his mind because it was readily available in books you do not have to memorize everything the command man opens the manual pages manual pages are the built-in documentation for commands the highlighted line at bottom of terminal will show what line your cursor is on many commands also have the --help option to get help for the command help command outputs help for Bash apropos searches through installed programs that can be used as commands and searches their descriptions for text that you provide as an argument apropos list will show all options for commands that perform some type of list action or that perform actions on some type of list item helpful keyboard shortcuts in the terminal \u00b6 ^ = ctrl tab completion: automatically completes a file, command, or folder name makes guesses based on the contents of the path text navigation shortcuts: ctrl a = move to beginning of line ctrl e = move to end of line ctrl left = move backward a word at a time ctrl right = move forward a word at a time ctrl u = delete from cursor to line start ctrl k = delete from cursor to line end ctrl shift c = copy selected text to clipboard ctrl shift v = paste selected text from clipboard up / down arrow = scroll previous commands ctrl r = search command history, ctrl r again cycles through search results ctrl c = cancel command long commands or long series of commands can wrap at the window boundary, but these are still considered one line a line is any text we type at the command prompt before pressing return files, directories, permissions \u00b6 Linux file system \u00b6 file determines a file type stat displays a files status in a Linux system everything is thought of as a file we organize these files into directories which are sometimes called folders how directories are organized: working at the command line we will often need to refer to files and directories that represent the input, output, or the configurations for commands we use we also need to know where commands are located on the system on a Linux system files and directories are part of the file system, which defines the way the data is represented on the system's storage media the file system keeps track of and represents files on the system's storage Most Linux distributions follow the FHS (Filesystem Hierarchy Standard) the FHS defines where certain kinds of files are stored on the file system having files like configurations, programs, or binaries and so on in predictable locations is important to the operability to the software across Linux distributions each Linux system only has one file system and everything else, directories, external hard drives, network shares, and so on are represented within it understanding file paths \u00b6 in order to refer to locations on the filesystem we use a path, a string of text that represents a file or directory within the file system navigating the file system \u00b6 use backslash or quotes to refer to folders or files with space in them ls -R recursively lists directories and subdirectories copy move delete files and directories \u00b6 cp = copy files, cp -R = copy directories mv = move or rename files wildcards are characters that stand for or represent patterns in text = any number of characters ? = one character mv dir1/* dir2 = moves all files from dir1 to dir2 mv dir1/*txt dir2 = moves all files ending in txt to dir2 mv dir1/*.css dir2 = moves all files ending in .css to dir2 rm = remove file rm file?.txt = removes any file starting with file and ending with .txt, that has 1 letter in between (file1.txt files.txt filer.txt file%.txt) find files from the command line \u00b6 the find command: finds files find ~/ -name \"text*\" = finds all files & dirs with a name starting in text starting from our home dir find ~/ -name \"*t*\" will find everything with t in the name understand user roles and sudo \u00b6 multiuser environment: older systems didn't have the concept of separate users who ever used the system was the system admin and could do whatever they want modern systems allow multiple users with there own private files su $USERNAME = switch user to $USERNAME, will need to provide password root / superuser is like the admin of the system and can make any changes to the system sudo allows normal users with the proper privileges to make admin changes sudo -k = turns off superuser privileges sudo -s = logs into root shell understand file permissions \u00b6 file permissions are the way we tell the system which users and groups of users are allowed to access any given file and in what ways when a user tries to access a file, the system consults the permission mode of a file and only allows the user access if they are permitted to have it the sequence of letters breaks down into 3 sections the first section represents the user designated as owner of the file the second section represents a group a group is a collection of users for whom we can define specific access to the file the third section represents the access to the file for all other users who are not the files owner or in the group designated in the group section each of the sections in the 9 letters breaks down into 3 letters rwx = read write execute r-- = someone can modify the contents of a file but not modify it or execute it -w- = someone can make changes to a file but not read the contents or execute it --x = someone can run the file, as in a command or program, but not read or write it d may be included at the beginning of the 9 letters to signify a directory l may be included to signify the file is a link rwxrwxrwx file1 rwxr-xr-x file2 chmod = changes the permission mode string chown = changes the owner of a file chgrp = changes the group of a file chmod can be used in different ways octal notation: uses 3 values to represent rwx, such as (755 644 777) read(4) write(2) execute(1) result user r w x 7 group r - x 5 others r - x 5 read(4) write(2) execute(1) result user r w x 7 group r - x 5 others r - - 4 read(4) write(2) execute(1) result user r w x 7 group r w x 7 others r w x 7 octal table: octal value mode 0 --- 1 --x 2 -w- 3 -wx 4 r-- 5 r-x 6 rw- 7 rwx symbolic notation: uses a shorthand for user, group, others, and all (a=r g+w o-x) read(r) write(w) execute(x) mode user(u) + + x u+rwx group(g) = g=r others(o) - o-rwx all(a) = = = a=rwx + adds permission - removes permission = resets permissions to match new mode (removes previous mode) octal symbolic comparison table: octal value symbolic value result 777 a=rwx rwxrwxrwx 755 u=rwx, g=rx, o=rx rwxr-xr-x 644 u=rw, g=r, o=r rw-r--r-- 700 u=rwx, g-rwx, o-rwx rwx------ using octal notation is similar to using symbolic = all the time original mode symbolic value result rw-r--r-- +x rwxr-xr-x rwxrwxrwx g=w, o=r rwx-w-r-- rwxr----- g+w, o+r rwxrw-r-- rwxrwxrwx a-x rw-rw-rw- modify file permissions \u00b6 there is no single standard on default permissions in users home directory and they vary by distro 755, 644, 700 are common create hard and symbolic links \u00b6 links are files that reference other files used to avoid having multiple copies of the same file in different places we keep 1 file in 1 location, and then add a little pointer or link to other places where we want the file to appear 2 types of links, hard links and soft / symbolic links a hard link points to specific data (by inode) on the disk a soft link or symbolic link (symlink) points to another file the 2 types of links work in different ways ln -s source-file.txt source-file-link.txt - if you edit source-file-link.txt you would be editing source-file.txt as well - of either file is moved, the link will break and source-file-link.txt will no longer point to source-file.txt - source-file-link.txt would hold in memory a relative path to source-file.txt, so if either file moves, the relative path is no longer accurate ln -s /home/user/absolute-path.txt soft-link.txt if we use an absolute path, source-file-link.txt can be moved anywhere and it will still appropriately point to source-file.txt, but moving the source-file.txt would still break the link ln source-file2.txt file2-hard-link.txt all files are pointers to a spot in memory which actually contains the data a hard link creates another pointer to the data that the first file is pointing at tasks & tools \u00b6 Unix philosophy \u00b6 tools should do 1 thing and do it well in this case, doing something well means being a well behaved citizen of the ecosystem of tools that operate using text interfaces the tool should expect to take in a file or stream and output text in a reasonable format once it's done processing or doing whatever action that particular tool does this philosophy suggests that we shouldn't have tools that try to do too much we don't want 1 single tool or program that reads files and separates the text into another file and renames the file and compresses it into an archive when it's done, or one that tries to do everything anyone could possibly want to do tools should be designed to be used together in different ways the standard GNU coreutils follow this pattern we do not want to think of these tools as multifunction swiss army knives we want to think of these tools as a well-stocked kitchen of chef's tools we can open a can with a little Swiss Army Knife attachment, or try to chop a tomato with a tiny blade, but none of these tools would do a job particularly well, we want tools that will give us the ability to make meals we are proud of and that can work together easily and be used in different combinations to do whatever we need think of an assembly line where 1 machine does 1 task and the passes on to the next specialized machine, rather than 1 robot doing different tasks on the same item, it would not be nearly as efficient having separate dedicated tools allows us to pick appropriate tools from our toolbox to do exactly what we need to do we want to be able to incorporate the right tools into doing a task as flexibly as possible using pipes \u00b6 pipes take the output of 1 command and send it to another think of commands as little processing units that do 1 particular thing and pipes as connections between those units we can use pipes to take the output of the cat command and then instead of displaying the text on the screen, pass the result to the sort command cat users.txt | sort -u | ... the pipe character is represented by a vertical bar below pipes hello to wc and tells use there is 1 line, 1 word, and 6 characters wc counts the invisible newline (\\n) character that is at the end of every new line in a text file echo hello | wc 1 1 6 you can pipe anything to anything else and usually it will do what you expect cat head tail less \u00b6 cat: concatenate means to link together can be used to output text file contents to the screen or to another program head, tail: view lines from the beginning or end of a file head my-file.txt = outputs first 10 lines of file head -n5 my-file.txt = outputs first 5 lines of file less my-file.txt = outputs last 10 lines of file less -n5 my-file.txt = outputs last 5 lines of file less: displays text one page or screenful at a time and provides navigation controls cat -n text.txt | tail -n5 9 saf 10 asdf 11 asd 12 f 13 asd tail -n5 text.txt | cat -n 1 saf 2 asdf 3 asd 4 f 5 asd search with grep \u00b6 grep = get regular expression grep command searches files for matching patterns match patterns can be regular expressions -n will output line numbers as well -i will make search insensitive -v will only output lines NOT matching our search 1 :the purple dog 4 :the moon 5 :i am the blah 8 :the 10 :what in the world 11 :i am the 12 :of the year 13 :the 1 14 :the 2 16 :the 5 grep -E \"[jklo]\" test.txt = finds all lines containing either j k l or o grep -E \"\\w{9,}\" test.txt = finds all lines containing words with 9 or more characters awk sed sort \u00b6 one of the tasks of a system administrator, systems analyst, scientist, or programmer is to make use of data from various logs or outputs awk: is commonly used to extract specific text from a file according to a rule awk programs can be written from the command line or stored in a file sed: a stream editor excels at changing data as it flows through a command pipeline, or in place in a file we can use either tool in a command pipeline or just by themselves cat random-users.txt Name Id Team Scott 314 Purple Ananti 991 Orange Jian 3127 Purple Miguel 671 Green Wes 1337 Orange Anne 556 Green awk '{print $2}' random-users.txt Id 314 991 3127 671 1337 556 awk '{print $2 \"\\t\" $1}' random-users.txt Id Name 314 Scott 991 Ananti 3127 Jian 671 Miguel 1337 Wes 556 Anne awk '{print $2 \"\\t\" $1}' random-users.txt | sort -n Id Name 314 Scott 556 Anne 671 Miguel 991 Ananti 1337 Wes 3127 Jian sed s/Orange/Red/ random-users.txt Name Id Team Scott 314 Purple Ananti 991 Red Jian 3127 Purple Miguel 671 Green Wes 1337 Red Anne 556 Green sort random-users.txt Ananti 991 Orange Anne 556 Green Jian 3127 Purple Miguel 671 Green Name Id Team Scott 314 Purple Wes 1337 Orange # sorting second column by first character sort -k2 random-users.txt Wes 1337 Orange Jian 3127 Purple Scott 314 Purple Anne 556 Green Miguel 671 Green Ananti 991 Orange Name Id Team sort -k2 -n random-users.txt Name Id Team Scott 314 Purple Anne 556 Green Miguel 671 Green Ananti 991 Orange Wes 1337 Orange Jian 3127 Purple rev = prints text in reverse sequence tac = concatenates or displays files in reverse tr = translates or modifies individual characters according to arguments tar and zip archives \u00b6 in the early days of computer systems and still today, data that needed to be archived for safe keeping was recorded to back-up tapes and stored in a closet or basement (or ideally in a more suitable and secure location) in order to store files on a linear medium like tape, files are recorded to the tape 1 after another, in sequence, like songs on an audio cassette instead of using a tape, we can also create a file that contains other files in this sequence .tar = tape archive files .tar files are common for distributing, sharing, and archiving files on linux systems it is much easier (in many ways), to send 1 large file than several small files .tar files often do not involve any compression, but there are ways to incorporate compression into a .tar file compression tries to reduce the size of a file using some mathematical tricks if using compression with a tar archive, you will often see that the file is named with and extension to indicate what kind of compression is being used compressed formats = .tar.gz, .tgz, .tar.bz2, + others .tar.gz, .tgz = a tar file with g-zipped compression .tar.bz2 = a tar file with b-zipped compression tar -cvf new-tar.tar my-folder # -c option says create an archive # -v option tells tar to be verbose # -f options tells tar to output the tar to specified file name tar -caf new-gz-tar.tar.gz my-folder # -a option says use compression method specified by file extension (.gz) tar -caf new-bz-tar.tar.bz2 my-folder # works with other compression methods such as b-zipped as well tar -xf my-tar.tar.gz -C tar-directory # unpacks tar to specified directory the zip and unzip commands can create and open compressed data archive files called zip files the zip format is more cross platform friendly zip -r my-zip.zip my-folder # -r option to zip directory and all files inside unzip my-zip.zip unzip my-zip.zip -d my-zip-directory output redirection \u00b6 text in a shell travels through 1 of 3 streams text can be redirected to the screen or to files stream number usage standard input(stdin) 0 text input standard output(stdout) 1 text output standard error(stdin) 2 error text ls CNAME code-examples deploy.sh docs mkdocs.yml README.md requirements.txt src venv ls > std-output.txt ls fake-file ls: cannot access 'fake-file' : No such file or directory ls fake-file > std-output.txt ls: cannot access 'fake-file' : No such file or directory ls fake-file 2 > std-err.txt >std-err.txt # erases std-err.txt contents > replaces content in file >> adds to content in file environment variables and PATH \u00b6 env = look at environment variables, such as PATH echo $PATH = outputs PATH variable PATH = a list of files or directories where the shell looks for commands / programs / scripts which = shows location of specified command we can modify where the system looks for executables sometimes when adding software we might want to add the path to that software (like nvm, cargo) we can edit PATH in ~/.bash_profile ~/.bashrc ~/.zshrc among other places more advanced topics \u00b6 Linux distribution info \u00b6 find files with distribution release information ls -l /etc/*release -rw-r--r-- 1 root root 104 Aug 4 07 :53 /etc/lsb-release lrwxrwxrwx 1 root root 21 Jan 5 09 :33 /etc/os-release -> ../usr/lib/os-release cat /etc/lsb-release DISTRIB_ID = Ubuntu DISTRIB_RELEASE = 20 .04 DISTRIB_CODENAME = focal DISTRIB_DESCRIPTION = \"Ubuntu 20.04.3 LTS\" cat /etc/os-release NAME = \"Ubuntu\" VERSION = \"20.04.3 LTS (Focal Fossa)\" ID = ubuntu ID_LIKE = debian PRETTY_NAME = \"Ubuntu 20.04.3 LTS\" VERSION_ID = \"20.04\" HOME_URL = \"https://www.ubuntu.com/\" SUPPORT_URL = \"https://help.ubuntu.com/\" BUG_REPORT_URL = \"https://bugs.launchpad.net/ubuntu/\" PRIVACY_POLICY_URL = \"https://www.ubuntu.com/legal/terms-and-policies/privacy-policy\" VERSION_CODENAME = focal UBUNTU_CODENAME = focal uname = find version of linux kernel in use uname -a Linux justin-HP-Laptop-15-dw1xxx 5 .11.0-46-generic #51~20.04.1-Ubuntu SMP Fri Jan 7 06:51:40 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux uname -r 5 .11.0-46-generic hardware and disk information \u00b6 memory information free -h total used free shared buff/cache available Mem: 3 .6Gi 1 .9Gi 153Mi 271Mi 1 .6Gi 1 .2Gi Swap: 2 .0Gi 862Mi 1 .2Gi cat /proc/cpuinfo = output processor resources df = report file system disk space usage df -h Filesystem Size Used Avail Use% Mounted on udev 1 .8G 0 1 .8G 0 % /dev tmpfs 374M 1 .7M 372M 1 % /run /dev/sda2 117G 54G 58G 49 % / tmpfs 1 .9G 0 1 .9G 0 % /dev/shm tmpfs 5 .0M 4 .0K 5 .0M 1 % /run/lock tmpfs 1 .9G 0 1 .9G 0 % /sys/fs/cgroup /dev/loop2 56M 56M 0 100 % /snap/core18/2253 /dev/loop1 128K 128K 0 100 % /snap/bare/5 /dev/loop4 56M 56M 0 100 % /snap/core18/2284 /dev/loop0 218M 218M 0 100 % /snap/code/85 /dev/loop3 62M 62M 0 100 % /snap/core20/1270 /dev/loop5 100M 100M 0 100 % /snap/core/11993 /dev/loop6 165M 165M 0 100 % /snap/gnome-3-28-1804/161 /dev/loop7 33M 33M 0 100 % /snap/snapd/12704 /dev/loop8 128K 128K 0 100 % /snap/hello-world/29 /dev/loop9 29M 29M 0 100 % /snap/muccadoro/3 /dev/loop10 99M 99M 0 100 % /snap/neovide/120 /dev/loop11 72M 72M 0 100 % /snap/lunatask/8 /dev/loop12 128K 128K 0 100 % /snap/software-boutique/54 /dev/loop13 66M 66M 0 100 % /snap/gtk-common-themes/1519 /dev/loop14 44M 44M 0 100 % /snap/snapd/14295 /dev/loop15 11M 11M 0 100 % /snap/nvim/1722 /dev/loop16 64M 64M 0 100 % /snap/pomotroid/6 /dev/sda1 511M 5 .3M 506M 2 % /boot/efi tmpfs 374M 80K 374M 1 % /run/user/1000 lshw = list hardware package manager \u00b6 apt search tree = searches for all packages with tree in name or description apt show tree = shows information for package tree","title":"Command Line"},{"location":"linux/command-line/#linux-command-line","text":"","title":"Linux Command Line"},{"location":"linux/command-line/#quick-linux-intro","text":"Linux broadly refers to a free, open-source operating system first released by Linus Torvalds in 1991 Linux is really just the name of the kernel a kernel allows software to communicate with a computers hardware Linux was inspired by Unix, which in turn was inspired by MINIX Linux is free software under the GPL (GNU General Public License) all Linux systems run a version of the Linux kernel most Linux systems use the same set of core tools called the GNU coreutils the combination of these tools and the kernel are referred to as GNU/Linux Linux distributions are operating systems that include the kernel and various other software Distribution maintainers make choices about how their distributions are configured and what tools they provide many distributions are related to each other: Arch, Debian, Red Hat, Slackware, and others we choose a distro based on many factors Debian: Ubuntu Linux mint Elementary OS Kali Linux all distributions differ in various ways the command line or shell is common to all of them the Bash shell is very widely used and widely available Red Hat: CentOS Fedora Red Hat Enterprise Linux","title":"quick Linux intro"},{"location":"linux/command-line/#unix","text":"","title":"Unix"},{"location":"linux/command-line/#what-is-unix","text":"an operating system created around 1970 by AT&T employees working at Bell Labs many of the Bell Labs employees were involved in the design of a mainframe operating system called MULTICS MULTICS = Multiplex Information and Computing Service back around 1970 mainframes were expensive, so users were granted timesharing slots to do their work, often by logging in from a remote terminal with less computing power MULTICS was designed to manage that remote login, timesharing process MULTICS became a large and complex project and Bell Labs decided to pull out of it the employees who worked on it still liked the projects goals, so like as side project, they worked on building a smaller and simpler version their first version only supported a single user, so as a play on the name MULTICS, they called it UNICS UNICS = Uniplexed Information and Computing Service UNICS became able to support multiple users and was renamed Unix (not an acronym anymore) at this point Unix was now a main frame operating system being used by Bell Labs 2 events gave Unix a big boost in popularity in 1972 Unix was rewritten in the C programming language prior operating systems were typically written in Assembly, a very low-level programming language Assembly requires code to be written for specific computer hardware Assembly is very fast but it is not portable, if you wanted to take your operating system to new hardware, you had to rewrite portions of your code The C programming language language was originally designed to write programs for the Unix operating system C is a low level language, but not as low level as Assembly, and so the programs are easier to write, and they are hardware-independent the developers liked C and decided to rewrite the whole Unix operating system using it, so Unix became portable to other hardware the next important event is the spread of Unix outside of AT&Ts Bell Labs a court order in an antitrust case forbid AT&T from entering the computer software business, so AT&T could not sell the Unix operating system, but they could give it away if you wrote to AT&T and asked for a copy of Unix, they would give you a free license, and send you all the source code free high-quality software was very attractive to government agencies, corporations, and especially universities, who'd bought these expensive mainframe computers Unix spread quickly and in 1975 programming was taking off and students at universities were learning to program on mainframe computers using Unix those students went on to work at corporations and software companies, and took their fondness of Unix with them since then Unix has grown an improved","title":"what is Unix?"},{"location":"linux/command-line/#branches-and-improvements","text":"the first public version of Unix in 1975 is often referred to as System 5 over time more branches have been released and that still continues today one of the most famous of these is the Berkeley Software Distribution (BSD) Linux is open source and comes in many variations, such as Red Hat, CentOS, Debian, Ubuntu, Kali, Gentoo","title":"branches and improvements"},{"location":"linux/command-line/#command-line-basics","text":"","title":"command-line basics"},{"location":"linux/command-line/#what-is-the-command-line","text":"allows us to interact with programs using text commands command-line programs can read text inputs and output text to the screen command-line programs can read and write from files and the network Bash is a widely used shell or command-line interpreter Bash was released in 1989 and is named Bourne Again SHell Bash builds on earlier shells, like Bourne shell and Thompson shell Many other shells are available, offering varying features Bash is widely available on Linux command-line interface (CLI) is any place we can enter text commands a shell is a piece of software that interprets typed commands and runs them terminal is a software that a shell program runs inside of these terms are easily confused with each other","title":"what is the command line?"},{"location":"linux/command-line/#command-structure","text":"command option(s) argument(s) commands are programs that are available on a system when we run a command, the system takes a specific action many commands have short names in order to save typing command names can seem tricky at first many aspects of the command line are all about efficiency commands are programs that take a particular action options tell the command how to operate, changing the behavior of the command options often begin with a dash or minus sign (like -e or -s) options are often represented by one letter or number most commands offer more than 1 option options can be used together arguments tell the command what to operate on this could be files, directories, urls, etc","title":"command structure"},{"location":"linux/command-line/#write-commands-in-a-shell-at-the-prompt","text":"F11 makes terminal full screen spacing matters spelling command names matters misspelled commands usually will just fail mistyped options or arguments can cause unexpected outcomes or data loss always double check what you've typed before you run a command most commands are programs installed many common utilities come from the GNU coreutils the system provides ways for us to find programs","title":"write commands in a shell at the prompt"},{"location":"linux/command-line/#finding-help-for-commands","text":"Albert Einstein was credited with saying he didn't keep certain technical information in his mind because it was readily available in books you do not have to memorize everything the command man opens the manual pages manual pages are the built-in documentation for commands the highlighted line at bottom of terminal will show what line your cursor is on many commands also have the --help option to get help for the command help command outputs help for Bash apropos searches through installed programs that can be used as commands and searches their descriptions for text that you provide as an argument apropos list will show all options for commands that perform some type of list action or that perform actions on some type of list item","title":"finding help for commands"},{"location":"linux/command-line/#helpful-keyboard-shortcuts-in-the-terminal","text":"^ = ctrl tab completion: automatically completes a file, command, or folder name makes guesses based on the contents of the path text navigation shortcuts: ctrl a = move to beginning of line ctrl e = move to end of line ctrl left = move backward a word at a time ctrl right = move forward a word at a time ctrl u = delete from cursor to line start ctrl k = delete from cursor to line end ctrl shift c = copy selected text to clipboard ctrl shift v = paste selected text from clipboard up / down arrow = scroll previous commands ctrl r = search command history, ctrl r again cycles through search results ctrl c = cancel command long commands or long series of commands can wrap at the window boundary, but these are still considered one line a line is any text we type at the command prompt before pressing return","title":"helpful keyboard shortcuts in the terminal"},{"location":"linux/command-line/#files-directories-permissions","text":"","title":"files, directories, permissions"},{"location":"linux/command-line/#linux-file-system","text":"file determines a file type stat displays a files status in a Linux system everything is thought of as a file we organize these files into directories which are sometimes called folders how directories are organized: working at the command line we will often need to refer to files and directories that represent the input, output, or the configurations for commands we use we also need to know where commands are located on the system on a Linux system files and directories are part of the file system, which defines the way the data is represented on the system's storage media the file system keeps track of and represents files on the system's storage Most Linux distributions follow the FHS (Filesystem Hierarchy Standard) the FHS defines where certain kinds of files are stored on the file system having files like configurations, programs, or binaries and so on in predictable locations is important to the operability to the software across Linux distributions each Linux system only has one file system and everything else, directories, external hard drives, network shares, and so on are represented within it","title":"Linux file system"},{"location":"linux/command-line/#understanding-file-paths","text":"in order to refer to locations on the filesystem we use a path, a string of text that represents a file or directory within the file system","title":"understanding file paths"},{"location":"linux/command-line/#navigating-the-file-system","text":"use backslash or quotes to refer to folders or files with space in them ls -R recursively lists directories and subdirectories","title":"navigating the file system"},{"location":"linux/command-line/#copy-move-delete-files-and-directories","text":"cp = copy files, cp -R = copy directories mv = move or rename files wildcards are characters that stand for or represent patterns in text = any number of characters ? = one character mv dir1/* dir2 = moves all files from dir1 to dir2 mv dir1/*txt dir2 = moves all files ending in txt to dir2 mv dir1/*.css dir2 = moves all files ending in .css to dir2 rm = remove file rm file?.txt = removes any file starting with file and ending with .txt, that has 1 letter in between (file1.txt files.txt filer.txt file%.txt)","title":"copy move delete files and directories"},{"location":"linux/command-line/#find-files-from-the-command-line","text":"the find command: finds files find ~/ -name \"text*\" = finds all files & dirs with a name starting in text starting from our home dir find ~/ -name \"*t*\" will find everything with t in the name","title":"find files from the command line"},{"location":"linux/command-line/#understand-user-roles-and-sudo","text":"multiuser environment: older systems didn't have the concept of separate users who ever used the system was the system admin and could do whatever they want modern systems allow multiple users with there own private files su $USERNAME = switch user to $USERNAME, will need to provide password root / superuser is like the admin of the system and can make any changes to the system sudo allows normal users with the proper privileges to make admin changes sudo -k = turns off superuser privileges sudo -s = logs into root shell","title":"understand user roles and sudo"},{"location":"linux/command-line/#understand-file-permissions","text":"file permissions are the way we tell the system which users and groups of users are allowed to access any given file and in what ways when a user tries to access a file, the system consults the permission mode of a file and only allows the user access if they are permitted to have it the sequence of letters breaks down into 3 sections the first section represents the user designated as owner of the file the second section represents a group a group is a collection of users for whom we can define specific access to the file the third section represents the access to the file for all other users who are not the files owner or in the group designated in the group section each of the sections in the 9 letters breaks down into 3 letters rwx = read write execute r-- = someone can modify the contents of a file but not modify it or execute it -w- = someone can make changes to a file but not read the contents or execute it --x = someone can run the file, as in a command or program, but not read or write it d may be included at the beginning of the 9 letters to signify a directory l may be included to signify the file is a link rwxrwxrwx file1 rwxr-xr-x file2 chmod = changes the permission mode string chown = changes the owner of a file chgrp = changes the group of a file chmod can be used in different ways octal notation: uses 3 values to represent rwx, such as (755 644 777) read(4) write(2) execute(1) result user r w x 7 group r - x 5 others r - x 5 read(4) write(2) execute(1) result user r w x 7 group r - x 5 others r - - 4 read(4) write(2) execute(1) result user r w x 7 group r w x 7 others r w x 7 octal table: octal value mode 0 --- 1 --x 2 -w- 3 -wx 4 r-- 5 r-x 6 rw- 7 rwx symbolic notation: uses a shorthand for user, group, others, and all (a=r g+w o-x) read(r) write(w) execute(x) mode user(u) + + x u+rwx group(g) = g=r others(o) - o-rwx all(a) = = = a=rwx + adds permission - removes permission = resets permissions to match new mode (removes previous mode) octal symbolic comparison table: octal value symbolic value result 777 a=rwx rwxrwxrwx 755 u=rwx, g=rx, o=rx rwxr-xr-x 644 u=rw, g=r, o=r rw-r--r-- 700 u=rwx, g-rwx, o-rwx rwx------ using octal notation is similar to using symbolic = all the time original mode symbolic value result rw-r--r-- +x rwxr-xr-x rwxrwxrwx g=w, o=r rwx-w-r-- rwxr----- g+w, o+r rwxrw-r-- rwxrwxrwx a-x rw-rw-rw-","title":"understand file permissions"},{"location":"linux/command-line/#modify-file-permissions","text":"there is no single standard on default permissions in users home directory and they vary by distro 755, 644, 700 are common","title":"modify file permissions"},{"location":"linux/command-line/#create-hard-and-symbolic-links","text":"links are files that reference other files used to avoid having multiple copies of the same file in different places we keep 1 file in 1 location, and then add a little pointer or link to other places where we want the file to appear 2 types of links, hard links and soft / symbolic links a hard link points to specific data (by inode) on the disk a soft link or symbolic link (symlink) points to another file the 2 types of links work in different ways ln -s source-file.txt source-file-link.txt - if you edit source-file-link.txt you would be editing source-file.txt as well - of either file is moved, the link will break and source-file-link.txt will no longer point to source-file.txt - source-file-link.txt would hold in memory a relative path to source-file.txt, so if either file moves, the relative path is no longer accurate ln -s /home/user/absolute-path.txt soft-link.txt if we use an absolute path, source-file-link.txt can be moved anywhere and it will still appropriately point to source-file.txt, but moving the source-file.txt would still break the link ln source-file2.txt file2-hard-link.txt all files are pointers to a spot in memory which actually contains the data a hard link creates another pointer to the data that the first file is pointing at","title":"create hard and symbolic links"},{"location":"linux/command-line/#tasks-tools","text":"","title":"tasks &amp; tools"},{"location":"linux/command-line/#unix-philosophy","text":"tools should do 1 thing and do it well in this case, doing something well means being a well behaved citizen of the ecosystem of tools that operate using text interfaces the tool should expect to take in a file or stream and output text in a reasonable format once it's done processing or doing whatever action that particular tool does this philosophy suggests that we shouldn't have tools that try to do too much we don't want 1 single tool or program that reads files and separates the text into another file and renames the file and compresses it into an archive when it's done, or one that tries to do everything anyone could possibly want to do tools should be designed to be used together in different ways the standard GNU coreutils follow this pattern we do not want to think of these tools as multifunction swiss army knives we want to think of these tools as a well-stocked kitchen of chef's tools we can open a can with a little Swiss Army Knife attachment, or try to chop a tomato with a tiny blade, but none of these tools would do a job particularly well, we want tools that will give us the ability to make meals we are proud of and that can work together easily and be used in different combinations to do whatever we need think of an assembly line where 1 machine does 1 task and the passes on to the next specialized machine, rather than 1 robot doing different tasks on the same item, it would not be nearly as efficient having separate dedicated tools allows us to pick appropriate tools from our toolbox to do exactly what we need to do we want to be able to incorporate the right tools into doing a task as flexibly as possible","title":"Unix philosophy"},{"location":"linux/command-line/#using-pipes","text":"pipes take the output of 1 command and send it to another think of commands as little processing units that do 1 particular thing and pipes as connections between those units we can use pipes to take the output of the cat command and then instead of displaying the text on the screen, pass the result to the sort command cat users.txt | sort -u | ... the pipe character is represented by a vertical bar below pipes hello to wc and tells use there is 1 line, 1 word, and 6 characters wc counts the invisible newline (\\n) character that is at the end of every new line in a text file echo hello | wc 1 1 6 you can pipe anything to anything else and usually it will do what you expect","title":"using pipes"},{"location":"linux/command-line/#cat-head-tail-less","text":"cat: concatenate means to link together can be used to output text file contents to the screen or to another program head, tail: view lines from the beginning or end of a file head my-file.txt = outputs first 10 lines of file head -n5 my-file.txt = outputs first 5 lines of file less my-file.txt = outputs last 10 lines of file less -n5 my-file.txt = outputs last 5 lines of file less: displays text one page or screenful at a time and provides navigation controls cat -n text.txt | tail -n5 9 saf 10 asdf 11 asd 12 f 13 asd tail -n5 text.txt | cat -n 1 saf 2 asdf 3 asd 4 f 5 asd","title":"cat head tail less"},{"location":"linux/command-line/#search-with-grep","text":"grep = get regular expression grep command searches files for matching patterns match patterns can be regular expressions -n will output line numbers as well -i will make search insensitive -v will only output lines NOT matching our search 1 :the purple dog 4 :the moon 5 :i am the blah 8 :the 10 :what in the world 11 :i am the 12 :of the year 13 :the 1 14 :the 2 16 :the 5 grep -E \"[jklo]\" test.txt = finds all lines containing either j k l or o grep -E \"\\w{9,}\" test.txt = finds all lines containing words with 9 or more characters","title":"search with grep"},{"location":"linux/command-line/#awk-sed-sort","text":"one of the tasks of a system administrator, systems analyst, scientist, or programmer is to make use of data from various logs or outputs awk: is commonly used to extract specific text from a file according to a rule awk programs can be written from the command line or stored in a file sed: a stream editor excels at changing data as it flows through a command pipeline, or in place in a file we can use either tool in a command pipeline or just by themselves cat random-users.txt Name Id Team Scott 314 Purple Ananti 991 Orange Jian 3127 Purple Miguel 671 Green Wes 1337 Orange Anne 556 Green awk '{print $2}' random-users.txt Id 314 991 3127 671 1337 556 awk '{print $2 \"\\t\" $1}' random-users.txt Id Name 314 Scott 991 Ananti 3127 Jian 671 Miguel 1337 Wes 556 Anne awk '{print $2 \"\\t\" $1}' random-users.txt | sort -n Id Name 314 Scott 556 Anne 671 Miguel 991 Ananti 1337 Wes 3127 Jian sed s/Orange/Red/ random-users.txt Name Id Team Scott 314 Purple Ananti 991 Red Jian 3127 Purple Miguel 671 Green Wes 1337 Red Anne 556 Green sort random-users.txt Ananti 991 Orange Anne 556 Green Jian 3127 Purple Miguel 671 Green Name Id Team Scott 314 Purple Wes 1337 Orange # sorting second column by first character sort -k2 random-users.txt Wes 1337 Orange Jian 3127 Purple Scott 314 Purple Anne 556 Green Miguel 671 Green Ananti 991 Orange Name Id Team sort -k2 -n random-users.txt Name Id Team Scott 314 Purple Anne 556 Green Miguel 671 Green Ananti 991 Orange Wes 1337 Orange Jian 3127 Purple rev = prints text in reverse sequence tac = concatenates or displays files in reverse tr = translates or modifies individual characters according to arguments","title":"awk sed sort"},{"location":"linux/command-line/#tar-and-zip-archives","text":"in the early days of computer systems and still today, data that needed to be archived for safe keeping was recorded to back-up tapes and stored in a closet or basement (or ideally in a more suitable and secure location) in order to store files on a linear medium like tape, files are recorded to the tape 1 after another, in sequence, like songs on an audio cassette instead of using a tape, we can also create a file that contains other files in this sequence .tar = tape archive files .tar files are common for distributing, sharing, and archiving files on linux systems it is much easier (in many ways), to send 1 large file than several small files .tar files often do not involve any compression, but there are ways to incorporate compression into a .tar file compression tries to reduce the size of a file using some mathematical tricks if using compression with a tar archive, you will often see that the file is named with and extension to indicate what kind of compression is being used compressed formats = .tar.gz, .tgz, .tar.bz2, + others .tar.gz, .tgz = a tar file with g-zipped compression .tar.bz2 = a tar file with b-zipped compression tar -cvf new-tar.tar my-folder # -c option says create an archive # -v option tells tar to be verbose # -f options tells tar to output the tar to specified file name tar -caf new-gz-tar.tar.gz my-folder # -a option says use compression method specified by file extension (.gz) tar -caf new-bz-tar.tar.bz2 my-folder # works with other compression methods such as b-zipped as well tar -xf my-tar.tar.gz -C tar-directory # unpacks tar to specified directory the zip and unzip commands can create and open compressed data archive files called zip files the zip format is more cross platform friendly zip -r my-zip.zip my-folder # -r option to zip directory and all files inside unzip my-zip.zip unzip my-zip.zip -d my-zip-directory","title":"tar and zip archives"},{"location":"linux/command-line/#output-redirection","text":"text in a shell travels through 1 of 3 streams text can be redirected to the screen or to files stream number usage standard input(stdin) 0 text input standard output(stdout) 1 text output standard error(stdin) 2 error text ls CNAME code-examples deploy.sh docs mkdocs.yml README.md requirements.txt src venv ls > std-output.txt ls fake-file ls: cannot access 'fake-file' : No such file or directory ls fake-file > std-output.txt ls: cannot access 'fake-file' : No such file or directory ls fake-file 2 > std-err.txt >std-err.txt # erases std-err.txt contents > replaces content in file >> adds to content in file","title":"output redirection"},{"location":"linux/command-line/#environment-variables-and-path","text":"env = look at environment variables, such as PATH echo $PATH = outputs PATH variable PATH = a list of files or directories where the shell looks for commands / programs / scripts which = shows location of specified command we can modify where the system looks for executables sometimes when adding software we might want to add the path to that software (like nvm, cargo) we can edit PATH in ~/.bash_profile ~/.bashrc ~/.zshrc among other places","title":"environment variables and PATH"},{"location":"linux/command-line/#more-advanced-topics","text":"","title":"more advanced topics"},{"location":"linux/command-line/#linux-distribution-info","text":"find files with distribution release information ls -l /etc/*release -rw-r--r-- 1 root root 104 Aug 4 07 :53 /etc/lsb-release lrwxrwxrwx 1 root root 21 Jan 5 09 :33 /etc/os-release -> ../usr/lib/os-release cat /etc/lsb-release DISTRIB_ID = Ubuntu DISTRIB_RELEASE = 20 .04 DISTRIB_CODENAME = focal DISTRIB_DESCRIPTION = \"Ubuntu 20.04.3 LTS\" cat /etc/os-release NAME = \"Ubuntu\" VERSION = \"20.04.3 LTS (Focal Fossa)\" ID = ubuntu ID_LIKE = debian PRETTY_NAME = \"Ubuntu 20.04.3 LTS\" VERSION_ID = \"20.04\" HOME_URL = \"https://www.ubuntu.com/\" SUPPORT_URL = \"https://help.ubuntu.com/\" BUG_REPORT_URL = \"https://bugs.launchpad.net/ubuntu/\" PRIVACY_POLICY_URL = \"https://www.ubuntu.com/legal/terms-and-policies/privacy-policy\" VERSION_CODENAME = focal UBUNTU_CODENAME = focal uname = find version of linux kernel in use uname -a Linux justin-HP-Laptop-15-dw1xxx 5 .11.0-46-generic #51~20.04.1-Ubuntu SMP Fri Jan 7 06:51:40 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux uname -r 5 .11.0-46-generic","title":"Linux distribution info"},{"location":"linux/command-line/#hardware-and-disk-information","text":"memory information free -h total used free shared buff/cache available Mem: 3 .6Gi 1 .9Gi 153Mi 271Mi 1 .6Gi 1 .2Gi Swap: 2 .0Gi 862Mi 1 .2Gi cat /proc/cpuinfo = output processor resources df = report file system disk space usage df -h Filesystem Size Used Avail Use% Mounted on udev 1 .8G 0 1 .8G 0 % /dev tmpfs 374M 1 .7M 372M 1 % /run /dev/sda2 117G 54G 58G 49 % / tmpfs 1 .9G 0 1 .9G 0 % /dev/shm tmpfs 5 .0M 4 .0K 5 .0M 1 % /run/lock tmpfs 1 .9G 0 1 .9G 0 % /sys/fs/cgroup /dev/loop2 56M 56M 0 100 % /snap/core18/2253 /dev/loop1 128K 128K 0 100 % /snap/bare/5 /dev/loop4 56M 56M 0 100 % /snap/core18/2284 /dev/loop0 218M 218M 0 100 % /snap/code/85 /dev/loop3 62M 62M 0 100 % /snap/core20/1270 /dev/loop5 100M 100M 0 100 % /snap/core/11993 /dev/loop6 165M 165M 0 100 % /snap/gnome-3-28-1804/161 /dev/loop7 33M 33M 0 100 % /snap/snapd/12704 /dev/loop8 128K 128K 0 100 % /snap/hello-world/29 /dev/loop9 29M 29M 0 100 % /snap/muccadoro/3 /dev/loop10 99M 99M 0 100 % /snap/neovide/120 /dev/loop11 72M 72M 0 100 % /snap/lunatask/8 /dev/loop12 128K 128K 0 100 % /snap/software-boutique/54 /dev/loop13 66M 66M 0 100 % /snap/gtk-common-themes/1519 /dev/loop14 44M 44M 0 100 % /snap/snapd/14295 /dev/loop15 11M 11M 0 100 % /snap/nvim/1722 /dev/loop16 64M 64M 0 100 % /snap/pomotroid/6 /dev/sda1 511M 5 .3M 506M 2 % /boot/efi tmpfs 374M 80K 374M 1 % /run/user/1000 lshw = list hardware","title":"hardware and disk information"},{"location":"linux/command-line/#package-manager","text":"apt search tree = searches for all packages with tree in name or description apt show tree = shows information for package tree","title":"package manager"},{"location":"linux/directories/","text":"Linux Directory Structure \u00b6 root dir table \u00b6 directory description / the root directory where everything begins /bin contains binaries (programs) that must be present for the system to boot and run /boot contains the Linux kernel, initial RAM disk image (for drivers needed at boot time), and the boot loader /dev this is a special directory that contains device nodes /etc directory contains all of the system-wide configuration files /home in normal configurations each user is given a directory here /lib contains shared library files used by the core system programs /lost+found used in the case of a partial recovery from a file system corruption event /media contains the mount points for removable media such as USB drives that are mounted automatically at insertion /mnt contains mount points for removable devices that have been mounted manually /opt used to install \u201coptional\u201d software commercial software products that might be installed on the system /proc virtual file system maintained by the Linux kernel where the \u201cfiles\u201d it contains are peepholes into the kernel itself /root This is the home directory for the root account /sbin contains \u201csystem\u201d binaries for programs that perform vital system tasks that are generally reserved for the superuser /tmp intended for the storage of temporary / transient files created by various programs /usr contains programs and support files used by regular users and executable programs installed by the Linux distribution /usr/lib The shared libraries for the programs in /usr/bin /usr/local where programs that are not included with the distribution but are intended for systemwide use are installed /usr/sbin Contains more system administration programs /usr/share /usr/bin programs shared data like default configuration files and screen backgrounds /usr/share/doc documentation files for installed packages /var directory tree where data that is likely to change such as log files are stored root dir list \u00b6 /, root is the start of the filesystem /etc common config files /bin and /sbin where common programs or commands are found in /lib shared modules and libraries /mnt /media standard locations for mounting other file systems like local and network systems and usb drives /dev is where the system keeps references to all of the hardware and its hard drives, such as memory, CPU's and everything else /proc contains references to processes that are running on the system and details on other aspects of the system as well /sys holds files representing different kernel parameters and system information, this is where you will spend time if you are interested in learning about kernel development","title":"Directories"},{"location":"linux/directories/#linux-directory-structure","text":"","title":"Linux Directory Structure"},{"location":"linux/directories/#root-dir-table","text":"directory description / the root directory where everything begins /bin contains binaries (programs) that must be present for the system to boot and run /boot contains the Linux kernel, initial RAM disk image (for drivers needed at boot time), and the boot loader /dev this is a special directory that contains device nodes /etc directory contains all of the system-wide configuration files /home in normal configurations each user is given a directory here /lib contains shared library files used by the core system programs /lost+found used in the case of a partial recovery from a file system corruption event /media contains the mount points for removable media such as USB drives that are mounted automatically at insertion /mnt contains mount points for removable devices that have been mounted manually /opt used to install \u201coptional\u201d software commercial software products that might be installed on the system /proc virtual file system maintained by the Linux kernel where the \u201cfiles\u201d it contains are peepholes into the kernel itself /root This is the home directory for the root account /sbin contains \u201csystem\u201d binaries for programs that perform vital system tasks that are generally reserved for the superuser /tmp intended for the storage of temporary / transient files created by various programs /usr contains programs and support files used by regular users and executable programs installed by the Linux distribution /usr/lib The shared libraries for the programs in /usr/bin /usr/local where programs that are not included with the distribution but are intended for systemwide use are installed /usr/sbin Contains more system administration programs /usr/share /usr/bin programs shared data like default configuration files and screen backgrounds /usr/share/doc documentation files for installed packages /var directory tree where data that is likely to change such as log files are stored","title":"root dir table"},{"location":"linux/directories/#root-dir-list","text":"/, root is the start of the filesystem /etc common config files /bin and /sbin where common programs or commands are found in /lib shared modules and libraries /mnt /media standard locations for mounting other file systems like local and network systems and usb drives /dev is where the system keeps references to all of the hardware and its hard drives, such as memory, CPU's and everything else /proc contains references to processes that are running on the system and details on other aspects of the system as well /sys holds files representing different kernel parameters and system information, this is where you will spend time if you are interested in learning about kernel development","title":"root dir list"},{"location":"linux/linux-programs/","text":"Advanced Linux Commands \u00b6 curl \u00b6 mutipart/form-data post request curl -X POST -F 'name=linuxize' -F 'email=linuxize@example.com' http://localhost.com/contact.php application/x-www-form-urlencoded post request curl -X POST -d 'name=test user1' -d 'email=testuser1@example.com' -d 'company_name=test company' -d 'password=password' http://localhost:8003/register - get request curl -X GET http://127.0.0.1:8000/items/ -H \"accept: application/json\" Sed \u00b6 stream editor double space lines in file sed '/^$/d;G' zsh \u00b6 the z shell my current prompt PS1 = \"%F{yellow}%~ %F{red} =%F{yellow}(%#)%F{red}=> \" RPS1 = \"%F{green}%D %F{white}%T %F{red}%n%{ $reset_color %}@%F{blue}%m %h%F{yellow} %Bjobs%b %j\" my zsh config export PATH = $PATH :/usr/local/go/bin: $HOME /.local/bin export ZSH = \" $HOME /.oh-my-zsh\" ZSH_THEME = \"robbyrussell\" CASE_SENSITIVE = \"true\" plugins =( sudo fzf vi-mode colorize colored-man-pages zsh-interactive-cd zsh-autosuggestions zsh-syntax-highlighting ) source $ZSH /oh-my-zsh.sh # cd ~D ( ~D ) hash -d D = $HOME /Documents hash -d DP = $HOME /Documents/Projects hash -d G = $HOME /GitHub hash -d Gj = $HOME /GitHub/justinsgithub hash -d Gjp = $HOME /GitHub/justinsgithub/portfolio hash -d Gjs = $HOME /GitHub/justinsgithub/static hash -d Gjsd = $HOME /GitHub/justinsgithub/static/docs.justintylers.com hash -d Gjsdd = $HOME /GitHub/justinsgithub/static/docs.justintylers.com/docs alias -g L = '|less' alias cat = \"/home/justin/bin/go/ccat\" alias -g NUL = \"> /dev/null 2>&1\" alias ls = 'ls --color=auto' alias l = \"ls -1\" alias rm = \"mv --force -t ~/.archive\" alias R = \"\\rm -rf\" alias nvim = \" $HOME /bin/nvim-linux64/bin/nvim\" alias vim = \"nvim\" alias mkdir = \"mkdir -pv\" alias python = \"python3\" alias py = \"python3\" alias pyvenv = \"python3 -m venv venv\" alias pinstall = \"pip install\" alias sourcevenv = \"source venv/bin/activate\" alias zshconfig = \"vim ~/.zshrc; zsh\" alias mkserve = \"mkdocs serve\" alias mkbuild = \"mkdocs build\" alias vimconfig = 'vim ~/.config/nvim/init.vim' alias svimconfig = 'vim ~/.SpaceVim.d/init.toml' alias weztermconfig = \"vim ~/.wezterm.lua\" alias promptconfig = \"vim ~/.config/zsh/.oh-my-zsh/custom/themes/my.zsh-theme\" alias linode = \"ssh example@0.0.0.0\" alias rustdocs = \"rustup docs --book\" export NVM_DIR = \" $HOME /.nvm\" [ -s \" $NVM_DIR /nvm.sh\" ] && \\. \" $NVM_DIR /nvm.sh\" # This loads nvm [ -s \" $NVM_DIR /bash_completion\" ] && \\. \" $NVM_DIR /bash_completion\" # This loads nvm bash_completion zsh loop for x in 1 2 3 4 5 6 7 8 9 ; echo $x copy a file copyfile MY-FILE","title":"Advanced"},{"location":"linux/linux-programs/#advanced-linux-commands","text":"","title":"Advanced Linux Commands"},{"location":"linux/linux-programs/#curl","text":"mutipart/form-data post request curl -X POST -F 'name=linuxize' -F 'email=linuxize@example.com' http://localhost.com/contact.php application/x-www-form-urlencoded post request curl -X POST -d 'name=test user1' -d 'email=testuser1@example.com' -d 'company_name=test company' -d 'password=password' http://localhost:8003/register - get request curl -X GET http://127.0.0.1:8000/items/ -H \"accept: application/json\"","title":"curl"},{"location":"linux/linux-programs/#sed","text":"stream editor double space lines in file sed '/^$/d;G'","title":"Sed"},{"location":"linux/linux-programs/#zsh","text":"the z shell my current prompt PS1 = \"%F{yellow}%~ %F{red} =%F{yellow}(%#)%F{red}=> \" RPS1 = \"%F{green}%D %F{white}%T %F{red}%n%{ $reset_color %}@%F{blue}%m %h%F{yellow} %Bjobs%b %j\" my zsh config export PATH = $PATH :/usr/local/go/bin: $HOME /.local/bin export ZSH = \" $HOME /.oh-my-zsh\" ZSH_THEME = \"robbyrussell\" CASE_SENSITIVE = \"true\" plugins =( sudo fzf vi-mode colorize colored-man-pages zsh-interactive-cd zsh-autosuggestions zsh-syntax-highlighting ) source $ZSH /oh-my-zsh.sh # cd ~D ( ~D ) hash -d D = $HOME /Documents hash -d DP = $HOME /Documents/Projects hash -d G = $HOME /GitHub hash -d Gj = $HOME /GitHub/justinsgithub hash -d Gjp = $HOME /GitHub/justinsgithub/portfolio hash -d Gjs = $HOME /GitHub/justinsgithub/static hash -d Gjsd = $HOME /GitHub/justinsgithub/static/docs.justintylers.com hash -d Gjsdd = $HOME /GitHub/justinsgithub/static/docs.justintylers.com/docs alias -g L = '|less' alias cat = \"/home/justin/bin/go/ccat\" alias -g NUL = \"> /dev/null 2>&1\" alias ls = 'ls --color=auto' alias l = \"ls -1\" alias rm = \"mv --force -t ~/.archive\" alias R = \"\\rm -rf\" alias nvim = \" $HOME /bin/nvim-linux64/bin/nvim\" alias vim = \"nvim\" alias mkdir = \"mkdir -pv\" alias python = \"python3\" alias py = \"python3\" alias pyvenv = \"python3 -m venv venv\" alias pinstall = \"pip install\" alias sourcevenv = \"source venv/bin/activate\" alias zshconfig = \"vim ~/.zshrc; zsh\" alias mkserve = \"mkdocs serve\" alias mkbuild = \"mkdocs build\" alias vimconfig = 'vim ~/.config/nvim/init.vim' alias svimconfig = 'vim ~/.SpaceVim.d/init.toml' alias weztermconfig = \"vim ~/.wezterm.lua\" alias promptconfig = \"vim ~/.config/zsh/.oh-my-zsh/custom/themes/my.zsh-theme\" alias linode = \"ssh example@0.0.0.0\" alias rustdocs = \"rustup docs --book\" export NVM_DIR = \" $HOME /.nvm\" [ -s \" $NVM_DIR /nvm.sh\" ] && \\. \" $NVM_DIR /nvm.sh\" # This loads nvm [ -s \" $NVM_DIR /bash_completion\" ] && \\. \" $NVM_DIR /bash_completion\" # This loads nvm bash_completion zsh loop for x in 1 2 3 4 5 6 7 8 9 ; echo $x copy a file copyfile MY-FILE","title":"zsh"},{"location":"linux/zsh/","text":"Zsh \u00b6 the z shell scripts \u00b6 git \u00b6 #!/usr/bin/zsh source venv/bin/activate mkdocs build cp CNAME docs/CNAME cp README.md docs/README.md git add . git commit -m \"auto deploy\" git push loop \u00b6 for x in 1 2 3 4 5 6 7 8 9 ; echo $x ohmyzsh \u00b6 plugins \u00b6 copybuffer copies current command line content with a short cut (ctrl + o) copy file copyfile MY-FILE config \u00b6 export PATH = $PATH :/usr/local/go/bin: $HOME /.local/bin export ZSH = \" $HOME /.oh-my-zsh\" ZSH_THEME = \"robbyrussell\" CASE_SENSITIVE = \"true\" plugins =( sudo fzf vi-mode colorize colored-man-pages zsh-interactive-cd zsh-autosuggestions zsh-syntax-highlighting ) source $ZSH /oh-my-zsh.sh # cd ~D ( ~D ) hash -d D = $HOME /Documents hash -d DP = $HOME /Documents/Projects hash -d G = $HOME /GitHub hash -d Gj = $HOME /GitHub/justinsgithub hash -d Gjp = $HOME /GitHub/justinsgithub/portfolio hash -d Gjs = $HOME /GitHub/justinsgithub/static hash -d Gjsd = $HOME /GitHub/justinsgithub/static/docs.justintylers.com hash -d Gjsdd = $HOME /GitHub/justinsgithub/static/docs.justintylers.com/docs alias -g L = '|less' alias cat = \"/home/justin/bin/go/ccat\" alias -g NUL = \"> /dev/null 2>&1\" alias ls = 'ls --color=auto' alias l = \"ls -1\" alias rm = \"mv --force -t ~/.archive\" alias R = \"\\rm -rf\" alias nvim = \" $HOME /bin/nvim-linux64/bin/nvim\" alias vim = \"nvim\" alias mkdir = \"mkdir -pv\" alias python = \"python3\" alias py = \"python3\" alias pyvenv = \"python3 -m venv venv\" alias pinstall = \"pip install\" alias sourcevenv = \"source venv/bin/activate\" alias zshconfig = \"vim ~/.zshrc; zsh\" alias mkserve = \"mkdocs serve\" alias mkbuild = \"mkdocs build\" alias vimconfig = 'vim ~/.config/nvim/init.vim' alias svimconfig = 'vim ~/.SpaceVim.d/init.toml' alias weztermconfig = \"vim ~/.wezterm.lua\" alias promptconfig = \"vim ~/.config/zsh/.oh-my-zsh/custom/themes/my.zsh-theme\" alias linode = \"ssh example@0.0.0.0\" alias rustdocs = \"rustup docs --book\" export NVM_DIR = \" $HOME /.nvm\" [ -s \" $NVM_DIR /nvm.sh\" ] && \\. \" $NVM_DIR /nvm.sh\" # This loads nvm [ -s \" $NVM_DIR /bash_completion\" ] && \\. \" $NVM_DIR /bash_completion\" # This loads nvm bash_completion current prompt \u00b6 PS1 = \"%F{yellow}%~ %F{red} =%F{yellow}(%#)%F{red}=> \" RPS1 = \"%F{green}%D %F{white}%T %F{red}%n%{ $reset_color %}@%F{blue}%m %h%F{yellow} %Bjobs%b %j\"","title":"Zsh"},{"location":"linux/zsh/#zsh","text":"the z shell","title":"Zsh"},{"location":"linux/zsh/#scripts","text":"","title":"scripts"},{"location":"linux/zsh/#git","text":"#!/usr/bin/zsh source venv/bin/activate mkdocs build cp CNAME docs/CNAME cp README.md docs/README.md git add . git commit -m \"auto deploy\" git push","title":"git"},{"location":"linux/zsh/#loop","text":"for x in 1 2 3 4 5 6 7 8 9 ; echo $x","title":"loop"},{"location":"linux/zsh/#ohmyzsh","text":"","title":"ohmyzsh"},{"location":"linux/zsh/#plugins","text":"copybuffer copies current command line content with a short cut (ctrl + o) copy file copyfile MY-FILE","title":"plugins"},{"location":"linux/zsh/#config","text":"export PATH = $PATH :/usr/local/go/bin: $HOME /.local/bin export ZSH = \" $HOME /.oh-my-zsh\" ZSH_THEME = \"robbyrussell\" CASE_SENSITIVE = \"true\" plugins =( sudo fzf vi-mode colorize colored-man-pages zsh-interactive-cd zsh-autosuggestions zsh-syntax-highlighting ) source $ZSH /oh-my-zsh.sh # cd ~D ( ~D ) hash -d D = $HOME /Documents hash -d DP = $HOME /Documents/Projects hash -d G = $HOME /GitHub hash -d Gj = $HOME /GitHub/justinsgithub hash -d Gjp = $HOME /GitHub/justinsgithub/portfolio hash -d Gjs = $HOME /GitHub/justinsgithub/static hash -d Gjsd = $HOME /GitHub/justinsgithub/static/docs.justintylers.com hash -d Gjsdd = $HOME /GitHub/justinsgithub/static/docs.justintylers.com/docs alias -g L = '|less' alias cat = \"/home/justin/bin/go/ccat\" alias -g NUL = \"> /dev/null 2>&1\" alias ls = 'ls --color=auto' alias l = \"ls -1\" alias rm = \"mv --force -t ~/.archive\" alias R = \"\\rm -rf\" alias nvim = \" $HOME /bin/nvim-linux64/bin/nvim\" alias vim = \"nvim\" alias mkdir = \"mkdir -pv\" alias python = \"python3\" alias py = \"python3\" alias pyvenv = \"python3 -m venv venv\" alias pinstall = \"pip install\" alias sourcevenv = \"source venv/bin/activate\" alias zshconfig = \"vim ~/.zshrc; zsh\" alias mkserve = \"mkdocs serve\" alias mkbuild = \"mkdocs build\" alias vimconfig = 'vim ~/.config/nvim/init.vim' alias svimconfig = 'vim ~/.SpaceVim.d/init.toml' alias weztermconfig = \"vim ~/.wezterm.lua\" alias promptconfig = \"vim ~/.config/zsh/.oh-my-zsh/custom/themes/my.zsh-theme\" alias linode = \"ssh example@0.0.0.0\" alias rustdocs = \"rustup docs --book\" export NVM_DIR = \" $HOME /.nvm\" [ -s \" $NVM_DIR /nvm.sh\" ] && \\. \" $NVM_DIR /nvm.sh\" # This loads nvm [ -s \" $NVM_DIR /bash_completion\" ] && \\. \" $NVM_DIR /bash_completion\" # This loads nvm bash_completion","title":"config"},{"location":"linux/zsh/#current-prompt","text":"PS1 = \"%F{yellow}%~ %F{red} =%F{yellow}(%#)%F{red}=> \" RPS1 = \"%F{green}%D %F{white}%T %F{red}%n%{ $reset_color %}@%F{blue}%m %h%F{yellow} %Bjobs%b %j\"","title":"current prompt"},{"location":"program-langs/javascript/","text":"JavaScript \u00b6 data types \u00b6 number float infinity -infinity NaN string boolean undefined null binary operators \u00b6 + add - subtract * multiply / divide % remainder < less than > greater then <= less than or equal to >= greater than or equal to == equal to === equal to and same type and 2 truths || 1 truth typeof type of a value ? ternary Important creating bindings with var keyword will make it global let x = 10 ; if ( true ) { let y = 20 ; var z = 30 ; console . log ( x + y + z ); // \u2192 60 } // y is not visible here console . log ( x + z ); // \u2192 40 Important creating functions using a function declaration makes it global because of hoisting console . log ( \"The future says: \" , future ()); // The future says: You'll never have flying cars function future () { return \"You'll never have flying cars\" ; } var let const \u00b6 three ways to create or declare variables they also differ in three ways, use , scope , hoisting the use of a variable declaration is whether the declaration binding can be redeclared or updated scope \u00b6 think of a program as a building the scope of a variable is where in the building the variable can be accessed once it has been declared each declaration has a different range of scope that depends on where they were declared there are three types of scope , global, function, and block var \u00b6 a var declaration can be redeclared and updated like a bin of misc items in your room the items can change and the bin can be relabeled to hold completely new items var bindings have access anywhere in a program \"building\" var can also have function scope, which is as if there is a global medicine and the testing version the testing version can only be accessed inside of the lab functions and do not effect the outside versions however the outside versions can be modified from inside any function, let \u00b6 a let declaration can be updated but not redeclared a let declaration is like a pantry, it can be updated to hold different food items, but its not going to be relabeled to hold different items aside from food const \u00b6 a const declaration is not to be updated or redeclared const is like a bathtub, it will always hold water and not be redeclared to hold anything besides water truthiness \u00b6 boolean, context, coercion type coercion \u00b6 javascript will sometimes change the type of your code before interpreting if its true or not js will interpret 1 as true, 'any string' as true, Boolean('false') as true, 'false' as true 0, '', null, will be false, (falsey value) Danger JavaScript will try it's best to run any code you give it will perform automatic type conversion if necessary this can be an unwanted behavior console . log ( 8 * null ) // \u2192 0 console . log ( \"5\" - 1 ) // \u2192 4 console . log ( \"5\" + 1 ) // \u2192 51 console . log ( \"five\" * 2 ) // \u2192 NaN console . log ( false == 0 ) // \u2192 true ternary operator ? \u00b6 the ternary operator is designed to make quick conditional statements the only operator in javascript that takes 3 operands, the test operand, the truth operand, and the false operand let isThisTrue = true isThisTrue ? console . log ( \"is it true\" ) : console . log ( \"it is not true\" ) : let username = \"justin\" ; username === \"justin\" ? console . log ( \"enter password\" ) : username === \"justinaawd@gmail.com\" ? console . log ( \"enter your password\" ) : username = \"\" ? console . log ( \"please enter username\" ) : console . log ( \"go away\" ); modulus operator % \u00b6 finds the remainder of a division problem good for testing if the solution to a problem is even, such as fizzbuzz console . log ( 1 % 3 ) // \u2192 2 console . log ( 6 % 3 ) // \u2192 0 console . log ( 7 % 4 ) // \u2192 3 nullish coalescing ?? and logical operator || \u00b6 the nullish coalescing operator is new since 2020 the nullish coalescing operator is more accurate than the logical operator tests true / false statements the logical operator will stop checking condition if first statement is true the nullish coalescing operator will stop checking condition if first statement is false these can be used to create short-circuit statements try catch finally \u00b6 statements used to help dealing with bugs try part lets you try a series of statements / functions try { console . log ( 'this will run' ); consol . lo ( 'this misspelling will throw error' ); console . log ( 'this statement will not run because the above statement did not run' ); console . log ( 'nothing else runs' ); } catch ( errorObject ) { console . log ( errorObject ) console . log ( errorObject . name ) console . log ( errorObject . message ) } finally { console . log ( 'this runs no matter what happens above' ); console . log ( 'try catch block finished' ); } let bug = { antennae : false , width : 2 , height : .5 , wings : 2 , legs : 6 , color : 'red' , } try { if ( typeof bug . antennae !== 'boolean' ) throw Error ( 'antennae is not a boolean' ); if ( bug . width > 5 || but . height > 5 ) throw Error ( 'bug too big' ); if ( bug . legs % 2 ) throw Error ( 'legs need to be in pairs' ); if ( ! [ 'red' , 'blue' , 'brown' , 'black' ]. includes ( bug . color )) throw Error ( 'Invalid color' ); } catch ( error ) { console . log ( error . name ) } transpiling \u00b6 developers use software to convert one language to another which is known as transpiling (like translate and compile) the process of compiling a language while transpiling it to something else modern javascript is transpiled so that the newer features can be used in older browsers such as the coalescing operator babel is an example of a tool that does this spread syntax ... \u00b6 an iterable is a list-like object such as an array, that can be iterated through allows a short hand method of performing iterating operations let tasks = [ 'go to work' ]; tasks = [ 'eat breakfast' , ... tasks ]; tasks = [ 'tasks' , ... eat dinner ]; let details = [ 'eggs and bacon' , '8 hours' , 'steak' ]; let tasksWithDetails = [... tasks , ... details ]; Promises \u00b6 a way to make sure something happens, but only if something else has taken place a promise takes in a callback function that will run when the Promise finishes a Promise is similar to a try catch block, but for callback functions a Promise gives us a resolve and reject object you can return a different message depending on if the Promise is resolve or rejected you can use this Promise whenever we want to perform a sequence of action you can run the code you want executed after the promise resolves by using \".then()\" the fetch method is an example of a promise const thisPromise = new Promise ( function ( resolve , reject ){ if ( true === true ){ resolve ( 'resolve message' ) } else { reject ( 'false message' ) } }) thisPromise . then ( function ( message ){ console . log ( message ) } ). then ( function ( message ){ sendToLogs ( message ) } ). catch ( function ( message ){ console . log ( message ); sendToErrors ( message ) : } ). finally ( function (){ console . log ( 'promise finished executing' ) }) Async Await \u00b6 a cleaner syntax for using Promises const thisPromise = new Promise ( function ( resolve , reject ){ if ( true === true ){ resolve ( 'resolve message' ) } else { reject ( 'false message' ) } }) async function thisAsync () { try { const result = await myPromise ; console . log ( result ); } catch ( error ) { console . log ( error ) } finally { console . log ( 'async function for Promise finished' ) } }","title":"Overview"},{"location":"program-langs/javascript/#javascript","text":"","title":"JavaScript"},{"location":"program-langs/javascript/#data-types","text":"number float infinity -infinity NaN string boolean undefined null","title":"data types"},{"location":"program-langs/javascript/#binary-operators","text":"+ add - subtract * multiply / divide % remainder < less than > greater then <= less than or equal to >= greater than or equal to == equal to === equal to and same type and 2 truths || 1 truth typeof type of a value ? ternary Important creating bindings with var keyword will make it global let x = 10 ; if ( true ) { let y = 20 ; var z = 30 ; console . log ( x + y + z ); // \u2192 60 } // y is not visible here console . log ( x + z ); // \u2192 40 Important creating functions using a function declaration makes it global because of hoisting console . log ( \"The future says: \" , future ()); // The future says: You'll never have flying cars function future () { return \"You'll never have flying cars\" ; }","title":"binary operators"},{"location":"program-langs/javascript/#var-let-const","text":"three ways to create or declare variables they also differ in three ways, use , scope , hoisting the use of a variable declaration is whether the declaration binding can be redeclared or updated","title":"var let const"},{"location":"program-langs/javascript/#scope","text":"think of a program as a building the scope of a variable is where in the building the variable can be accessed once it has been declared each declaration has a different range of scope that depends on where they were declared there are three types of scope , global, function, and block","title":"scope"},{"location":"program-langs/javascript/#var","text":"a var declaration can be redeclared and updated like a bin of misc items in your room the items can change and the bin can be relabeled to hold completely new items var bindings have access anywhere in a program \"building\" var can also have function scope, which is as if there is a global medicine and the testing version the testing version can only be accessed inside of the lab functions and do not effect the outside versions however the outside versions can be modified from inside any function,","title":"var"},{"location":"program-langs/javascript/#let","text":"a let declaration can be updated but not redeclared a let declaration is like a pantry, it can be updated to hold different food items, but its not going to be relabeled to hold different items aside from food","title":"let"},{"location":"program-langs/javascript/#const","text":"a const declaration is not to be updated or redeclared const is like a bathtub, it will always hold water and not be redeclared to hold anything besides water","title":"const"},{"location":"program-langs/javascript/#truthiness","text":"boolean, context, coercion","title":"truthiness"},{"location":"program-langs/javascript/#type-coercion","text":"javascript will sometimes change the type of your code before interpreting if its true or not js will interpret 1 as true, 'any string' as true, Boolean('false') as true, 'false' as true 0, '', null, will be false, (falsey value) Danger JavaScript will try it's best to run any code you give it will perform automatic type conversion if necessary this can be an unwanted behavior console . log ( 8 * null ) // \u2192 0 console . log ( \"5\" - 1 ) // \u2192 4 console . log ( \"5\" + 1 ) // \u2192 51 console . log ( \"five\" * 2 ) // \u2192 NaN console . log ( false == 0 ) // \u2192 true","title":"type coercion"},{"location":"program-langs/javascript/#ternary-operator","text":"the ternary operator is designed to make quick conditional statements the only operator in javascript that takes 3 operands, the test operand, the truth operand, and the false operand let isThisTrue = true isThisTrue ? console . log ( \"is it true\" ) : console . log ( \"it is not true\" ) : let username = \"justin\" ; username === \"justin\" ? console . log ( \"enter password\" ) : username === \"justinaawd@gmail.com\" ? console . log ( \"enter your password\" ) : username = \"\" ? console . log ( \"please enter username\" ) : console . log ( \"go away\" );","title":"ternary operator ?"},{"location":"program-langs/javascript/#modulus-operator","text":"finds the remainder of a division problem good for testing if the solution to a problem is even, such as fizzbuzz console . log ( 1 % 3 ) // \u2192 2 console . log ( 6 % 3 ) // \u2192 0 console . log ( 7 % 4 ) // \u2192 3","title":"modulus operator %"},{"location":"program-langs/javascript/#nullish-coalescing-and-logical-operator","text":"the nullish coalescing operator is new since 2020 the nullish coalescing operator is more accurate than the logical operator tests true / false statements the logical operator will stop checking condition if first statement is true the nullish coalescing operator will stop checking condition if first statement is false these can be used to create short-circuit statements","title":"nullish coalescing ?? and logical operator ||"},{"location":"program-langs/javascript/#try-catch-finally","text":"statements used to help dealing with bugs try part lets you try a series of statements / functions try { console . log ( 'this will run' ); consol . lo ( 'this misspelling will throw error' ); console . log ( 'this statement will not run because the above statement did not run' ); console . log ( 'nothing else runs' ); } catch ( errorObject ) { console . log ( errorObject ) console . log ( errorObject . name ) console . log ( errorObject . message ) } finally { console . log ( 'this runs no matter what happens above' ); console . log ( 'try catch block finished' ); } let bug = { antennae : false , width : 2 , height : .5 , wings : 2 , legs : 6 , color : 'red' , } try { if ( typeof bug . antennae !== 'boolean' ) throw Error ( 'antennae is not a boolean' ); if ( bug . width > 5 || but . height > 5 ) throw Error ( 'bug too big' ); if ( bug . legs % 2 ) throw Error ( 'legs need to be in pairs' ); if ( ! [ 'red' , 'blue' , 'brown' , 'black' ]. includes ( bug . color )) throw Error ( 'Invalid color' ); } catch ( error ) { console . log ( error . name ) }","title":"try catch finally"},{"location":"program-langs/javascript/#transpiling","text":"developers use software to convert one language to another which is known as transpiling (like translate and compile) the process of compiling a language while transpiling it to something else modern javascript is transpiled so that the newer features can be used in older browsers such as the coalescing operator babel is an example of a tool that does this","title":"transpiling"},{"location":"program-langs/javascript/#spread-syntax","text":"an iterable is a list-like object such as an array, that can be iterated through allows a short hand method of performing iterating operations let tasks = [ 'go to work' ]; tasks = [ 'eat breakfast' , ... tasks ]; tasks = [ 'tasks' , ... eat dinner ]; let details = [ 'eggs and bacon' , '8 hours' , 'steak' ]; let tasksWithDetails = [... tasks , ... details ];","title":"spread syntax ..."},{"location":"program-langs/javascript/#promises","text":"a way to make sure something happens, but only if something else has taken place a promise takes in a callback function that will run when the Promise finishes a Promise is similar to a try catch block, but for callback functions a Promise gives us a resolve and reject object you can return a different message depending on if the Promise is resolve or rejected you can use this Promise whenever we want to perform a sequence of action you can run the code you want executed after the promise resolves by using \".then()\" the fetch method is an example of a promise const thisPromise = new Promise ( function ( resolve , reject ){ if ( true === true ){ resolve ( 'resolve message' ) } else { reject ( 'false message' ) } }) thisPromise . then ( function ( message ){ console . log ( message ) } ). then ( function ( message ){ sendToLogs ( message ) } ). catch ( function ( message ){ console . log ( message ); sendToErrors ( message ) : } ). finally ( function (){ console . log ( 'promise finished executing' ) })","title":"Promises"},{"location":"program-langs/javascript/#async-await","text":"a cleaner syntax for using Promises const thisPromise = new Promise ( function ( resolve , reject ){ if ( true === true ){ resolve ( 'resolve message' ) } else { reject ( 'false message' ) } }) async function thisAsync () { try { const result = await myPromise ; console . log ( result ); } catch ( error ) { console . log ( error ) } finally { console . log ( 'async function for Promise finished' ) } }","title":"Async Await"},{"location":"program-langs/javascript/code-challenges/","text":"Code Challenges \u00b6 triangle pyramid \u00b6 const loopATriangle = () => { let material = '#' ; let construct = '#' for ( i = 0 ; i < 7 ; i ++ ) { console . log ( construct ) construct += material }; }; loopATriangle () fizzbuzz \u00b6 const fizzbuzz = () => { for ( i = 1 ; i <= 100 ; i ++ ) { if ( i % 3 === 0 && i % 5 === 0 ) { console . log ( 'fizzbuzz' ) } else if ( i % 3 === 0 ) { console . log ( 'fizz' ) } else if ( i % 5 === 0 ) { console . log ( 'buzz' ) } else { console . log ( i ) } }; }; fizzbuzz () chessboard \u00b6 const makeChessboard = ( size ) => { const rows = size / 2 ; const row = ' # # # #\\n\\n# # # # \\n\\n' ; let board = '' ; for ( i = 0 ; i < rows ; i ++ ) { board += row ; }; return board }; let chessBoard = makeChessboard ( 8 ) console . log ( chessBoard ) find the minimum \u00b6 const findMin = ( firstNum , secondNum ) => { if ( firstNum < secondNum ) { return firstNum } else if ( secondNum < firstNum ) { return secondNum } return firstNum ; } console . log ( findMin ( 1 , 3 )) console . log ( findMin ( 3 , 2 )) console . log ( findMin ( 3 , 3 )) count B's and count the char \u00b6 // version 1 const countB = ( aString ) => { Bcount = 0 ; stringLength = aString . length ; for ( let i = 0 ; i <= stringLength ; i ++ ) { if ( aString [ i ] === \"B\" ) { Bcount ++ ; } }; return Bcount }; console . log ( countB ( 'BillyBoB' )) console . log ( countB ( 'silly' )) const countChar = ( aString , aChar ) => { charCount = 0 ; stringLength = aString . length ; for ( let i = 0 ; i <= stringLength ; i ++ ) { if ( aString [ i ] === aChar ) { charCount ++ ; } }; return charCount }; console . log ( countChar ( 'BillyBoB' , 'B' )); console . log ( countChar ( 'silly' , 'i' )); console . log ( countChar ( 'silly' , 'o' )); // version 2 const countB2 = ( aString ) => { return countChar ( aString , 'B' ); }; console . log ( countB2 ( 'BillyBoB' )) console . log ( countB2 ( 'silly' )) sum and range \u00b6 const range = ( start , end , step = 1 ) => { const thisArray = []; if ( step >= 0 ) { for ( let i = start ; i <= end ; i += step ) { thisArray . push ( i ) }; } else { for ( let i = start ; i >= end ; i += step ) { thisArray . push ( i ) }; } return thisArray }; const sum = ( thisArray ) => { let sumOfElements = 0 for ( let i of thisArray ) { sumOfElements += parseInt ( i ); }; return sumOfElements }; console . log ( range ( 1 , 10 )) console . log ( sum ( range ( 1 , 10 ))) console . log ( range ( 1 , 10 , 2 )) console . log ( range ( 5 , 2 , - 1 )) reverse array \u00b6 const reverseArray = thisArray => { const reversedArray = []; for ( let i of thisArray ) { reversedArray . unshift ( i ); } return reversedArray ; }; console . log ( reverseArray ([ 1 , 2 , 3 ])); reverse array in place \u00b6 const reverseArrayInPlace = thisArray => { const oldThisArray = thisArray . slice (); thisArray . length = 0 ; for ( let i of oldThisArray ) { thisArray . unshift ( i ); }; return thisArray }; const onetwothree = [ 1 , 2 , 3 ]; reverseArrayInPlace ( onetwothree ); console . log ( onetwothree );","title":"Code Challenges"},{"location":"program-langs/javascript/code-challenges/#code-challenges","text":"","title":"Code Challenges"},{"location":"program-langs/javascript/code-challenges/#triangle-pyramid","text":"const loopATriangle = () => { let material = '#' ; let construct = '#' for ( i = 0 ; i < 7 ; i ++ ) { console . log ( construct ) construct += material }; }; loopATriangle ()","title":"triangle pyramid"},{"location":"program-langs/javascript/code-challenges/#fizzbuzz","text":"const fizzbuzz = () => { for ( i = 1 ; i <= 100 ; i ++ ) { if ( i % 3 === 0 && i % 5 === 0 ) { console . log ( 'fizzbuzz' ) } else if ( i % 3 === 0 ) { console . log ( 'fizz' ) } else if ( i % 5 === 0 ) { console . log ( 'buzz' ) } else { console . log ( i ) } }; }; fizzbuzz ()","title":"fizzbuzz"},{"location":"program-langs/javascript/code-challenges/#chessboard","text":"const makeChessboard = ( size ) => { const rows = size / 2 ; const row = ' # # # #\\n\\n# # # # \\n\\n' ; let board = '' ; for ( i = 0 ; i < rows ; i ++ ) { board += row ; }; return board }; let chessBoard = makeChessboard ( 8 ) console . log ( chessBoard )","title":"chessboard"},{"location":"program-langs/javascript/code-challenges/#find-the-minimum","text":"const findMin = ( firstNum , secondNum ) => { if ( firstNum < secondNum ) { return firstNum } else if ( secondNum < firstNum ) { return secondNum } return firstNum ; } console . log ( findMin ( 1 , 3 )) console . log ( findMin ( 3 , 2 )) console . log ( findMin ( 3 , 3 ))","title":"find the minimum"},{"location":"program-langs/javascript/code-challenges/#count-bs-and-count-the-char","text":"// version 1 const countB = ( aString ) => { Bcount = 0 ; stringLength = aString . length ; for ( let i = 0 ; i <= stringLength ; i ++ ) { if ( aString [ i ] === \"B\" ) { Bcount ++ ; } }; return Bcount }; console . log ( countB ( 'BillyBoB' )) console . log ( countB ( 'silly' )) const countChar = ( aString , aChar ) => { charCount = 0 ; stringLength = aString . length ; for ( let i = 0 ; i <= stringLength ; i ++ ) { if ( aString [ i ] === aChar ) { charCount ++ ; } }; return charCount }; console . log ( countChar ( 'BillyBoB' , 'B' )); console . log ( countChar ( 'silly' , 'i' )); console . log ( countChar ( 'silly' , 'o' )); // version 2 const countB2 = ( aString ) => { return countChar ( aString , 'B' ); }; console . log ( countB2 ( 'BillyBoB' )) console . log ( countB2 ( 'silly' ))","title":"count B's and count the char"},{"location":"program-langs/javascript/code-challenges/#sum-and-range","text":"const range = ( start , end , step = 1 ) => { const thisArray = []; if ( step >= 0 ) { for ( let i = start ; i <= end ; i += step ) { thisArray . push ( i ) }; } else { for ( let i = start ; i >= end ; i += step ) { thisArray . push ( i ) }; } return thisArray }; const sum = ( thisArray ) => { let sumOfElements = 0 for ( let i of thisArray ) { sumOfElements += parseInt ( i ); }; return sumOfElements }; console . log ( range ( 1 , 10 )) console . log ( sum ( range ( 1 , 10 ))) console . log ( range ( 1 , 10 , 2 )) console . log ( range ( 5 , 2 , - 1 ))","title":"sum and range"},{"location":"program-langs/javascript/code-challenges/#reverse-array","text":"const reverseArray = thisArray => { const reversedArray = []; for ( let i of thisArray ) { reversedArray . unshift ( i ); } return reversedArray ; }; console . log ( reverseArray ([ 1 , 2 , 3 ]));","title":"reverse array"},{"location":"program-langs/javascript/code-challenges/#reverse-array-in-place","text":"const reverseArrayInPlace = thisArray => { const oldThisArray = thisArray . slice (); thisArray . length = 0 ; for ( let i of oldThisArray ) { thisArray . unshift ( i ); }; return thisArray }; const onetwothree = [ 1 , 2 , 3 ]; reverseArrayInPlace ( onetwothree ); console . log ( onetwothree );","title":"reverse array in place"},{"location":"program-langs/javascript/functions/","text":"JavaScript Functions \u00b6 function notation \u00b6 the 3 ways below create the same function function square ( x ) { return x * x ; } let square = function ( x ){ return x * x ; } const square = x => x * x ; the call stack \u00b6 greet(\"Harry\"); runs first, jumps to first line of greet function gives control to console.log returns control to greet function comes to end of function returns control to call stack context console.log(\"Bye\"); function greet ( who ) { console . log ( \"Hello \" + who ); } greet ( \"Harry\" ); // runs first, has to jump up to 1st line of function, line 2 console . log ( \"Bye\" ); // runs second storing the context of the program uses computer memory if call stack grows too large, computer errs err is \"out of stack space\" or \"too much recursion\" blowing the stack \u00b6 Danger this would eventually use up the computer memory going back and forth function chicken() { return egg(); } function egg() { return chicken(); } console.log(chicken() + \" came first.\"); // \u2192 ?? optional arguments \u00b6 ignores the additional true and \"hedgehog\" arguments function square ( x ) { return x * x ; } console . log ( square ( 4 , true , \"hedgehog\" )); // \u2192 16 closure \u00b6 functions can be treated as values and used as variables create bindings to functions just as any other value with var, let, and const function local bindings are recreated everytime they are called we can create bindings to a particular function call to save that instance of a local binding inside of the function call function wrapValue ( n ) { let local = n ; return () => local ; } let wrap1 = wrapValue ( 1 ); let wrap2 = wrapValue ( 2 ); console . log ( wrap1 ()); // \u2192 1 console . log ( wrap2 ()); // \u2192 2 function multiplier ( factor ) { return number => number * factor ; } let twice = multiplier ( 2 ); console . log ( twice ( 5 )); // \u2192 10","title":"Functions"},{"location":"program-langs/javascript/functions/#javascript-functions","text":"","title":"JavaScript Functions"},{"location":"program-langs/javascript/functions/#function-notation","text":"the 3 ways below create the same function function square ( x ) { return x * x ; } let square = function ( x ){ return x * x ; } const square = x => x * x ;","title":"function notation"},{"location":"program-langs/javascript/functions/#the-call-stack","text":"greet(\"Harry\"); runs first, jumps to first line of greet function gives control to console.log returns control to greet function comes to end of function returns control to call stack context console.log(\"Bye\"); function greet ( who ) { console . log ( \"Hello \" + who ); } greet ( \"Harry\" ); // runs first, has to jump up to 1st line of function, line 2 console . log ( \"Bye\" ); // runs second storing the context of the program uses computer memory if call stack grows too large, computer errs err is \"out of stack space\" or \"too much recursion\"","title":"the call stack"},{"location":"program-langs/javascript/functions/#blowing-the-stack","text":"Danger this would eventually use up the computer memory going back and forth function chicken() { return egg(); } function egg() { return chicken(); } console.log(chicken() + \" came first.\"); // \u2192 ??","title":"blowing the stack"},{"location":"program-langs/javascript/functions/#optional-arguments","text":"ignores the additional true and \"hedgehog\" arguments function square ( x ) { return x * x ; } console . log ( square ( 4 , true , \"hedgehog\" )); // \u2192 16","title":"optional arguments"},{"location":"program-langs/javascript/functions/#closure","text":"functions can be treated as values and used as variables create bindings to functions just as any other value with var, let, and const function local bindings are recreated everytime they are called we can create bindings to a particular function call to save that instance of a local binding inside of the function call function wrapValue ( n ) { let local = n ; return () => local ; } let wrap1 = wrapValue ( 1 ); let wrap2 = wrapValue ( 2 ); console . log ( wrap1 ()); // \u2192 1 console . log ( wrap2 ()); // \u2192 2 function multiplier ( factor ) { return number => number * factor ; } let twice = multiplier ( 2 ); console . log ( twice ( 5 )); // \u2192 10","title":"closure"},{"location":"program-langs/javascript/objects/","text":"Classes and Objects \u00b6 mutability \u00b6 the value of 10 will always be 10 the value of string \"cat\" will always be \"cat\" object values can be changed 2 different objects holding the same values are not considered equal let object1 = { value : 10 }; let object2 = object1 ; let object3 = { value : 10 }; console . log ( object1 == object2 ); // \u2192 true console . log ( object1 == object3 ); // \u2192 false object1 . value = 15 ; console . log ( object2 . value ); // \u2192 15 console . log ( object3 . value ); // \u2192 10","title":"Classes & Objects"},{"location":"program-langs/javascript/objects/#classes-and-objects","text":"","title":"Classes and Objects"},{"location":"program-langs/javascript/objects/#mutability","text":"the value of 10 will always be 10 the value of string \"cat\" will always be \"cat\" object values can be changed 2 different objects holding the same values are not considered equal let object1 = { value : 10 }; let object2 = object1 ; let object3 = { value : 10 }; console . log ( object1 == object2 ); // \u2192 true console . log ( object1 == object3 ); // \u2192 false object1 . value = 15 ; console . log ( object2 . value ); // \u2192 15 console . log ( object3 . value ); // \u2192 10","title":"mutability"},{"location":"program-langs/python/code-challenges/","text":"Code Challenges \u00b6 Codewars \u00b6 remove vowels \u00b6 Create a function called shortcut to remove all the lowercase vowels in a given string. def shortcut ( s ): lowercase_vowels = [ 'a' , 'e' , 'i' , 'o' , 'u' ] thisString = s for x in s : if x in lowercase_vowels : thisString = thisString . replace ( x , \"\" ) return thisString # other solutions def shortcut ( s ): return s . translate ( None , 'aeiou' ) # def shortcut ( s ): return '' . join ( c for c in s if c not in 'aeiou' ) # import re def shortcut ( s ): return re . sub ( '[aoeui]' , '' , s ) final grade \u00b6 This function should return a number (final grade). There are four types of final grades: 100 , if a grade for the exam is more than 90 or if a number of completed projects more than 10. 90 , if a grade for the exam is more than 75 and if a number of completed projects is minimum 5. 75 , if a grade for the exam is more than 50 and if a number of completed projects is minimum 2. 0 , in other cases def final_grade ( exam , projects ): grade = 0 if exam > 90 or projects > 10 : grade = 100 elif exam > 75 and projects >= 5 : grade = 90 elif exam > 50 and projects >= 2 : grade = 75 return grade traffic lights \u00b6 You're writing code to control your town's traffic lights. You need a function to handle each change from green, to yellow, to red, and then to green again. Complete the function that takes a string as an argument representing the current state of the light and returns a string representing the state the light should change to. def update_light ( current ): # Your code here. if current == 'green' : return 'yellow' if current == 'yellow' : return 'red' if current == 'red' : return 'green' enough space on bus \u00b6 The Story: Bob is working as a bus driver. However, he has become extremely popular amongst the city's residents. With so many passengers wanting to get aboard his bus, he sometimes has to face the problem of not enough space left on the bus! He wants you to write a simple program telling him if he will be able to fit all the passengers. Task Overview: You have to write a function that accepts three parameters: cap is the amount of people the bus can hold excluding the driver . on is the number of people on the bus excluding the driver . wait is the number of people waiting to get on to the bus excluding the driver . If there is enough space, return 0, and if there isn't, return the number of passengers he can't take. def enough ( cap , on , wait ): # Your code here total_passengers = on + wait if total_passengers <= cap : return 0 return total_passengers - cap ascii total \u00b6 You'll be given a string, and have to return the sum of all characters as an int. The function should be able to handle all ASCII characters. def uni_total ( s ): #your code here ascii_total = 0 for x in s : ascii_total += ord ( x ) return ascii_total unstandardised keypads \u00b6 Solve the horror of unstandardized keypads by providing a function that converts computer input to a number as if it was typed on a phone. def computer_to_phone ( numbers ): #your code here translated_numbers = { \"1\" : \"7\" , \"2\" : \"8\" , \"3\" : \"9\" , \"4\" : \"4\" , \"5\" : \"5\" , \"6\" : \"6\" , \"7\" : \"1\" , \"8\" : \"2\" , \"9\" : \"3\" , \"0\" : \"0\" , } phone_string = '' for num in numbers : phone_string += translated_numbers [ num ] return phone_string compare sum of chars \u00b6 consider all letters uppercase and if string has non letters it equals 0 def compare ( s1 , s2 ): string1val = 0 string2val = 0 if s1 : if s1 . isalpha (): for x in s1 . upper (): string1val += ord ( x ) if s2 : if s2 . isalpha (): for x in s2 . upper (): string2val += ord ( x ) return string1val == string2val move exclamation marks to end \u00b6 Move all exclamation marks to the end of the sentence def remove ( s ): new_sentence = '' for x in s : if not x == '!' : new_sentence += x for x in s : if x == '!' : new_sentence += x return new_sentence remove all ! from end of string \u00b6 def remove ( s ): while s [ - 1 ] == '!' : l = len ( s ) s = s [: l - 1 ] return s series of integers \u00b6 Write a function generateIntegers/generate_integers that accepts a single argument n/$n and generates an array containing the integers from 0 to n/$n inclusive. For example, generateIntegers(3)/generate_integers(3) should return [0, 1, 2, 3]. n/$n can be any integer greater than or equal to 0. def generate_integers ( n ): y = [] for x in range ( n + 1 ): y . append ( x ) return y","title":"Code Challenges"},{"location":"program-langs/python/code-challenges/#code-challenges","text":"","title":"Code Challenges"},{"location":"program-langs/python/code-challenges/#codewars","text":"","title":"Codewars"},{"location":"program-langs/python/code-challenges/#remove-vowels","text":"Create a function called shortcut to remove all the lowercase vowels in a given string. def shortcut ( s ): lowercase_vowels = [ 'a' , 'e' , 'i' , 'o' , 'u' ] thisString = s for x in s : if x in lowercase_vowels : thisString = thisString . replace ( x , \"\" ) return thisString # other solutions def shortcut ( s ): return s . translate ( None , 'aeiou' ) # def shortcut ( s ): return '' . join ( c for c in s if c not in 'aeiou' ) # import re def shortcut ( s ): return re . sub ( '[aoeui]' , '' , s )","title":"remove vowels"},{"location":"program-langs/python/code-challenges/#final-grade","text":"This function should return a number (final grade). There are four types of final grades: 100 , if a grade for the exam is more than 90 or if a number of completed projects more than 10. 90 , if a grade for the exam is more than 75 and if a number of completed projects is minimum 5. 75 , if a grade for the exam is more than 50 and if a number of completed projects is minimum 2. 0 , in other cases def final_grade ( exam , projects ): grade = 0 if exam > 90 or projects > 10 : grade = 100 elif exam > 75 and projects >= 5 : grade = 90 elif exam > 50 and projects >= 2 : grade = 75 return grade","title":"final grade"},{"location":"program-langs/python/code-challenges/#traffic-lights","text":"You're writing code to control your town's traffic lights. You need a function to handle each change from green, to yellow, to red, and then to green again. Complete the function that takes a string as an argument representing the current state of the light and returns a string representing the state the light should change to. def update_light ( current ): # Your code here. if current == 'green' : return 'yellow' if current == 'yellow' : return 'red' if current == 'red' : return 'green'","title":"traffic lights"},{"location":"program-langs/python/code-challenges/#enough-space-on-bus","text":"The Story: Bob is working as a bus driver. However, he has become extremely popular amongst the city's residents. With so many passengers wanting to get aboard his bus, he sometimes has to face the problem of not enough space left on the bus! He wants you to write a simple program telling him if he will be able to fit all the passengers. Task Overview: You have to write a function that accepts three parameters: cap is the amount of people the bus can hold excluding the driver . on is the number of people on the bus excluding the driver . wait is the number of people waiting to get on to the bus excluding the driver . If there is enough space, return 0, and if there isn't, return the number of passengers he can't take. def enough ( cap , on , wait ): # Your code here total_passengers = on + wait if total_passengers <= cap : return 0 return total_passengers - cap","title":"enough space on bus"},{"location":"program-langs/python/code-challenges/#ascii-total","text":"You'll be given a string, and have to return the sum of all characters as an int. The function should be able to handle all ASCII characters. def uni_total ( s ): #your code here ascii_total = 0 for x in s : ascii_total += ord ( x ) return ascii_total","title":"ascii total"},{"location":"program-langs/python/code-challenges/#unstandardised-keypads","text":"Solve the horror of unstandardized keypads by providing a function that converts computer input to a number as if it was typed on a phone. def computer_to_phone ( numbers ): #your code here translated_numbers = { \"1\" : \"7\" , \"2\" : \"8\" , \"3\" : \"9\" , \"4\" : \"4\" , \"5\" : \"5\" , \"6\" : \"6\" , \"7\" : \"1\" , \"8\" : \"2\" , \"9\" : \"3\" , \"0\" : \"0\" , } phone_string = '' for num in numbers : phone_string += translated_numbers [ num ] return phone_string","title":"unstandardised keypads"},{"location":"program-langs/python/code-challenges/#compare-sum-of-chars","text":"consider all letters uppercase and if string has non letters it equals 0 def compare ( s1 , s2 ): string1val = 0 string2val = 0 if s1 : if s1 . isalpha (): for x in s1 . upper (): string1val += ord ( x ) if s2 : if s2 . isalpha (): for x in s2 . upper (): string2val += ord ( x ) return string1val == string2val","title":"compare sum of chars"},{"location":"program-langs/python/code-challenges/#move-exclamation-marks-to-end","text":"Move all exclamation marks to the end of the sentence def remove ( s ): new_sentence = '' for x in s : if not x == '!' : new_sentence += x for x in s : if x == '!' : new_sentence += x return new_sentence","title":"move exclamation marks to end"},{"location":"program-langs/python/code-challenges/#remove-all-from-end-of-string","text":"def remove ( s ): while s [ - 1 ] == '!' : l = len ( s ) s = s [: l - 1 ] return s","title":"remove all ! from end of string"},{"location":"program-langs/python/code-challenges/#series-of-integers","text":"Write a function generateIntegers/generate_integers that accepts a single argument n/$n and generates an array containing the integers from 0 to n/$n inclusive. For example, generateIntegers(3)/generate_integers(3) should return [0, 1, 2, 3]. n/$n can be any integer greater than or equal to 0. def generate_integers ( n ): y = [] for x in range ( n + 1 ): y . append ( x ) return y","title":"series of integers"},{"location":"program-langs/python/data-structures-and-algorithms/","text":"Stacks Queues Deques \u00b6 abstract data types (ADTs) \u00b6 a theoretical concept to specify what kind of data a data structure can hold and what operations are allowed on that data if you were creating a new abstract data type from scratch you could decide the operations when working with ADT we do not need to know how to code it, but how to interact with it in the way we need to 2 styles of ADTs, imperative and functional imperative ADTs \u00b6 mutable / changeable the same ADT can take on different states the order in which operations are executed is important functional ADTs \u00b6 immutable / cannot change separate instance of the ADT for each new state an operation on functional ADTs is on the current state and returns a completely new state the original abstract datatype is never changed advantages \u00b6 abstraction , all the user needs to know is the allowable data types and allowable operations understanding the implementation is not required for the user to make use of data structure consistency, the implementation of the data structure can change as long as the interface to the data structure stays the same this ensures users do not have to change their code data structures (DS) overview \u00b6 concrete implementations of ADTs, that organize and retrieve data stored in memory 1 ADT allowed operation = 1 function in DS class there is often more than 1 way to implement an ADT as a DS stacks \u00b6 stores a collection of items in the order in which they were added like a stack of plates where only the top plate is easy to get out LIFO data structure = last in, first out last element added is first to be removed any data type that can be stored in a list can be stored in a stack limited access data structure because we can only access data from one place common stack operations \u00b6 push(item) = push item to top of stack pop(item) = remove and return the top item peek(item) = return the top item without removing is_empty(item) = return true if the stack is empty count(items) = return number of items in stack the \"top\" does not necessarily mean the top of the stack, just means where the data is inserted and deleted inserting and deleting data happen on the same end applications of the stack \u00b6 inside of computers, we use reverse polish notation for evaluating arithmetic expressions syntax parsing cold stack: in a cpu this contains frames / space for parameters and local variables for each function call that we make used in recursion undo and redo operations in word processors low-level assembly programming text-editor linter, which tells us if we are missing opening or closing symbol reversing the characters in a string recursive data structure, is either empty or consists of a top item and the rest, which is a stack stack example \u00b6 class Stack : def __init__ ( self ): self . items = [] def push ( self , item ): self . items . append ( item ) def pop ( self ): return self . items . pop () def is_empty ( self ): return self . items == [] def match_symbols ( symbol_str ): symbol_pairs = { '(' : ')' , '[' : ']' , '{' : '}' , } openers = symbol_pairs . keys () my_stack = Stack () index = 0 while index < len ( symbol_str ): symbol = symbol_str [ index ] if symbol in openers : my_stack . push ( symbol ) else : # The symbol is a closer # If the Stack is already empty, the symbols are not balanced if my_stack . is_empty (): return False # If there are still items in the Stack, check for a mis-match. else : top_item = my_stack . pop () if symbol != symbol_pairs [ top_item ]: return False index += 1 if my_stack . is_empty (): return True return False # Stack is not empty so symbols were not balanced print ( match_symbols ( '([ {} ])' )) print ( match_symbols ( '(([ {} ]])' )) Queue DS \u00b6 An abstract data structure that stores items in the order in which they were added items are added to the back of the queue and added to the front of the queue a queue ADT is like a line of people waiting for something, people join the line in back and leave from the back FIFO, First In First Out the order in which people join the line is reserved inserting data into a queue is linear time because every item has to shift to the right, one at a time, so each item adds time to move adding to the queue is in constant time because it always takes the same amount of time to pop an item off the queue queue operations & data \u00b6 add to the queue (enqueue) remove from the queue (dequeue) is the queue empty? how many items are in the queue? what is next to be removed? a print queue is a good example of real world implementation, the documents are printed in the order they are sent to the machine a recursive data structure, it is either empty or it consists of a front item and the rest of the queue any data type that can be stored in a list can be stored in a queue limited access, because we can only access the data from 1 place (the front / top of the queue) queue example \u00b6 import random class Queue : def __init__ ( self ): self . items = [] def enqueue ( self , item ): \"\"\" inserts an item at the 0 index in a list running time is 0(n) or linear time because inserting into the 0th index of a list forces all the other items in the list to move one index to the right \"\"\" self . items . insert ( 0 , item ) def dequeue ( self ): \"\"\" returns and removes the front-most item of the Queue, which is represented by the last item in the list The run time is 0(1), or constant time because indexing to the end of a list happens in constant time \"\"\" if self . items : return self . items . pop () return None def peek ( self ): \"\"\" Returns the last item in the list, which represents the front-most item in the Queue The runtime is constant because we are just indexing the last item of the list, and returning the value found there \"\"\" if self . items : return self . items [ - 1 ] return None def size ( self ): \"\"\"returns the size of the Queue, which is represented by the length of the list the runtime is 0(1) because we are simply returning the length \"\"\" return len ( self . items ) def is_empty ( self ): \"\"\" returns a Boolean value based on whether or not the list representing the queue is empty a simple check for equality here will run in constant time\"\"\" return self . items == [] class Job : def __init__ ( self ): self . pages = random . randint ( 1 , 10 ) def check_complete ( self ): return self . pages == 0 def print_page ( self ): if not self . check_complete (): self . pages -= 1 class Printer : def __self__ ( self ): self . current_job = None def get_job ( self , print_queue ): try : self . current_job = print_queue . dequeue () except IndexError : return \"no more jobs to print\" def print_job ( self , job ): while job . pages > 0 : job . print_page () if job . check_complete (): return \"printing complete\" else : return \"an error occured\" job1 = Job () print_q = Queue () printer = Printer () print ( \"job 1 has this many pages \" , job1 . pages ) print_q . enqueue ( job1 ) print_q . enqueue ( job1 ) print ( \"print_q has this many items in queue \" , print_q . size ()) printer . get_job ( print_q ) print ( print_q . items ) dequeue ADT \u00b6 deque = double ended queue an abstract data type that resembles both a stack and a queue items in a deque can be added to and removed from both the back and front operations \u00b6 add to the deque (front and rear) remove from the deque (front and rear) check if the queue is empty which item is at either end FIFO and LIFO \u00b6 can use either FIFO or LIFO or BOTH it is up to the programmer to enforce those qualities at either end of the deck if they choose to do so we can arbitrarily choose which end of the deck we want to be at the front and which we want to be at the rear there is not any runtime advantage from choosing one side over the other side whether we want to add / remove from one side of the list or the other side of the list, it is gonna be in constant runtime or linear runtime, depending which side we choose to be the front any data type that can be stored in a list can be stored in a deck the deque is a limited access data structure because we can only access data from either end (not the middle) the deque datastructure is a common way to check whether a string is a palindrome class Deque : def __init__ ( self ): self . items = [] def add_front ( self , item ): \"\"\"takes item as a paramater and inserts it at the 0th index of the list that is representing the deque the runtime is linear or 0(n) because every time you insert into the front of a list every item needs to shift over one position to the right\"\"\" self . items . insert ( item ) def add_rear ( self , item ): \"\"\"takes an item as a parameter and appends that item to the end of the list that is reperesenting the deque the runtime is constant because appending to the end of a list happens in constant time\"\"\" self . items . append ( item ) def remove_front ( self ): \"\"\"removes and returns the0th index of the list, which represents the front of the Deque the runtime is linear / 0(n) because when we remove the 0th index, all other items on the list have to shift 1 spot to the left\"\"\" if self . items : return self . items . pop ( 0 ) return None def remove_rear ( self ): \"\"\"removes and returns the last item of the list, which represents the rear of a queue the runtime is constant because all we are doing is indexing to the end of the list\"\"\" if self . items : return self . items . pop () return None def peek_front ( self ): \"\"\"returns the value found as 0th index in list representing front of deque, constant time because it is indexing to front of list\"\"\" if self . items : return self . items [ 0 ] return None def peek_rear ( self ): \"\"\"returns the value found as last index in list representing rear of deque, constant time because it is indexing to back of list\"\"\" if self . items : return self . items [ - 1 ] return None def is_empty ( self ): return self . items == [] def size ( self ): return len ( self . items ) def check_palindrome ( my_string ): d = Deque () for x in my_string : d . add_rear ( x ) while d . size () >= 2 : if not d . remove_front () == d . remove_rear (): return False return True print ( check_palindrome ( \"defnot\" )) print ( check_palindrome ( \"racecar\" ))","title":"Class Queue Deque"},{"location":"program-langs/python/data-structures-and-algorithms/#stacks-queues-deques","text":"","title":"Stacks Queues Deques"},{"location":"program-langs/python/data-structures-and-algorithms/#abstract-data-types-adts","text":"a theoretical concept to specify what kind of data a data structure can hold and what operations are allowed on that data if you were creating a new abstract data type from scratch you could decide the operations when working with ADT we do not need to know how to code it, but how to interact with it in the way we need to 2 styles of ADTs, imperative and functional","title":"abstract data types (ADTs)"},{"location":"program-langs/python/data-structures-and-algorithms/#imperative-adts","text":"mutable / changeable the same ADT can take on different states the order in which operations are executed is important","title":"imperative ADTs"},{"location":"program-langs/python/data-structures-and-algorithms/#functional-adts","text":"immutable / cannot change separate instance of the ADT for each new state an operation on functional ADTs is on the current state and returns a completely new state the original abstract datatype is never changed","title":"functional ADTs"},{"location":"program-langs/python/data-structures-and-algorithms/#advantages","text":"abstraction , all the user needs to know is the allowable data types and allowable operations understanding the implementation is not required for the user to make use of data structure consistency, the implementation of the data structure can change as long as the interface to the data structure stays the same this ensures users do not have to change their code","title":"advantages"},{"location":"program-langs/python/data-structures-and-algorithms/#data-structures-ds-overview","text":"concrete implementations of ADTs, that organize and retrieve data stored in memory 1 ADT allowed operation = 1 function in DS class there is often more than 1 way to implement an ADT as a DS","title":"data structures (DS) overview"},{"location":"program-langs/python/data-structures-and-algorithms/#stacks","text":"stores a collection of items in the order in which they were added like a stack of plates where only the top plate is easy to get out LIFO data structure = last in, first out last element added is first to be removed any data type that can be stored in a list can be stored in a stack limited access data structure because we can only access data from one place","title":"stacks"},{"location":"program-langs/python/data-structures-and-algorithms/#common-stack-operations","text":"push(item) = push item to top of stack pop(item) = remove and return the top item peek(item) = return the top item without removing is_empty(item) = return true if the stack is empty count(items) = return number of items in stack the \"top\" does not necessarily mean the top of the stack, just means where the data is inserted and deleted inserting and deleting data happen on the same end","title":"common stack operations"},{"location":"program-langs/python/data-structures-and-algorithms/#applications-of-the-stack","text":"inside of computers, we use reverse polish notation for evaluating arithmetic expressions syntax parsing cold stack: in a cpu this contains frames / space for parameters and local variables for each function call that we make used in recursion undo and redo operations in word processors low-level assembly programming text-editor linter, which tells us if we are missing opening or closing symbol reversing the characters in a string recursive data structure, is either empty or consists of a top item and the rest, which is a stack","title":"applications of the stack"},{"location":"program-langs/python/data-structures-and-algorithms/#stack-example","text":"class Stack : def __init__ ( self ): self . items = [] def push ( self , item ): self . items . append ( item ) def pop ( self ): return self . items . pop () def is_empty ( self ): return self . items == [] def match_symbols ( symbol_str ): symbol_pairs = { '(' : ')' , '[' : ']' , '{' : '}' , } openers = symbol_pairs . keys () my_stack = Stack () index = 0 while index < len ( symbol_str ): symbol = symbol_str [ index ] if symbol in openers : my_stack . push ( symbol ) else : # The symbol is a closer # If the Stack is already empty, the symbols are not balanced if my_stack . is_empty (): return False # If there are still items in the Stack, check for a mis-match. else : top_item = my_stack . pop () if symbol != symbol_pairs [ top_item ]: return False index += 1 if my_stack . is_empty (): return True return False # Stack is not empty so symbols were not balanced print ( match_symbols ( '([ {} ])' )) print ( match_symbols ( '(([ {} ]])' ))","title":"stack example"},{"location":"program-langs/python/data-structures-and-algorithms/#queue-ds","text":"An abstract data structure that stores items in the order in which they were added items are added to the back of the queue and added to the front of the queue a queue ADT is like a line of people waiting for something, people join the line in back and leave from the back FIFO, First In First Out the order in which people join the line is reserved inserting data into a queue is linear time because every item has to shift to the right, one at a time, so each item adds time to move adding to the queue is in constant time because it always takes the same amount of time to pop an item off the queue","title":"Queue DS"},{"location":"program-langs/python/data-structures-and-algorithms/#queue-operations-data","text":"add to the queue (enqueue) remove from the queue (dequeue) is the queue empty? how many items are in the queue? what is next to be removed? a print queue is a good example of real world implementation, the documents are printed in the order they are sent to the machine a recursive data structure, it is either empty or it consists of a front item and the rest of the queue any data type that can be stored in a list can be stored in a queue limited access, because we can only access the data from 1 place (the front / top of the queue)","title":"queue operations &amp; data"},{"location":"program-langs/python/data-structures-and-algorithms/#queue-example","text":"import random class Queue : def __init__ ( self ): self . items = [] def enqueue ( self , item ): \"\"\" inserts an item at the 0 index in a list running time is 0(n) or linear time because inserting into the 0th index of a list forces all the other items in the list to move one index to the right \"\"\" self . items . insert ( 0 , item ) def dequeue ( self ): \"\"\" returns and removes the front-most item of the Queue, which is represented by the last item in the list The run time is 0(1), or constant time because indexing to the end of a list happens in constant time \"\"\" if self . items : return self . items . pop () return None def peek ( self ): \"\"\" Returns the last item in the list, which represents the front-most item in the Queue The runtime is constant because we are just indexing the last item of the list, and returning the value found there \"\"\" if self . items : return self . items [ - 1 ] return None def size ( self ): \"\"\"returns the size of the Queue, which is represented by the length of the list the runtime is 0(1) because we are simply returning the length \"\"\" return len ( self . items ) def is_empty ( self ): \"\"\" returns a Boolean value based on whether or not the list representing the queue is empty a simple check for equality here will run in constant time\"\"\" return self . items == [] class Job : def __init__ ( self ): self . pages = random . randint ( 1 , 10 ) def check_complete ( self ): return self . pages == 0 def print_page ( self ): if not self . check_complete (): self . pages -= 1 class Printer : def __self__ ( self ): self . current_job = None def get_job ( self , print_queue ): try : self . current_job = print_queue . dequeue () except IndexError : return \"no more jobs to print\" def print_job ( self , job ): while job . pages > 0 : job . print_page () if job . check_complete (): return \"printing complete\" else : return \"an error occured\" job1 = Job () print_q = Queue () printer = Printer () print ( \"job 1 has this many pages \" , job1 . pages ) print_q . enqueue ( job1 ) print_q . enqueue ( job1 ) print ( \"print_q has this many items in queue \" , print_q . size ()) printer . get_job ( print_q ) print ( print_q . items )","title":"queue example"},{"location":"program-langs/python/data-structures-and-algorithms/#dequeue-adt","text":"deque = double ended queue an abstract data type that resembles both a stack and a queue items in a deque can be added to and removed from both the back and front","title":"dequeue ADT"},{"location":"program-langs/python/data-structures-and-algorithms/#operations","text":"add to the deque (front and rear) remove from the deque (front and rear) check if the queue is empty which item is at either end","title":"operations"},{"location":"program-langs/python/data-structures-and-algorithms/#fifo-and-lifo","text":"can use either FIFO or LIFO or BOTH it is up to the programmer to enforce those qualities at either end of the deck if they choose to do so we can arbitrarily choose which end of the deck we want to be at the front and which we want to be at the rear there is not any runtime advantage from choosing one side over the other side whether we want to add / remove from one side of the list or the other side of the list, it is gonna be in constant runtime or linear runtime, depending which side we choose to be the front any data type that can be stored in a list can be stored in a deck the deque is a limited access data structure because we can only access data from either end (not the middle) the deque datastructure is a common way to check whether a string is a palindrome class Deque : def __init__ ( self ): self . items = [] def add_front ( self , item ): \"\"\"takes item as a paramater and inserts it at the 0th index of the list that is representing the deque the runtime is linear or 0(n) because every time you insert into the front of a list every item needs to shift over one position to the right\"\"\" self . items . insert ( item ) def add_rear ( self , item ): \"\"\"takes an item as a parameter and appends that item to the end of the list that is reperesenting the deque the runtime is constant because appending to the end of a list happens in constant time\"\"\" self . items . append ( item ) def remove_front ( self ): \"\"\"removes and returns the0th index of the list, which represents the front of the Deque the runtime is linear / 0(n) because when we remove the 0th index, all other items on the list have to shift 1 spot to the left\"\"\" if self . items : return self . items . pop ( 0 ) return None def remove_rear ( self ): \"\"\"removes and returns the last item of the list, which represents the rear of a queue the runtime is constant because all we are doing is indexing to the end of the list\"\"\" if self . items : return self . items . pop () return None def peek_front ( self ): \"\"\"returns the value found as 0th index in list representing front of deque, constant time because it is indexing to front of list\"\"\" if self . items : return self . items [ 0 ] return None def peek_rear ( self ): \"\"\"returns the value found as last index in list representing rear of deque, constant time because it is indexing to back of list\"\"\" if self . items : return self . items [ - 1 ] return None def is_empty ( self ): return self . items == [] def size ( self ): return len ( self . items ) def check_palindrome ( my_string ): d = Deque () for x in my_string : d . add_rear ( x ) while d . size () >= 2 : if not d . remove_front () == d . remove_rear (): return False return True print ( check_palindrome ( \"defnot\" )) print ( check_palindrome ( \"racecar\" ))","title":"FIFO and LIFO"},{"location":"program-langs/python/dsa/","text":"Data Structures & Algorithms \u00b6 stacks \u00b6 understanding stacks \u00b6 a data structure in which all insertions and deletions are made at one end, called the top of the stack LIFO data structure: last in, first out common stack operations: push(item): push item to top of the stack pop(item): remove and return top item peek(): return top item without removing it is_empty(): return true if the stack is empty common stack applications: reverse polish notation for evaluating arithmetic expressions syntax parsing cold stack: space for parameter and local variables is created used in recursion undo and redo operations in word processors low-level assembly programming stack class \u00b6 reverse a string \u00b6 2D list \u00b6 understand 2D lists \u00b6 maze as a 2D list \u00b6 maze from text file \u00b6 depth-first search \u00b6 queue \u00b6 breadth-first search \u00b6 priority queue \u00b6 A * search \u00b6","title":"Data Structures & Algos"},{"location":"program-langs/python/dsa/#data-structures-algorithms","text":"","title":"Data Structures &amp; Algorithms"},{"location":"program-langs/python/dsa/#stacks","text":"","title":"stacks"},{"location":"program-langs/python/dsa/#understanding-stacks","text":"a data structure in which all insertions and deletions are made at one end, called the top of the stack LIFO data structure: last in, first out common stack operations: push(item): push item to top of the stack pop(item): remove and return top item peek(): return top item without removing it is_empty(): return true if the stack is empty common stack applications: reverse polish notation for evaluating arithmetic expressions syntax parsing cold stack: space for parameter and local variables is created used in recursion undo and redo operations in word processors low-level assembly programming","title":"understanding stacks"},{"location":"program-langs/python/dsa/#stack-class","text":"","title":"stack class"},{"location":"program-langs/python/dsa/#reverse-a-string","text":"","title":"reverse a string"},{"location":"program-langs/python/dsa/#2d-list","text":"","title":"2D list"},{"location":"program-langs/python/dsa/#understand-2d-lists","text":"","title":"understand 2D lists"},{"location":"program-langs/python/dsa/#maze-as-a-2d-list","text":"","title":"maze as a 2D list"},{"location":"program-langs/python/dsa/#maze-from-text-file","text":"","title":"maze from text file"},{"location":"program-langs/python/dsa/#depth-first-search","text":"","title":"depth-first search"},{"location":"program-langs/python/dsa/#queue","text":"","title":"queue"},{"location":"program-langs/python/dsa/#breadth-first-search","text":"","title":"breadth-first search"},{"location":"program-langs/python/dsa/#priority-queue","text":"","title":"priority queue"},{"location":"program-langs/python/dsa/#a-search","text":"","title":"A* search"},{"location":"program-langs/python/recursion/","text":"Python Recursion \u00b6 intro \u00b6 concept \u00b6 how often is recursion used?: in terms of day to day development the amount you use recursion will vary by context some developers may make little or no explicit use of it for others it will be a mainstay recursion is fundamental of the very fabric of computing common applications in modern computing: passing technical interviews for software development jobs traversing hierarchical data structures, such as DOM tree, XML, file systems many powerful algorithms use recursion, such as quicksort, depth-first search data mining using web crawlers importance \u00b6 uses of recursion in modern computing: used in compilers and linkers in the software build process evaluation of arithmetic expressions database design and information retrieval most modern programming languages support recursion solving any non-trivial problem in computing involves finding ways to break complexity down into simple parts, recursion is excellent for this fundamentals \u00b6 classic recursive algorithms \u00b6 practice writing recursive algorithms \u00b6 sorting data \u00b6 data traversal \u00b6 optimizing recursion \u00b6 drawing fractals \u00b6 Towers of Hanoi \u00b6 recursion vs iteration \u00b6","title":"Recursion"},{"location":"program-langs/python/recursion/#python-recursion","text":"","title":"Python Recursion"},{"location":"program-langs/python/recursion/#intro","text":"","title":"intro"},{"location":"program-langs/python/recursion/#concept","text":"how often is recursion used?: in terms of day to day development the amount you use recursion will vary by context some developers may make little or no explicit use of it for others it will be a mainstay recursion is fundamental of the very fabric of computing common applications in modern computing: passing technical interviews for software development jobs traversing hierarchical data structures, such as DOM tree, XML, file systems many powerful algorithms use recursion, such as quicksort, depth-first search data mining using web crawlers","title":"concept"},{"location":"program-langs/python/recursion/#importance","text":"uses of recursion in modern computing: used in compilers and linkers in the software build process evaluation of arithmetic expressions database design and information retrieval most modern programming languages support recursion solving any non-trivial problem in computing involves finding ways to break complexity down into simple parts, recursion is excellent for this","title":"importance"},{"location":"program-langs/python/recursion/#fundamentals","text":"","title":"fundamentals"},{"location":"program-langs/python/recursion/#classic-recursive-algorithms","text":"","title":"classic recursive algorithms"},{"location":"program-langs/python/recursion/#practice-writing-recursive-algorithms","text":"","title":"practice writing recursive algorithms"},{"location":"program-langs/python/recursion/#sorting-data","text":"","title":"sorting data"},{"location":"program-langs/python/recursion/#data-traversal","text":"","title":"data traversal"},{"location":"program-langs/python/recursion/#optimizing-recursion","text":"","title":"optimizing recursion"},{"location":"program-langs/python/recursion/#drawing-fractals","text":"","title":"drawing fractals"},{"location":"program-langs/python/recursion/#towers-of-hanoi","text":"","title":"Towers of Hanoi"},{"location":"program-langs/python/recursion/#recursion-vs-iteration","text":"","title":"recursion vs iteration"},{"location":"program-langs/rust/","text":"Rust \u00b6 a modern, low-level, statically typed programming language Rust terms \u00b6 panic ( when a program exits with an error it is considered to panic ) keywords \u00b6 and their functionality as - perform primitive casting, disambiguate the specific trait containing an item, or rename items in use and extern crate statements async - return a Future instead of blocking the current thread await - suspend execution until the result of a Future is ready break - exit a loop immediately const - define constant items or constant raw pointers continue - continue to the next loop iteration crate - link an external crate or a macro variable representing the crate in which the macro is defined dyn - dynamic dispatch to a trait object else - fallback for if and if let control flow constructs enum - define an enumeration extern - link an external crate, function, or variable false - Boolean false literal fn - define a function or the function pointer type for - loop over items from an iterator, implement a trait, or specify a higher-ranked lifetime if - branch based on the result of a conditional expression impl - implement inherent or trait functionality in - part of for loop syntax let - bind a variable loop - loop unconditionally match - match a value to patterns mod - define a module move - make a closure take ownership of all its captures mut - denote mutability in references, raw pointers, or pattern bindings pub - denote public visibility in struct fields, impl blocks, or modules ref - bind by reference return - return from function Self - a type alias for the type we are defining or implementing self - method subject or current module static - global variable or lifetime lasting the entire program execution struct - define a structure super - parent module of the current module trait - define a trait true - Boolean true literal type - define a type alias or associated type union - define a union and is only a keyword when used in a union declaration unsafe - denote unsafe code, functions, traits, or implementations use - bring symbols into scope where - denote clauses that constrain a type while - loop conditionally based on the result of an expression reserved words \u00b6 keywords not yet implemented abstract become box do final macro override priv try typeof unsized virtual yield","title":"Overview"},{"location":"program-langs/rust/#rust","text":"a modern, low-level, statically typed programming language","title":"Rust"},{"location":"program-langs/rust/#rust-terms","text":"panic ( when a program exits with an error it is considered to panic )","title":"Rust terms"},{"location":"program-langs/rust/#keywords","text":"and their functionality as - perform primitive casting, disambiguate the specific trait containing an item, or rename items in use and extern crate statements async - return a Future instead of blocking the current thread await - suspend execution until the result of a Future is ready break - exit a loop immediately const - define constant items or constant raw pointers continue - continue to the next loop iteration crate - link an external crate or a macro variable representing the crate in which the macro is defined dyn - dynamic dispatch to a trait object else - fallback for if and if let control flow constructs enum - define an enumeration extern - link an external crate, function, or variable false - Boolean false literal fn - define a function or the function pointer type for - loop over items from an iterator, implement a trait, or specify a higher-ranked lifetime if - branch based on the result of a conditional expression impl - implement inherent or trait functionality in - part of for loop syntax let - bind a variable loop - loop unconditionally match - match a value to patterns mod - define a module move - make a closure take ownership of all its captures mut - denote mutability in references, raw pointers, or pattern bindings pub - denote public visibility in struct fields, impl blocks, or modules ref - bind by reference return - return from function Self - a type alias for the type we are defining or implementing self - method subject or current module static - global variable or lifetime lasting the entire program execution struct - define a structure super - parent module of the current module trait - define a trait true - Boolean true literal type - define a type alias or associated type union - define a union and is only a keyword when used in a union declaration unsafe - denote unsafe code, functions, traits, or implementations use - bring symbols into scope where - denote clauses that constrain a type while - loop conditionally based on the result of an expression","title":"keywords"},{"location":"program-langs/rust/#reserved-words","text":"keywords not yet implemented abstract become box do final macro override priv try typeof unsized virtual yield","title":"reserved words"},{"location":"program-langs/rust/basics/","text":"Rust Programming Basics \u00b6 variables \u00b6 immutable by default Rust automatically types variables Rust encourages favoring immutability once variable is immutable, or a value is bound to variable name, value cannot be changed Rust catches immutability errors at compile-time use mut to create a mutable variable // throws error because immutable variable cannot be assigned to 5 fn main () { let x = 5 ; // rust automatically assigns 5 to int type println! ( \"The value of x is: {}\" , x ); x = 6 ; println! ( \"The value of x is now: {}\" , x ); } // to make a mutable variable fn main () { let mut x = 5 ; println! ( \"The value of x is: {}\" , x ); x = 6 ; println! ( \"The value of x is now: {}\" , x ); } making a variable mutable can make code more convenient to write when using large data structures, mutating an instance in place may be faster than copying and returning newly allocated instances with smaller data structures, creating new instances and writing in a more functional programming style may be easier to think through, so lower performance might be worth the mental gain variables vs constants \u00b6 cannot use mut with constants constants are by default and always immutable constants are declared with const instead of let constant type values must be annotated naming convention for constants is to use all uppercase with underscores between words Rust compiler can evaluate a limited set of operations at compile time constants are valid for the entire time a program runs, within the scope they were declared in // example const const SECONDS_IN_WEEK : u32 = 60 * 60 * 24 * 7 ; shadowing \u00b6 shadowing is declaring a new variable with the same name as a previous variable shadowing allows making transformations to a variable but still keeping it immutable afterwards fn main () { let x = 5 ; let x = x + 1 ; { let x = x * 2 ; println! ( \"The value of x in the inner scope is: {}\" , x ); } println! ( \"The value of x is: {}\" , x ); } // \u2192 The value of x in the inner scope is: 12 // \u2192 The value of x is: 6 shadowing allows changing a variables type, while using mut does not example if we wanted to get the users input for preffered spaces in place of tabs fn main { // this is fine let spaces1 = ' ' ; let spaces1 = spaces . len (); // this is not fine let mut spaces2 = ' ' ; spaces2 = spaces . len (); } functions \u00b6 overview \u00b6 main is one of the most important functions in Rust and the entry point of many programs fn keyword allows the declaration of new functions Rust code uses snake case convention for function and variable names snake case means all letters lowercase and an underscore in between words ( this_variable ) functions start with fn and curly brackets tell the compiler where the function starts and ends functions can be defined before or after where they are called functions can have parameters parameters are special variables that are apart of a functions signature in function signatures the type of each parameter must be declared required type declations in parameters means the compiler almost never needs the type annotated elsewhere in the code fn main () { println! ( \"Hello, world!\" ); example_function ( 5 ); print_labeled_measurement ( 5 , 'h' ); } fn example_function ( x : i32 ) { println! ( \"Example function.\" ); println! ( \"The value of x is: {}\" , x ); } fn print_labeled_measurement ( value : i32 , unit_label : char ) { println! ( \"The measurement is: {}{}\" , value , unit_label ); } function bodies \u00b6 function bodies are made up of a series of statements that optionally end in an expression statements are instructions that perform some action and do not return a value expressions evaluate to a resulting value function definitions are statements calling a function is an expression since statements do not return a value they cannot be assigned to a variable because there would be nothing to bind to this is different from languages such as c and ruby fn five () -> i32 { 5 // expression } fn plus_one ( x : i32 ) -> i32 { x + 1 // expression } fn main () { // statements because they do not return values let x = five (); let z = plus_one ( 5 ); let y = 6 ; } - most functions return the last expression implicitely conditions \u00b6 the different blocks of code in if statements are sometimes called arms condition on the code must be a bool implicit if statements to check if a number exists do not work in Rust a let statement can be assigned to the value of an if statement fn main () { let condition = true ; let this_number = if condition { 5 } else { 6 }; println! ( \"The value of this_number is: {}\" , this_number ); let number_five = 5 ; let under_five = if number_five < 5 { true } else { false }; println! ( \"The value of under_five is: {}\" , under_five ); if number != 0 { println! ( \"number was something other than zero\" ); } // -> this is fine if number { println! ( \"number was three\" ); } // -> throws error because 3 is an integer and not a bool let number_six = 6 ; if number_six % 4 == 0 { println! ( \"number is divisible by 4\" ); } else if number_six % 3 == 0 { println! ( \"number is divisible by 3\" ); } else if number_six % 2 == 0 { println! ( \"number is divisible by 2\" ); } else { println! ( \"number is not divisible by 4, 3, or 2\" ); } } loops \u00b6 an endless loop fn main (){ println! ( \"oops\" ); endless_loop () } fn endless_loop () { let mut count = 0 ; loop { println! ( \"count again! {}\" , count ); count = count + 1 } } - break and continue breakout of the innermost loop they are in - use a loop label for an outer loop and specify it with the above keywords to change this behavior let mut count = 0 ; ' counting_up : loop { println! ( \"count = {}\" , count ); let mut remaining = 10 ; loop { println! ( \"remaining = {}\" , remaining ); if remaining == 9 { break ; } if count == 2 { break 'counting_up ; } remaining -= 1 ; } count += 1 ; } println! ( \"End count = {}\" , count ); returning values \u00b6 one use of a loop is to keep retrying an operation that might fail a loop could be use to keep checking on if a thread has completed it's job to pass the result of the loop to the rest of the code return the value after the break expression fn main () { let mut counter = 0 ; let result = loop { counter += 1 ; if counter == 10 { break counter * 2 ; } }; println! ( \"The result is {}\" , result ); } while loop \u00b6 fn main () { let mut number = 3 ; while number != 0 { println! ( \"{}!\" , number ); number -= 1 ; } println! ( \"LIFTOFF!!!\" ); } for loop a collection \u00b6 looping through a collection with a for loop is most likely better than using a while loop a for loop is safer and more concise than a while loop for going through a collection fn main () { let a = [ 10 , 20 , 30 , 40 , 50 ]; for element in a { println! ( \"the value is: {}\" , element ); } } - a Range is a standard library type that generates all numbers from n1 to n2 non inclusive - (1..4) is 1 2 3 fn main () { for number in ( 1 .. 4 ). rev () { println! ( \"{}!\" , number ); } println! ( \"LIFTOFF!!!\" ); }","title":"VFCL"},{"location":"program-langs/rust/basics/#rust-programming-basics","text":"","title":"Rust Programming Basics"},{"location":"program-langs/rust/basics/#variables","text":"immutable by default Rust automatically types variables Rust encourages favoring immutability once variable is immutable, or a value is bound to variable name, value cannot be changed Rust catches immutability errors at compile-time use mut to create a mutable variable // throws error because immutable variable cannot be assigned to 5 fn main () { let x = 5 ; // rust automatically assigns 5 to int type println! ( \"The value of x is: {}\" , x ); x = 6 ; println! ( \"The value of x is now: {}\" , x ); } // to make a mutable variable fn main () { let mut x = 5 ; println! ( \"The value of x is: {}\" , x ); x = 6 ; println! ( \"The value of x is now: {}\" , x ); } making a variable mutable can make code more convenient to write when using large data structures, mutating an instance in place may be faster than copying and returning newly allocated instances with smaller data structures, creating new instances and writing in a more functional programming style may be easier to think through, so lower performance might be worth the mental gain","title":"variables"},{"location":"program-langs/rust/basics/#variables-vs-constants","text":"cannot use mut with constants constants are by default and always immutable constants are declared with const instead of let constant type values must be annotated naming convention for constants is to use all uppercase with underscores between words Rust compiler can evaluate a limited set of operations at compile time constants are valid for the entire time a program runs, within the scope they were declared in // example const const SECONDS_IN_WEEK : u32 = 60 * 60 * 24 * 7 ;","title":"variables vs constants"},{"location":"program-langs/rust/basics/#shadowing","text":"shadowing is declaring a new variable with the same name as a previous variable shadowing allows making transformations to a variable but still keeping it immutable afterwards fn main () { let x = 5 ; let x = x + 1 ; { let x = x * 2 ; println! ( \"The value of x in the inner scope is: {}\" , x ); } println! ( \"The value of x is: {}\" , x ); } // \u2192 The value of x in the inner scope is: 12 // \u2192 The value of x is: 6 shadowing allows changing a variables type, while using mut does not example if we wanted to get the users input for preffered spaces in place of tabs fn main { // this is fine let spaces1 = ' ' ; let spaces1 = spaces . len (); // this is not fine let mut spaces2 = ' ' ; spaces2 = spaces . len (); }","title":"shadowing"},{"location":"program-langs/rust/basics/#functions","text":"","title":"functions"},{"location":"program-langs/rust/basics/#overview","text":"main is one of the most important functions in Rust and the entry point of many programs fn keyword allows the declaration of new functions Rust code uses snake case convention for function and variable names snake case means all letters lowercase and an underscore in between words ( this_variable ) functions start with fn and curly brackets tell the compiler where the function starts and ends functions can be defined before or after where they are called functions can have parameters parameters are special variables that are apart of a functions signature in function signatures the type of each parameter must be declared required type declations in parameters means the compiler almost never needs the type annotated elsewhere in the code fn main () { println! ( \"Hello, world!\" ); example_function ( 5 ); print_labeled_measurement ( 5 , 'h' ); } fn example_function ( x : i32 ) { println! ( \"Example function.\" ); println! ( \"The value of x is: {}\" , x ); } fn print_labeled_measurement ( value : i32 , unit_label : char ) { println! ( \"The measurement is: {}{}\" , value , unit_label ); }","title":"overview"},{"location":"program-langs/rust/basics/#function-bodies","text":"function bodies are made up of a series of statements that optionally end in an expression statements are instructions that perform some action and do not return a value expressions evaluate to a resulting value function definitions are statements calling a function is an expression since statements do not return a value they cannot be assigned to a variable because there would be nothing to bind to this is different from languages such as c and ruby fn five () -> i32 { 5 // expression } fn plus_one ( x : i32 ) -> i32 { x + 1 // expression } fn main () { // statements because they do not return values let x = five (); let z = plus_one ( 5 ); let y = 6 ; } - most functions return the last expression implicitely","title":"function bodies"},{"location":"program-langs/rust/basics/#conditions","text":"the different blocks of code in if statements are sometimes called arms condition on the code must be a bool implicit if statements to check if a number exists do not work in Rust a let statement can be assigned to the value of an if statement fn main () { let condition = true ; let this_number = if condition { 5 } else { 6 }; println! ( \"The value of this_number is: {}\" , this_number ); let number_five = 5 ; let under_five = if number_five < 5 { true } else { false }; println! ( \"The value of under_five is: {}\" , under_five ); if number != 0 { println! ( \"number was something other than zero\" ); } // -> this is fine if number { println! ( \"number was three\" ); } // -> throws error because 3 is an integer and not a bool let number_six = 6 ; if number_six % 4 == 0 { println! ( \"number is divisible by 4\" ); } else if number_six % 3 == 0 { println! ( \"number is divisible by 3\" ); } else if number_six % 2 == 0 { println! ( \"number is divisible by 2\" ); } else { println! ( \"number is not divisible by 4, 3, or 2\" ); } }","title":"conditions"},{"location":"program-langs/rust/basics/#loops","text":"an endless loop fn main (){ println! ( \"oops\" ); endless_loop () } fn endless_loop () { let mut count = 0 ; loop { println! ( \"count again! {}\" , count ); count = count + 1 } } - break and continue breakout of the innermost loop they are in - use a loop label for an outer loop and specify it with the above keywords to change this behavior let mut count = 0 ; ' counting_up : loop { println! ( \"count = {}\" , count ); let mut remaining = 10 ; loop { println! ( \"remaining = {}\" , remaining ); if remaining == 9 { break ; } if count == 2 { break 'counting_up ; } remaining -= 1 ; } count += 1 ; } println! ( \"End count = {}\" , count );","title":"loops"},{"location":"program-langs/rust/basics/#returning-values","text":"one use of a loop is to keep retrying an operation that might fail a loop could be use to keep checking on if a thread has completed it's job to pass the result of the loop to the rest of the code return the value after the break expression fn main () { let mut counter = 0 ; let result = loop { counter += 1 ; if counter == 10 { break counter * 2 ; } }; println! ( \"The result is {}\" , result ); }","title":"returning values"},{"location":"program-langs/rust/basics/#while-loop","text":"fn main () { let mut number = 3 ; while number != 0 { println! ( \"{}!\" , number ); number -= 1 ; } println! ( \"LIFTOFF!!!\" ); }","title":"while loop"},{"location":"program-langs/rust/basics/#for-loop-a-collection","text":"looping through a collection with a for loop is most likely better than using a while loop a for loop is safer and more concise than a while loop for going through a collection fn main () { let a = [ 10 , 20 , 30 , 40 , 50 ]; for element in a { println! ( \"the value is: {}\" , element ); } } - a Range is a standard library type that generates all numbers from n1 to n2 non inclusive - (1..4) is 1 2 3 fn main () { for number in ( 1 .. 4 ). rev () { println! ( \"{}!\" , number ); } println! ( \"LIFTOFF!!!\" ); }","title":"for loop a collection"},{"location":"program-langs/rust/code-examples/","text":"Code Examples \u00b6 formatting text \u00b6 fn main () { println! ( \"This is simply println! to the console\" ); println! ( \"{} lang uses curly brackets for placeholders {} \" , \"Rust\" , \"like using f with python\" ); println! ( \"Rust {1} {0} postional {2} and {1} {0} named {2}\" , \"use\" , \"can\" , \"parameters\" ); println! ( \"My name is {name} and i {activity}\" , name = \"Justin\" , activity = \"code\" ); // traits println! ( \"Binary: {:b} Hex: {:x} Octal: {:o}\" , 1 , 1 , 1 ); println! ( \"Binary: {:b} Hex: {:x} Octal: {:o}\" , 5 , 5 , 5 ); println! ( \"Binary: {:b} Hex: {:x} Octal: {:o}\" , 10 , 10 , 10 ); // debug trait println! ( \"{:?}\" , ( 12 , true , \"hello\" )); // basic math println! ( \"10 + 10 = {}\" , 10 + 10 ); }","title":"Code Examples"},{"location":"program-langs/rust/code-examples/#code-examples","text":"","title":"Code Examples"},{"location":"program-langs/rust/code-examples/#formatting-text","text":"fn main () { println! ( \"This is simply println! to the console\" ); println! ( \"{} lang uses curly brackets for placeholders {} \" , \"Rust\" , \"like using f with python\" ); println! ( \"Rust {1} {0} postional {2} and {1} {0} named {2}\" , \"use\" , \"can\" , \"parameters\" ); println! ( \"My name is {name} and i {activity}\" , name = \"Justin\" , activity = \"code\" ); // traits println! ( \"Binary: {:b} Hex: {:x} Octal: {:o}\" , 1 , 1 , 1 ); println! ( \"Binary: {:b} Hex: {:x} Octal: {:o}\" , 5 , 5 , 5 ); println! ( \"Binary: {:b} Hex: {:x} Octal: {:o}\" , 10 , 10 , 10 ); // debug trait println! ( \"{:?}\" , ( 12 , true , \"hello\" )); // basic math println! ( \"10 + 10 = {}\" , 10 + 10 ); }","title":"formatting text"},{"location":"program-langs/rust/datatypes/","text":"Datatypes \u00b6 overview \u00b6 Rust must know the data types of all variables at compile time every value in rust is a certain data type data types tell Rust how it is going to work with that data and how much memory to reserve for it scalar and compound are two data type subsets Rust compiler can infer a variable type many times but other times we must annotate it // converting the string to integer below would confuse compiler so we annotate let guess : u32 = \"42\" . parse (). expect ( \"Not a number!\" ); scalar types \u00b6 Rust has 4 primary scalar types integers, floating-point numbers, Booleans, characters represent a single value number types \u00b6 a number without a fractional component, a whole number each integer is given with the bits of space that it uses up each integer is also labeled signed or unsigned isize and usize types depend on the kind of computer your program is running on 32 bits for a 32-bit architecture (older computers and some modern devices) 64 bits for a 64-bit architecture (most modern computers / devices) Rust defaults to i32 if unsure what integer type to use, the Rust default is a good place to start isize and usize is most often used when indexing a collection Length Signed Unsigned 8-bit i8 u8 16-bit i16 u16 32-bit i32 u32 64-bit i64 u64 128-bit i128 u128 arch-bit isize usize signed integer types \u00b6 signed means it is possible for the variable to be negative so we need to include the sign to specify signed numbers are stored using two\u2019s complement representation signed variants of integers can store numbers from -(2 n - 1 ) to 2 n - 1 - 1 inclusive n is the number of bits that variant uses signed stores equivalent i8 -(2 7 ) to 2 7 - 1 -128 to 127 i16 i32 i64 i128 isize unsigned integer types \u00b6 unsigned means that the variable will only ever be positive and can be represented without a sign unsigned variants of integers can store numbers from -(2 7 ) to 2 7 - 1 n is the number of bits that variant uses unsigned stores equivalent u8 0 to 2 8 - 1 0 to 255 u16 u32 u64 u128 usize integer / number literals \u00b6 integer literals can be written in any of the forms shown in the below table number literals that can be multiple numeric types allow a type suffix to designate the type an example type suffix is 57u8 number literals can also use _ as a visual separator to make the number easier to read an example using a visual seperator is 1_000, which is the same as 1000 number literal example decimal 98_222 hex 0xff octal 0o77 binary 0b1111_0000 byte ( u8 only ) b'A' integer overflow \u00b6 integer overflow occurs when assigning a variable an integer that is too large for its datatype assigning 256 to a type of u8 would cause integer overflow Rust includes checks for integer overflow errors when compiling in debug mode when compiling in release mode with the --release flag, Rust does not include checks for integer overflow if overflow occurs when compiling in release mode Rust performs two\u2019s complement wrapping in the case of a u8, the value 256 becomes 0, the value 257 becomes 1, and so on with two\u2019s complement wrapping the program won\u2019t panic but the variable will have a value that probably isn\u2019t expected integer overflow error handling \u00b6 method families the standard library provides wrap in all modes with the wrapping_* methods return the None value if there is overflow with the checked_* methods return the value and a boolean indicating whether there was overflow with the overflowing_* methods saturate at the value\u2019s minimum or maximum values with saturating_* methods floating-point types \u00b6 numbers with decimal points Rust floating-point types are f32 and f64 f32 and f64 are 32 bits and 64 bits in size default is f64 which is roughly same speed as f32 in modern computers f64 is capable of more precision floating-point numbers are represented according to the IEEE-754 standard f32 type is a single-precision float f64 has double precision fn main () { let x = 2.0 ; // f64 let y : f32 = 3.0 ; // f32 } numeric operations \u00b6 Rust supports basic math operations for all number types math operations include addition, subtraction, multiplication, division, and remainder integer division rounds down to the nearest integer code below shows how to use each numeric operation in a let statement each expression in these statements uses a math operator and evaluates to a single value which is then bound to a variable fn main () { // addition let sum = 5 + 10 ; // subtraction let difference = 95.5 - 4.3 ; // multiplication let product = 4 * 30 ; // division let quotient = 56.7 / 32.2 ; let floored = 2 / 3 ; // Results in 0 // remainder let remainder = 43 % 5 ; } Boolean type \u00b6 a Boolean type in Rust has two possible values: true and false Booleans are one byte in size Boolean type in Rust is specified using bool main way to use Boolean values is through conditionals fn main () { let t = true ; let f : bool = false ; // with explicit type annotation } char / character type \u00b6 Rust\u2019s char type is the language\u2019s most primitive alphabetic type char literals are specified with single quotes char type is four bytes in size represents a Unicode Scalar Value ( can represent much more than ASCII ) Unicode Scalar Values range from U+0000 to U+D7FF and U+E000 to U+10FFFF inclusive valid char values include - Emoji Accented letters Chinese characters Japanese characters Korean characters zero-width spaces Emoji fn main () { let z = 'z' ; let Z = '\u2124' ; let heart_eyed_cat = '\ud83d\ude3b' ; } compound types \u00b6 compound types can group multiple values into one type Rust has two primitive compound types ( tuples and arrays ) tuple type \u00b6 a tuple is a general way of grouping together a number values with a variety of types into 1 compound type tuples have a fixed length once a tuple is declared it cannot grow or shrink in size each position in a tuple has a type the types of each position in a tuple do not have to be the same pattern matching can be used to destructure a tuple value, like below code to access a tuple element directly use TUPLE-NAME.INDEX-OF-ELEMENT fn main () { let example_tuple : ( i32 , f64 , u8 ) = ( 500 , 6.4 , 1 ); let ( x , y , z ) = example_tuple ; println! ( \"The value of x is: {}\" , y ); println! ( \"The value of y is: {}\" , y ); println! ( \"The value of z is: {}\" , z ); let five_hundred = example_tuple . 0 ; // \u2192 500 let six_point_four = example_tuple . 1 ; // \u2192 6.4 let one = example_tuple . 2 ; // \u2192 1 } // example_tuple binds to the entire tuple // a tuple is considered a single compound element a tuple without any values is () a tuple without any values is a special type () is called a unit type and the value is called a unit value expressions implicitly return the unit value if they do not return any other value array type \u00b6 Rust arrays are different from the typical programming language array an array is one of Rust's ways to have a collection of multiple values every element in an array must have the same type ( unlike tuples ) arrays in Rust must have a fixed length ( like tuples ) an array is denoted with square brackets containing comma seperated values useful if data is to be allocated on the stack rather than the heap useful to ensure always having a fixed number of elements ( like for zipcodes ) array type is not as flexible as vector type vector is a similiar type that is allowed to grow or shrink if unsure whether to use an array or vector, a vector should probably be used array is probably better than vector for letting a program know the months in a year ( amount of months unlikely to change ) fn main () { let example_array = [ 1 , 2 , 3 , 4 , 5 ]; let months_array = [ \"January\" , \"February\" , \"March\" , \"April\" , \"May\" , \"June\" , \"July\" , \"August\" , \"September\" , \"October\" , \"November\" , \"December\" ]; // an array with elements that all let shorthand_array = [ 3 ; 5 ]; // same as above let longhand_array = [ 3 , 3 , 3 , 3 , 3 ]; // same as above let explicitly_annotated_array : [ i32 ; 5 ] = [ 3 , 3 , 3 , 3 , 3 ]; } an array is a single chunk of memory of a known and fixed size that can be allocated on the stack access elements of an array using indexing fn main () { let this_array = [ 1 , 2 , 3 , 4 , 5 ]; let first_element = this_array [ 0 ]; // \u2192 1 let second_element = this_array [ 1 ]; // \u2192 2 } example of trying to access a non-existent array element use std :: io ; fn main () { let a = [ 1 , 2 , 3 , 4 , 5 ]; println! ( \"Please enter an array index.\" ); let mut index = String :: new (); io :: stdin () . read_line ( & mut index ) . expect ( \"Failed to read line\" ); let index : usize = index . trim () . parse () . expect ( \"Index entered was not a number\" ); let element = a [ index ]; println! ( \"The value of the element at index {} is: {}\" , index , element ); } // if user inputs anything above 4 ( because array only has index 0 to 4 ) // \u2192 program panics and does not execute the final println! the above error check happens at runtime because Rust has to get the user input to check against the code this is an example of Rust's memory safety principals in many low-level languages this kind of check is not done and invalid memory can be accessed Rust protects against this kind of error by immediately exiting instead of allowing the memory access and continuing","title":"Datatypes"},{"location":"program-langs/rust/datatypes/#datatypes","text":"","title":"Datatypes"},{"location":"program-langs/rust/datatypes/#overview","text":"Rust must know the data types of all variables at compile time every value in rust is a certain data type data types tell Rust how it is going to work with that data and how much memory to reserve for it scalar and compound are two data type subsets Rust compiler can infer a variable type many times but other times we must annotate it // converting the string to integer below would confuse compiler so we annotate let guess : u32 = \"42\" . parse (). expect ( \"Not a number!\" );","title":"overview"},{"location":"program-langs/rust/datatypes/#scalar-types","text":"Rust has 4 primary scalar types integers, floating-point numbers, Booleans, characters represent a single value","title":"scalar types"},{"location":"program-langs/rust/datatypes/#number-types","text":"a number without a fractional component, a whole number each integer is given with the bits of space that it uses up each integer is also labeled signed or unsigned isize and usize types depend on the kind of computer your program is running on 32 bits for a 32-bit architecture (older computers and some modern devices) 64 bits for a 64-bit architecture (most modern computers / devices) Rust defaults to i32 if unsure what integer type to use, the Rust default is a good place to start isize and usize is most often used when indexing a collection Length Signed Unsigned 8-bit i8 u8 16-bit i16 u16 32-bit i32 u32 64-bit i64 u64 128-bit i128 u128 arch-bit isize usize","title":"number types"},{"location":"program-langs/rust/datatypes/#signed-integer-types","text":"signed means it is possible for the variable to be negative so we need to include the sign to specify signed numbers are stored using two\u2019s complement representation signed variants of integers can store numbers from -(2 n - 1 ) to 2 n - 1 - 1 inclusive n is the number of bits that variant uses signed stores equivalent i8 -(2 7 ) to 2 7 - 1 -128 to 127 i16 i32 i64 i128 isize","title":"signed integer types"},{"location":"program-langs/rust/datatypes/#unsigned-integer-types","text":"unsigned means that the variable will only ever be positive and can be represented without a sign unsigned variants of integers can store numbers from -(2 7 ) to 2 7 - 1 n is the number of bits that variant uses unsigned stores equivalent u8 0 to 2 8 - 1 0 to 255 u16 u32 u64 u128 usize","title":"unsigned integer types"},{"location":"program-langs/rust/datatypes/#integer-number-literals","text":"integer literals can be written in any of the forms shown in the below table number literals that can be multiple numeric types allow a type suffix to designate the type an example type suffix is 57u8 number literals can also use _ as a visual separator to make the number easier to read an example using a visual seperator is 1_000, which is the same as 1000 number literal example decimal 98_222 hex 0xff octal 0o77 binary 0b1111_0000 byte ( u8 only ) b'A'","title":"integer / number literals"},{"location":"program-langs/rust/datatypes/#integer-overflow","text":"integer overflow occurs when assigning a variable an integer that is too large for its datatype assigning 256 to a type of u8 would cause integer overflow Rust includes checks for integer overflow errors when compiling in debug mode when compiling in release mode with the --release flag, Rust does not include checks for integer overflow if overflow occurs when compiling in release mode Rust performs two\u2019s complement wrapping in the case of a u8, the value 256 becomes 0, the value 257 becomes 1, and so on with two\u2019s complement wrapping the program won\u2019t panic but the variable will have a value that probably isn\u2019t expected","title":"integer overflow"},{"location":"program-langs/rust/datatypes/#integer-overflow-error-handling","text":"method families the standard library provides wrap in all modes with the wrapping_* methods return the None value if there is overflow with the checked_* methods return the value and a boolean indicating whether there was overflow with the overflowing_* methods saturate at the value\u2019s minimum or maximum values with saturating_* methods","title":"integer overflow error handling"},{"location":"program-langs/rust/datatypes/#floating-point-types","text":"numbers with decimal points Rust floating-point types are f32 and f64 f32 and f64 are 32 bits and 64 bits in size default is f64 which is roughly same speed as f32 in modern computers f64 is capable of more precision floating-point numbers are represented according to the IEEE-754 standard f32 type is a single-precision float f64 has double precision fn main () { let x = 2.0 ; // f64 let y : f32 = 3.0 ; // f32 }","title":"floating-point types"},{"location":"program-langs/rust/datatypes/#numeric-operations","text":"Rust supports basic math operations for all number types math operations include addition, subtraction, multiplication, division, and remainder integer division rounds down to the nearest integer code below shows how to use each numeric operation in a let statement each expression in these statements uses a math operator and evaluates to a single value which is then bound to a variable fn main () { // addition let sum = 5 + 10 ; // subtraction let difference = 95.5 - 4.3 ; // multiplication let product = 4 * 30 ; // division let quotient = 56.7 / 32.2 ; let floored = 2 / 3 ; // Results in 0 // remainder let remainder = 43 % 5 ; }","title":"numeric operations"},{"location":"program-langs/rust/datatypes/#boolean-type","text":"a Boolean type in Rust has two possible values: true and false Booleans are one byte in size Boolean type in Rust is specified using bool main way to use Boolean values is through conditionals fn main () { let t = true ; let f : bool = false ; // with explicit type annotation }","title":"Boolean type"},{"location":"program-langs/rust/datatypes/#char-character-type","text":"Rust\u2019s char type is the language\u2019s most primitive alphabetic type char literals are specified with single quotes char type is four bytes in size represents a Unicode Scalar Value ( can represent much more than ASCII ) Unicode Scalar Values range from U+0000 to U+D7FF and U+E000 to U+10FFFF inclusive valid char values include - Emoji Accented letters Chinese characters Japanese characters Korean characters zero-width spaces Emoji fn main () { let z = 'z' ; let Z = '\u2124' ; let heart_eyed_cat = '\ud83d\ude3b' ; }","title":"char / character type"},{"location":"program-langs/rust/datatypes/#compound-types","text":"compound types can group multiple values into one type Rust has two primitive compound types ( tuples and arrays )","title":"compound types"},{"location":"program-langs/rust/datatypes/#tuple-type","text":"a tuple is a general way of grouping together a number values with a variety of types into 1 compound type tuples have a fixed length once a tuple is declared it cannot grow or shrink in size each position in a tuple has a type the types of each position in a tuple do not have to be the same pattern matching can be used to destructure a tuple value, like below code to access a tuple element directly use TUPLE-NAME.INDEX-OF-ELEMENT fn main () { let example_tuple : ( i32 , f64 , u8 ) = ( 500 , 6.4 , 1 ); let ( x , y , z ) = example_tuple ; println! ( \"The value of x is: {}\" , y ); println! ( \"The value of y is: {}\" , y ); println! ( \"The value of z is: {}\" , z ); let five_hundred = example_tuple . 0 ; // \u2192 500 let six_point_four = example_tuple . 1 ; // \u2192 6.4 let one = example_tuple . 2 ; // \u2192 1 } // example_tuple binds to the entire tuple // a tuple is considered a single compound element a tuple without any values is () a tuple without any values is a special type () is called a unit type and the value is called a unit value expressions implicitly return the unit value if they do not return any other value","title":"tuple type"},{"location":"program-langs/rust/datatypes/#array-type","text":"Rust arrays are different from the typical programming language array an array is one of Rust's ways to have a collection of multiple values every element in an array must have the same type ( unlike tuples ) arrays in Rust must have a fixed length ( like tuples ) an array is denoted with square brackets containing comma seperated values useful if data is to be allocated on the stack rather than the heap useful to ensure always having a fixed number of elements ( like for zipcodes ) array type is not as flexible as vector type vector is a similiar type that is allowed to grow or shrink if unsure whether to use an array or vector, a vector should probably be used array is probably better than vector for letting a program know the months in a year ( amount of months unlikely to change ) fn main () { let example_array = [ 1 , 2 , 3 , 4 , 5 ]; let months_array = [ \"January\" , \"February\" , \"March\" , \"April\" , \"May\" , \"June\" , \"July\" , \"August\" , \"September\" , \"October\" , \"November\" , \"December\" ]; // an array with elements that all let shorthand_array = [ 3 ; 5 ]; // same as above let longhand_array = [ 3 , 3 , 3 , 3 , 3 ]; // same as above let explicitly_annotated_array : [ i32 ; 5 ] = [ 3 , 3 , 3 , 3 , 3 ]; } an array is a single chunk of memory of a known and fixed size that can be allocated on the stack access elements of an array using indexing fn main () { let this_array = [ 1 , 2 , 3 , 4 , 5 ]; let first_element = this_array [ 0 ]; // \u2192 1 let second_element = this_array [ 1 ]; // \u2192 2 } example of trying to access a non-existent array element use std :: io ; fn main () { let a = [ 1 , 2 , 3 , 4 , 5 ]; println! ( \"Please enter an array index.\" ); let mut index = String :: new (); io :: stdin () . read_line ( & mut index ) . expect ( \"Failed to read line\" ); let index : usize = index . trim () . parse () . expect ( \"Index entered was not a number\" ); let element = a [ index ]; println! ( \"The value of the element at index {} is: {}\" , index , element ); } // if user inputs anything above 4 ( because array only has index 0 to 4 ) // \u2192 program panics and does not execute the final println! the above error check happens at runtime because Rust has to get the user input to check against the code this is an example of Rust's memory safety principals in many low-level languages this kind of check is not done and invalid memory can be accessed Rust protects against this kind of error by immediately exiting instead of allowing the memory access and continuing","title":"array type"},{"location":"program-langs/rust/mini-projects/","text":"Mini Projects \u00b6 guessing game \u00b6 use rand :: Rng ; use std :: cmp :: Ordering ; use std :: io ; fn main () { println! ( \"Guess the number!\" ); let secret_num = rand :: thread_rng (). gen_range ( 1 .. 101 ); loop { println! ( \"Please input your guess.\" ); let mut guess = String :: new (); io :: stdin () . read_line ( & mut guess ) . expect ( \"Failed to read line\" ); let guess : u32 = match guess . trim (). parse () { Ok ( num ) => num , Err ( _ ) => continue , }; println! ( \"You guessed: {}\" , guess ); match guess . cmp ( & secret_num ) { Ordering :: Less => println! ( \"Too small! Guess again\" ), Ordering :: Greater => println! ( \"Too big! Guess again\" ), Ordering :: Equal => { println! ( \"You win!\" ); break ; } } } }","title":"Mini Projects"},{"location":"program-langs/rust/mini-projects/#mini-projects","text":"","title":"Mini Projects"},{"location":"program-langs/rust/mini-projects/#guessing-game","text":"use rand :: Rng ; use std :: cmp :: Ordering ; use std :: io ; fn main () { println! ( \"Guess the number!\" ); let secret_num = rand :: thread_rng (). gen_range ( 1 .. 101 ); loop { println! ( \"Please input your guess.\" ); let mut guess = String :: new (); io :: stdin () . read_line ( & mut guess ) . expect ( \"Failed to read line\" ); let guess : u32 = match guess . trim (). parse () { Ok ( num ) => num , Err ( _ ) => continue , }; println! ( \"You guessed: {}\" , guess ); match guess . cmp ( & secret_num ) { Ordering :: Less => println! ( \"Too small! Guess again\" ), Ordering :: Greater => println! ( \"Too big! Guess again\" ), Ordering :: Equal => { println! ( \"You win!\" ); break ; } } } }","title":"guessing game"},{"location":"program-langs/rust/ownership/","text":"Ownership \u00b6 Rust's most unique feature overview \u00b6 all program's have to manage the way they use a computer's memory while running some languages have garbage collection that constantly looks for no longer used memory as the program runs( this slows the program down ) in some languages the programmer must explicitely allocate and free the memory when they write the program Rust has a unique approach to garbage collection / memory management memory is managed through a system of ownership with a set of rules that the compiler checks at compile time Rust ownership features do not slow down your program while it is running ownership - keeps track of what parts of code are using what data on the heap minimizes the amount of duplicate data on the heap cleans up unused data on the heap so the program does not run out of space the stack and heap \u00b6 the stack and heap are structured in different ways the stack and heap are parts of memory that are available for code to use at runtime all data stored on the stack must have a known and fixed size data with an unknown size at compile time must be stored on the heap instead (or a size that might change) the heap is for memory allocation (like a location to allow memory) pushing values to the stack is not considered allocating a stack is like going to the restaurant knowing the group is exactly two people a heap is like going to the restaurant only knowing it will be 5-10 people the couple is going to be seated much quicker and find a spot easily the biggger group is going to take time finding a spot the restaurant also sits small groups right up front in couples booths the restaurant sits big groups in the back rooms allocated to the party tables when code calls a function the values passed into the function and the functions local variables get pushed to the stack stack \u00b6 the stack stores values in the order it gets them and removes the values the opposite way ( first in last out ) a stack can be pictures like stacking plates adding data is called pushing onto the stack removing data is called popping off the stack pushing to the stack is faster than allocating on the heap because the allocator never has to search for a space to save for the new data heap \u00b6 the heap is less organized when putting data on the heap, a certain amount of space is requested the memory allocator finds an empty spot in the heap that is big enough and marks it as being used after the allocator finds an empty spot which is big enough it returns a pointer a pointer is the address in memory for the location of the data the heap memory allocation process is called allocating on the heap (or just allocating ) because the pointer to the data is a known and fixed size it can be be stored on the stack to get the actual data the pointer must be followed to the datas location ownership rules \u00b6 each value","title":"Ownership"},{"location":"program-langs/rust/ownership/#ownership","text":"Rust's most unique feature","title":"Ownership"},{"location":"program-langs/rust/ownership/#overview","text":"all program's have to manage the way they use a computer's memory while running some languages have garbage collection that constantly looks for no longer used memory as the program runs( this slows the program down ) in some languages the programmer must explicitely allocate and free the memory when they write the program Rust has a unique approach to garbage collection / memory management memory is managed through a system of ownership with a set of rules that the compiler checks at compile time Rust ownership features do not slow down your program while it is running ownership - keeps track of what parts of code are using what data on the heap minimizes the amount of duplicate data on the heap cleans up unused data on the heap so the program does not run out of space","title":"overview"},{"location":"program-langs/rust/ownership/#the-stack-and-heap","text":"the stack and heap are structured in different ways the stack and heap are parts of memory that are available for code to use at runtime all data stored on the stack must have a known and fixed size data with an unknown size at compile time must be stored on the heap instead (or a size that might change) the heap is for memory allocation (like a location to allow memory) pushing values to the stack is not considered allocating a stack is like going to the restaurant knowing the group is exactly two people a heap is like going to the restaurant only knowing it will be 5-10 people the couple is going to be seated much quicker and find a spot easily the biggger group is going to take time finding a spot the restaurant also sits small groups right up front in couples booths the restaurant sits big groups in the back rooms allocated to the party tables when code calls a function the values passed into the function and the functions local variables get pushed to the stack","title":"the stack and heap"},{"location":"program-langs/rust/ownership/#stack","text":"the stack stores values in the order it gets them and removes the values the opposite way ( first in last out ) a stack can be pictures like stacking plates adding data is called pushing onto the stack removing data is called popping off the stack pushing to the stack is faster than allocating on the heap because the allocator never has to search for a space to save for the new data","title":"stack"},{"location":"program-langs/rust/ownership/#heap","text":"the heap is less organized when putting data on the heap, a certain amount of space is requested the memory allocator finds an empty spot in the heap that is big enough and marks it as being used after the allocator finds an empty spot which is big enough it returns a pointer a pointer is the address in memory for the location of the data the heap memory allocation process is called allocating on the heap (or just allocating ) because the pointer to the data is a known and fixed size it can be be stored on the stack to get the actual data the pointer must be followed to the datas location","title":"heap"},{"location":"program-langs/rust/ownership/#ownership-rules","text":"each value","title":"ownership rules"},{"location":"resources/learning-software/","text":"Learning Tips \u00b6 General \u00b6 take organized breaks learn the fundamentals learn to think like a programmer pick ONE learning resource that is high quality and requires you to engage with the material train / exercise your mind just like your body manage your energy levels effectively always practice good sleep hygiene exercise every day for better blood and oxygen flow to optimize brain performance Andy Sterkowitz \u00b6 take regular breaks there is actively thinking about something and then there is diffused thinking, where your mind thinks about things and processes them in the background you can actually problem-solve and be more creative when you are not actively thinking about something the 10,000-hour rule only works with targeted practice when learning, have a clear, defined goal (deliberate practice) state you goal when starting a study session \"working on my problem-solving skills\" is an okay goal but try to be more specific \"I am going to get better at really understanding what the problem is asking\" is a better and more specific goal 100% focus, watching YouTube, a podcast, or trying to work on 2 things at once is bad focus go outside your comfort zone, work on things you're bad at identify a weakness, and attack it head on, practice it every day create a note with your weakness run through practice questions that target your weakness repeatedly head first JavaScript book is a good example of a good place to start building small projects is better to start with than 1 big too complex project tetris is an example of a too-big project, a to-do list and pomodoro timer are examples of better starting projects building many small projects helps you to understand all the complexity, context, and moving parts of large projects better learn the syntax of the specific language Career \u00b6 practice interviewing practice Leetcoding and HackerRank Problems 2 hours a day","title":"Learning Tips"},{"location":"resources/learning-software/#learning-tips","text":"","title":"Learning Tips"},{"location":"resources/learning-software/#general","text":"take organized breaks learn the fundamentals learn to think like a programmer pick ONE learning resource that is high quality and requires you to engage with the material train / exercise your mind just like your body manage your energy levels effectively always practice good sleep hygiene exercise every day for better blood and oxygen flow to optimize brain performance","title":"General"},{"location":"resources/learning-software/#andy-sterkowitz","text":"take regular breaks there is actively thinking about something and then there is diffused thinking, where your mind thinks about things and processes them in the background you can actually problem-solve and be more creative when you are not actively thinking about something the 10,000-hour rule only works with targeted practice when learning, have a clear, defined goal (deliberate practice) state you goal when starting a study session \"working on my problem-solving skills\" is an okay goal but try to be more specific \"I am going to get better at really understanding what the problem is asking\" is a better and more specific goal 100% focus, watching YouTube, a podcast, or trying to work on 2 things at once is bad focus go outside your comfort zone, work on things you're bad at identify a weakness, and attack it head on, practice it every day create a note with your weakness run through practice questions that target your weakness repeatedly head first JavaScript book is a good example of a good place to start building small projects is better to start with than 1 big too complex project tetris is an example of a too-big project, a to-do list and pomodoro timer are examples of better starting projects building many small projects helps you to understand all the complexity, context, and moving parts of large projects better learn the syntax of the specific language","title":"Andy Sterkowitz"},{"location":"resources/learning-software/#career","text":"practice interviewing practice Leetcoding and HackerRank Problems 2 hours a day","title":"Career"},{"location":"resources/resources/","text":"Learning Resources \u00b6 documentation \u00b6 MDN Web Docs \u00b6 free for HTML5, CSS3, and JavaScript documentation websites \u00b6 Problem Solving with Algorithms and Data Structures using Python \u00b6 free for learning more advanced topics Automate The Boring Stuff \u00b6 free for learning programming fundamentals functionally and efficiently MDN Web Docs \u00b6 free also has tutorials for HTML5, CSS3, and JavaScript CodeCademy \u00b6 free for learning programming fundamentals, different language syntax, and building muscle memory YouTube channels \u00b6 [Tech With Tim] \u00b6 [Caleb Curry] \u00b6 Chris Titus Tech for getting started with Linux \u00b6","title":"Learning Resources"},{"location":"resources/resources/#learning-resources","text":"","title":"Learning Resources"},{"location":"resources/resources/#documentation","text":"","title":"documentation"},{"location":"resources/resources/#mdn-web-docs","text":"free for HTML5, CSS3, and JavaScript documentation","title":"MDN Web Docs"},{"location":"resources/resources/#websites","text":"","title":"websites"},{"location":"resources/resources/#problem-solving-with-algorithms-and-data-structures-using-python","text":"free for learning more advanced topics","title":"Problem Solving with Algorithms and Data Structures using Python"},{"location":"resources/resources/#automate-the-boring-stuff","text":"free for learning programming fundamentals functionally and efficiently","title":"Automate The Boring Stuff"},{"location":"resources/resources/#mdn-web-docs_1","text":"free also has tutorials for HTML5, CSS3, and JavaScript","title":"MDN Web Docs"},{"location":"resources/resources/#codecademy","text":"free for learning programming fundamentals, different language syntax, and building muscle memory","title":"CodeCademy"},{"location":"resources/resources/#youtube-channels","text":"","title":"YouTube channels"},{"location":"resources/resources/#tech-with-tim","text":"","title":"[Tech With Tim]"},{"location":"resources/resources/#caleb-curry","text":"","title":"[Caleb Curry]"},{"location":"resources/resources/#chris-titus-tech-for-getting-started-with-linux","text":"","title":"Chris Titus Tech for getting started with Linux"},{"location":"software/docker/","text":"Learning Docker \u00b6 overview \u00b6 what Docker does \u00b6 Docker carves up a running Linux system into small containers, each of which is it's own sealed little world these containers have all their own programs everything, all isolated from anything else these containers are designed to be portable so that they can be shipped from one place to another Docker does the work of getting these containers to and from different computer systems Docker also builds these containers for you Docker is also a social platform to help you find and share containers with others who may have already built very similar work that you can build on top of Docker is not virtual machines, there is only a single operating system running that operating system is just carved up into isolated little spaces what is a container? \u00b6 a container is a self contained sealed unit of software it has everything in it that is needed to run that code batteries included operating system a container includes: all of the code configurations processes has all of the networking to allow these containers to talk to other containers they are supposed to be able to talk to and nothing else all the dependencies the system needs are bundled up in the container it even includes just enough of the operating system to run your code how it works \u00b6 it takes all the services that make up a Linux server: networking storage code interprocess communication the whole works and it makes a copy of that in the Linux Kernel for each container, so each container has its own little world, that it cannot see out of and other containers cannot see in you might have one container on a system running Red Hat Linux, serving a database that database is being served through a virtual network to another container running Ubuntu Linux, running a webserver that talks to that database and that webserver might also be talking to a caching server that runs in a SUSE Linux based container the important part to understand is it doesn't matter which Linux the container is running on, as long as it is linux Docker is the program that manages all of this, sets it up, monitors it, and tears it down when it is no longer needed about docker \u00b6 docker is a client program to docker docker is a command you type at the terminal docker is also a server program that listens to messages from the docker command and manages a running Linux system docker builds containers from code, it takes your code along with its dependencies, bundles it up and seals it into a container docker is service that distributes container across the internet so that you can find others work and the righjt people can find your work docker is also a company that makes containers installing Docker \u00b6 setting up Docker \u00b6 dockers primary job is to manage a Linux server, and start and stop your containers as required docker desktop \u00b6 not available for Linux yet install docker on Linux \u00b6 sudo apt-get remove docker docker-engine docker.io containerd runc sudo apt-get update sudo apt-get install ca-certificates curl gnupg lsb-release curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $( lsb_release -cs ) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null sudo apt-get update sudo apt-get install docker-ce docker-ce-cli containerd.io sudo groupadd docker sudo usermod -aG docker $USER script install \u00b6 sh ./get-docker.sh ########## BEGIN ########## sudo sh -eux <<EOF # Install newuidmap & newgidmap binaries apt-get install -y uidmap EOF ########## END ########## dockerd-rootless-setuptool.sh install docker run hello-world # add to shell .rc file export PATH=/usr/bin:$PATH export DOCKER_HOST=unix:///run/user/1000/docker.sock using Docker \u00b6 the Docker flow: images to containers \u00b6 the docker flow is a fundamental concept, it all begins with an image IMAGE => RUNNING-CONTAINER an image is all the files that make up just enough of the operating system to do what you need to do traditionally you would install an entire operating system with everything with each application you do with Docker you pair it way down so that you have a little container with just enough of the operating system to do what you need to do you can have lots of Docker containers run efficiently on a computer the command to look at your docker images: # test docker docker run hello-world docker images # show local docker images REPOSITORY TAG IMAGE ID CREATED SIZE hello-world latest feb5d9fea6a5 3 months ago 13 .3kB - the docker run command takes an image and turns into a living, running container - run with Ubuntu bash shell with terminal capabilities: docker run -ti ubuntu:latest bash # terminal interactive cat /etc/lsb-release # check Ubuntu release exit # exit image docker run -ti ubuntu:latest bash # run again docker ps # look at running images CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES ee62b9db8204 ubuntu:latest \"bash\" 4 minutes ago Up 4 minutes interesting_proskuriakova # docker creates name for you if not specified when you are inside a container you start from an image, and that image is fixed, it does not change when making a container from an image, you do not change the image when you make changes to your container, it does not effect future containers from that same image if you make a change to your current container, exit and then rerun docker for that image, the change will not be there this is the whole point of images, they are fixed points and you can always start from that point the Docker flow: containers to images \u00b6 when you make changes inside of a container, you can save those changes, but the changes will not save to the original image the next step in the docker flow is IMAGE => RUNNING-CONTAINER => STOPPED-CONTAINER when you exit a container it still exists docker ps -a # shows all previously ran containers docker ps -l # shows last ran container # creates new image from container, use ps -l to grab id from previous container ### outputbegin ### CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES ee62b9db8204 ubuntu:latest \"bash\" 17 minutes ago Exited ( 0 ) 5 seconds ago interesting_proskuriakova docker commit ee62b9db8204 sha256:b1fe5c29b61e3f5bef568c59ad24775d22a90f2a376beecc62bbd94dddc20c40 ### outputend ### docker tag b1fe5c29b61e3f5bef568c59ad24775d22a90f2a376beecc62bbd94dddc20c40 my-new-image docker commit interesting_proskuriakova another-image the next step in the docker flow is IMAGE => RUNNING-CONTAINER => STOPPED-CONTAINER => NEW-IMAGE docker commit creates an image from a container run processes in containers \u00b6 docker run starts a container by giving an image name and a process to run in that container containers have a main process the container stops when that process stops if you run other processes inside of that container, all the container still shuts everything of when that main process exits containers can have names, a name is automatically given by docker if you do not create one docker run --rm -ti ubuntu sleep 5 # deletes container after running it, running the sleep command for 5 seconds, and then automatically exiting docker run --rm -ti ubuntu bash -c \"sleep 5; echo slept 5; echo exiting and deleting container now\" docker run -d -ti ubuntu bash # -d for detached, keeps it running in the background docker attach $container -name # reattaches to container, simniliar to GNU screen # also detach from a container with ctrl p ctrl q docker ps docker attach $CONTAINER -NAME docker run --rm --ti = is for just running a container once and deleting when it exits docker exec -ti NAMES /bin/sh = accesses container of NAMES manage containers \u00b6 docker logs $container_name docker keeps the output of the container available as long as the container is around do not let the output of containers get too large docker kill $container-name = stops container docker rm $container-name = completely disposes of container resource constraints: memory limits = docker run --memory maximum-allowed-memory $image-name $command CPU limits = docker run --cpu-shares $relative-percentage-to-other-containers? CPU limits = docker run --cpu-quota $general-non-relative-limit? orchestration: generally requires resource limiting lessons: do not let your containers fetch dependencies when they start or if a repo is missing or some other error, all of your containers will stop do not leave important things in unnamed stopped containers exposing ports \u00b6 wide variety of networking options to connect containers together and to connect containers the internet programs in containers are isolated from the internet by default you can group your containers into \"private\" networks you can explicitly choose who can connect to whom expose ports to let connections in private networks to connect between containers to expose a specific port, you specify the internal port that the program is listening on and what port it should be listening to on the outside, as well as what protocol to use, and there are many more options docker run --rm -ti -p 45678:45678 -p 45679:45679 --name echo-server ubuntu:14.04 bash establishes to different in and out ports, each port will have the same in and out number to keep things easier nc -lp 45678 | nc -lp 45679 = netcat listen port 45678 and pipe that back out to 45679 nc localhost 45678 = now any stdin will be sent to the above docker container nc localhost 45679 = now any stdin from above command will piped out into this terminal process exposing ports dynamically: the port inside the container is fixed the port on the host is chosen from the unused ports this allows many containers running programs with fixed ports this often is used with a service discovery program or orchestration service such as Kubernetes docker run --rm -ti -p 45678 -p 45679 --name echo-server ubuntu:14.04 bash automatically chooses the host ports based on what is available docker port echo-server = finds what ports the docker container is listening on exposing UDP ports: docker run -p $outside-port:$inside-port/$protocol (tcp/udp) docker run -p 1234:1234 udp container networking \u00b6 connecting between containers: when we expose a container's port in Docker it creates a network path from, essentially the outside of that machine down through the networking layers and into that container other containers can connect to it by going out to the host, turning around, and coming back in along that path, it is useful but their are more efficient ways to go about it Docker offers an extensive set of networking options for really controlling exactly how your containers connect to each other and making sure that it is secure and just the way you want it images \u00b6 docker image shows availabla images on machine tagging gives images names docker commit tags images for you docker commit $container-id $my-image-name example name structure = registry.example.com:port/organization/image-name:versio-tag , you can leave out the parts you don't need usually organization/name is enough for tagging your images images come from docker pull which is automatically done for you by docker run available as a separate command if you need to do offline work and you wanna pull some images in advance docker push is the opposite of docker push cleaning up images can build up very quickly docker rmi $image-name:tag docker rmi $image-name volumes \u00b6 sort of like shared folders virtual \"disks\" to store and share data virtual disks that you can store data in and share them between the containers and between containers and the host machine, or both 2 main varieties of volume / virtual disks: persistent ephemeral, these exist as long as the container is using them, but when no container is using them, but when no container is using them, they evaporate, not permanent not part of images, not included when you download an image or upload an image, your local data, local to the host machine sharing data with the host: \"shared folders\" the the hose sharing a \"single file\" into a container, make sure the file exists locally before hand or docker will assume it is a folder similar to shared folders in things like virtual box when creating data inside of the container, it will share data with the host docker run -ti -v /home/justin/Desktop:/shared-folder ubuntu bash sharing between containers: volume-from shared disks that exist only as long as they are being used can between containers docker run -ti --volumes-from $image-name ubuntu bash docker registries \u00b6 building Docker images \u00b6 what are Dockerfiles? \u00b6 building Dockerfiles \u00b6 Dockerfile syntax \u00b6 Multi-project Docker files \u00b6 Avoid golden Images \u00b6 under the hood \u00b6 Docker the program \u00b6 networking and namespaces \u00b6 processes and cgroups \u00b6 storage \u00b6 orchestration: building systems with Docker \u00b6 registries in detail \u00b6 intro to orchestration \u00b6 Kubernetes in AWS \u00b6 Google Kubernetes Engine \u00b6","title":"Docker"},{"location":"software/docker/#learning-docker","text":"","title":"Learning Docker"},{"location":"software/docker/#overview","text":"","title":"overview"},{"location":"software/docker/#what-docker-does","text":"Docker carves up a running Linux system into small containers, each of which is it's own sealed little world these containers have all their own programs everything, all isolated from anything else these containers are designed to be portable so that they can be shipped from one place to another Docker does the work of getting these containers to and from different computer systems Docker also builds these containers for you Docker is also a social platform to help you find and share containers with others who may have already built very similar work that you can build on top of Docker is not virtual machines, there is only a single operating system running that operating system is just carved up into isolated little spaces","title":"what Docker does"},{"location":"software/docker/#what-is-a-container","text":"a container is a self contained sealed unit of software it has everything in it that is needed to run that code batteries included operating system a container includes: all of the code configurations processes has all of the networking to allow these containers to talk to other containers they are supposed to be able to talk to and nothing else all the dependencies the system needs are bundled up in the container it even includes just enough of the operating system to run your code","title":"what is a container?"},{"location":"software/docker/#how-it-works","text":"it takes all the services that make up a Linux server: networking storage code interprocess communication the whole works and it makes a copy of that in the Linux Kernel for each container, so each container has its own little world, that it cannot see out of and other containers cannot see in you might have one container on a system running Red Hat Linux, serving a database that database is being served through a virtual network to another container running Ubuntu Linux, running a webserver that talks to that database and that webserver might also be talking to a caching server that runs in a SUSE Linux based container the important part to understand is it doesn't matter which Linux the container is running on, as long as it is linux Docker is the program that manages all of this, sets it up, monitors it, and tears it down when it is no longer needed","title":"how it works"},{"location":"software/docker/#about-docker","text":"docker is a client program to docker docker is a command you type at the terminal docker is also a server program that listens to messages from the docker command and manages a running Linux system docker builds containers from code, it takes your code along with its dependencies, bundles it up and seals it into a container docker is service that distributes container across the internet so that you can find others work and the righjt people can find your work docker is also a company that makes containers","title":"about docker"},{"location":"software/docker/#installing-docker","text":"","title":"installing Docker"},{"location":"software/docker/#setting-up-docker","text":"dockers primary job is to manage a Linux server, and start and stop your containers as required","title":"setting up Docker"},{"location":"software/docker/#docker-desktop","text":"not available for Linux yet","title":"docker desktop"},{"location":"software/docker/#install-docker-on-linux","text":"sudo apt-get remove docker docker-engine docker.io containerd runc sudo apt-get update sudo apt-get install ca-certificates curl gnupg lsb-release curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg echo \"deb [arch= $( dpkg --print-architecture ) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $( lsb_release -cs ) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null sudo apt-get update sudo apt-get install docker-ce docker-ce-cli containerd.io sudo groupadd docker sudo usermod -aG docker $USER","title":"install docker on Linux"},{"location":"software/docker/#script-install","text":"sh ./get-docker.sh ########## BEGIN ########## sudo sh -eux <<EOF # Install newuidmap & newgidmap binaries apt-get install -y uidmap EOF ########## END ########## dockerd-rootless-setuptool.sh install docker run hello-world # add to shell .rc file export PATH=/usr/bin:$PATH export DOCKER_HOST=unix:///run/user/1000/docker.sock","title":"script install"},{"location":"software/docker/#using-docker","text":"","title":"using Docker"},{"location":"software/docker/#the-docker-flow-images-to-containers","text":"the docker flow is a fundamental concept, it all begins with an image IMAGE => RUNNING-CONTAINER an image is all the files that make up just enough of the operating system to do what you need to do traditionally you would install an entire operating system with everything with each application you do with Docker you pair it way down so that you have a little container with just enough of the operating system to do what you need to do you can have lots of Docker containers run efficiently on a computer the command to look at your docker images: # test docker docker run hello-world docker images # show local docker images REPOSITORY TAG IMAGE ID CREATED SIZE hello-world latest feb5d9fea6a5 3 months ago 13 .3kB - the docker run command takes an image and turns into a living, running container - run with Ubuntu bash shell with terminal capabilities: docker run -ti ubuntu:latest bash # terminal interactive cat /etc/lsb-release # check Ubuntu release exit # exit image docker run -ti ubuntu:latest bash # run again docker ps # look at running images CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES ee62b9db8204 ubuntu:latest \"bash\" 4 minutes ago Up 4 minutes interesting_proskuriakova # docker creates name for you if not specified when you are inside a container you start from an image, and that image is fixed, it does not change when making a container from an image, you do not change the image when you make changes to your container, it does not effect future containers from that same image if you make a change to your current container, exit and then rerun docker for that image, the change will not be there this is the whole point of images, they are fixed points and you can always start from that point","title":"the Docker flow: images to containers"},{"location":"software/docker/#the-docker-flow-containers-to-images","text":"when you make changes inside of a container, you can save those changes, but the changes will not save to the original image the next step in the docker flow is IMAGE => RUNNING-CONTAINER => STOPPED-CONTAINER when you exit a container it still exists docker ps -a # shows all previously ran containers docker ps -l # shows last ran container # creates new image from container, use ps -l to grab id from previous container ### outputbegin ### CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES ee62b9db8204 ubuntu:latest \"bash\" 17 minutes ago Exited ( 0 ) 5 seconds ago interesting_proskuriakova docker commit ee62b9db8204 sha256:b1fe5c29b61e3f5bef568c59ad24775d22a90f2a376beecc62bbd94dddc20c40 ### outputend ### docker tag b1fe5c29b61e3f5bef568c59ad24775d22a90f2a376beecc62bbd94dddc20c40 my-new-image docker commit interesting_proskuriakova another-image the next step in the docker flow is IMAGE => RUNNING-CONTAINER => STOPPED-CONTAINER => NEW-IMAGE docker commit creates an image from a container","title":"the Docker flow: containers to images"},{"location":"software/docker/#run-processes-in-containers","text":"docker run starts a container by giving an image name and a process to run in that container containers have a main process the container stops when that process stops if you run other processes inside of that container, all the container still shuts everything of when that main process exits containers can have names, a name is automatically given by docker if you do not create one docker run --rm -ti ubuntu sleep 5 # deletes container after running it, running the sleep command for 5 seconds, and then automatically exiting docker run --rm -ti ubuntu bash -c \"sleep 5; echo slept 5; echo exiting and deleting container now\" docker run -d -ti ubuntu bash # -d for detached, keeps it running in the background docker attach $container -name # reattaches to container, simniliar to GNU screen # also detach from a container with ctrl p ctrl q docker ps docker attach $CONTAINER -NAME docker run --rm --ti = is for just running a container once and deleting when it exits docker exec -ti NAMES /bin/sh = accesses container of NAMES","title":"run processes in containers"},{"location":"software/docker/#manage-containers","text":"docker logs $container_name docker keeps the output of the container available as long as the container is around do not let the output of containers get too large docker kill $container-name = stops container docker rm $container-name = completely disposes of container resource constraints: memory limits = docker run --memory maximum-allowed-memory $image-name $command CPU limits = docker run --cpu-shares $relative-percentage-to-other-containers? CPU limits = docker run --cpu-quota $general-non-relative-limit? orchestration: generally requires resource limiting lessons: do not let your containers fetch dependencies when they start or if a repo is missing or some other error, all of your containers will stop do not leave important things in unnamed stopped containers","title":"manage containers"},{"location":"software/docker/#exposing-ports","text":"wide variety of networking options to connect containers together and to connect containers the internet programs in containers are isolated from the internet by default you can group your containers into \"private\" networks you can explicitly choose who can connect to whom expose ports to let connections in private networks to connect between containers to expose a specific port, you specify the internal port that the program is listening on and what port it should be listening to on the outside, as well as what protocol to use, and there are many more options docker run --rm -ti -p 45678:45678 -p 45679:45679 --name echo-server ubuntu:14.04 bash establishes to different in and out ports, each port will have the same in and out number to keep things easier nc -lp 45678 | nc -lp 45679 = netcat listen port 45678 and pipe that back out to 45679 nc localhost 45678 = now any stdin will be sent to the above docker container nc localhost 45679 = now any stdin from above command will piped out into this terminal process exposing ports dynamically: the port inside the container is fixed the port on the host is chosen from the unused ports this allows many containers running programs with fixed ports this often is used with a service discovery program or orchestration service such as Kubernetes docker run --rm -ti -p 45678 -p 45679 --name echo-server ubuntu:14.04 bash automatically chooses the host ports based on what is available docker port echo-server = finds what ports the docker container is listening on exposing UDP ports: docker run -p $outside-port:$inside-port/$protocol (tcp/udp) docker run -p 1234:1234 udp","title":"exposing ports"},{"location":"software/docker/#container-networking","text":"connecting between containers: when we expose a container's port in Docker it creates a network path from, essentially the outside of that machine down through the networking layers and into that container other containers can connect to it by going out to the host, turning around, and coming back in along that path, it is useful but their are more efficient ways to go about it Docker offers an extensive set of networking options for really controlling exactly how your containers connect to each other and making sure that it is secure and just the way you want it","title":"container networking"},{"location":"software/docker/#images","text":"docker image shows availabla images on machine tagging gives images names docker commit tags images for you docker commit $container-id $my-image-name example name structure = registry.example.com:port/organization/image-name:versio-tag , you can leave out the parts you don't need usually organization/name is enough for tagging your images images come from docker pull which is automatically done for you by docker run available as a separate command if you need to do offline work and you wanna pull some images in advance docker push is the opposite of docker push cleaning up images can build up very quickly docker rmi $image-name:tag docker rmi $image-name","title":"images"},{"location":"software/docker/#volumes","text":"sort of like shared folders virtual \"disks\" to store and share data virtual disks that you can store data in and share them between the containers and between containers and the host machine, or both 2 main varieties of volume / virtual disks: persistent ephemeral, these exist as long as the container is using them, but when no container is using them, but when no container is using them, they evaporate, not permanent not part of images, not included when you download an image or upload an image, your local data, local to the host machine sharing data with the host: \"shared folders\" the the hose sharing a \"single file\" into a container, make sure the file exists locally before hand or docker will assume it is a folder similar to shared folders in things like virtual box when creating data inside of the container, it will share data with the host docker run -ti -v /home/justin/Desktop:/shared-folder ubuntu bash sharing between containers: volume-from shared disks that exist only as long as they are being used can between containers docker run -ti --volumes-from $image-name ubuntu bash","title":"volumes"},{"location":"software/docker/#docker-registries","text":"","title":"docker registries"},{"location":"software/docker/#building-docker-images","text":"","title":"building Docker images"},{"location":"software/docker/#what-are-dockerfiles","text":"","title":"what are Dockerfiles?"},{"location":"software/docker/#building-dockerfiles","text":"","title":"building Dockerfiles"},{"location":"software/docker/#dockerfile-syntax","text":"","title":"Dockerfile syntax"},{"location":"software/docker/#multi-project-docker-files","text":"","title":"Multi-project Docker files"},{"location":"software/docker/#avoid-golden-images","text":"","title":"Avoid golden Images"},{"location":"software/docker/#under-the-hood","text":"","title":"under the hood"},{"location":"software/docker/#docker-the-program","text":"","title":"Docker the program"},{"location":"software/docker/#networking-and-namespaces","text":"","title":"networking and namespaces"},{"location":"software/docker/#processes-and-cgroups","text":"","title":"processes and cgroups"},{"location":"software/docker/#storage","text":"","title":"storage"},{"location":"software/docker/#orchestration-building-systems-with-docker","text":"","title":"orchestration: building systems with Docker"},{"location":"software/docker/#registries-in-detail","text":"","title":"registries in detail"},{"location":"software/docker/#intro-to-orchestration","text":"","title":"intro to orchestration"},{"location":"software/docker/#kubernetes-in-aws","text":"","title":"Kubernetes in AWS"},{"location":"software/docker/#google-kubernetes-engine","text":"","title":"Google Kubernetes Engine"},{"location":"software/eslint-prettier/","text":"VSCode - ESLint, Prettier & Airbnb Setup \u00b6 1. Install ESLint & Prettier extensions for VSCode \u00b6 Optional - Set format on save and any global prettier options 2. Install Packages \u00b6 npm i -D eslint prettier eslint-plugin-prettier eslint-config-prettier eslint-plugin-node eslint-config-node npx install-peerdeps --dev eslint-config-airbnb npx install-peerdeps --dev eslint-plugin-react 3. Create .prettierrc for any prettier rules (semicolons, quotes, etc) \u00b6 4. Create .eslintrc.json file (You can generate with eslint --init if you install eslint globally) \u00b6 { \"extends\": [\"airbnb\", \"prettier\", \"plugin:node/recommended\"], \"plugins\": [\"prettier\"], \"rules\": { \"prettier/prettier\": \"error\", \"no-unused-vars\": \"warn\", \"no-console\": \"off\", \"func-names\": \"off\", \"no-process-exit\": \"off\", \"object-shorthand\": \"off\", \"class-methods-use-this\": \"off\" } } Reference \u00b6 ESLint Rules - https://eslint.org/docs/rules/ Prettier Options - https://prettier.io/docs/en/options.html Airbnb Style Guide - https://github.com/airbnb/javascript","title":"ESLint Prettier"},{"location":"software/eslint-prettier/#vscode-eslint-prettier-airbnb-setup","text":"","title":"VSCode - ESLint, Prettier &amp; Airbnb Setup"},{"location":"software/eslint-prettier/#1-install-eslint-prettier-extensions-for-vscode","text":"Optional - Set format on save and any global prettier options","title":"1. Install ESLint &amp; Prettier extensions for VSCode"},{"location":"software/eslint-prettier/#2-install-packages","text":"npm i -D eslint prettier eslint-plugin-prettier eslint-config-prettier eslint-plugin-node eslint-config-node npx install-peerdeps --dev eslint-config-airbnb npx install-peerdeps --dev eslint-plugin-react","title":"2. Install Packages"},{"location":"software/eslint-prettier/#3-create-prettierrc-for-any-prettier-rules-semicolons-quotes-etc","text":"","title":"3. Create .prettierrc for any prettier rules (semicolons, quotes, etc)"},{"location":"software/eslint-prettier/#4-create-eslintrcjson-file-you-can-generate-with-eslint-init-if-you-install-eslint-globally","text":"{ \"extends\": [\"airbnb\", \"prettier\", \"plugin:node/recommended\"], \"plugins\": [\"prettier\"], \"rules\": { \"prettier/prettier\": \"error\", \"no-unused-vars\": \"warn\", \"no-console\": \"off\", \"func-names\": \"off\", \"no-process-exit\": \"off\", \"object-shorthand\": \"off\", \"class-methods-use-this\": \"off\" } }","title":"4. Create .eslintrc.json file (You can generate with eslint --init if you install eslint globally)"},{"location":"software/eslint-prettier/#reference","text":"ESLint Rules - https://eslint.org/docs/rules/ Prettier Options - https://prettier.io/docs/en/options.html Airbnb Style Guide - https://github.com/airbnb/javascript","title":"Reference"},{"location":"software/git/essentials/","text":"Git Essentials \u00b6 Git helps you to manage the code in a project as you develop new features, helps to find and fix problems, and simplifies collaboration with other developers, whether working in an office or remotely what is Git? \u00b6 software that tracks changes you make to files and directories keeps track of project versions version control \u00b6 Git is a VCS (version control system) or SCM (source code management) tool VCS and SCM are often used pretty interchangeably history behind Git \u00b6 there are 5 different VCS that predate Git SCCS = Source Code Control System: 1972: closed source, free with Unix stored original version and sets of changes was not the first but first to become popular released in 1972 and was developed by AT&T it was bundled free with the Unix operating system Unix was also free so it spread quickly to places such as universities and SCCS went along with it universities taught their students version control using SCCS so when they left the university to go work in jobs, the VCS they were familiar with and that they took with them was SCCS SCCS saves the original document but then instead of saving the whole document a second time, it just saves a snapshot of what the changes were SCCS stayed dominant until the early 80's, when RCS was developed RCS = Revision Control System: 1982: open source made lots of improvements over SCCS it was cross platform whereas SCCS was Unix only with the rise of the personal computer it was important to have a version control system that would also work on PCs it was also more intuitive, had a cleaner syntax with fewer commands and more features most importantly it was faster and alot of the speed increase came from the fact that it used a smarter storage strategy than SCCS RCS kept the most recent file in it's whole form and it you wanted to go backwards in time and you wanted previous versions, then you applied the change snapshots to go in reverse this new tracking method was alot faster because most of the time you want to look at the most current document a problem with RCS and SCCS were they only allowed work on 1 file at a time, which CVS allowed you to do CVS = Concurrent Versions System: 1986 - 1990: open source multiple files, entire project multi-user repositories could put the repo on a remote server and more than 1 user can work on the same file at the same time, they can work concurrently SVN = Apache Subversion: 2000: open source track text and images tracked file changes collectively watched changes to a directory as a whole actually took snapshots of the directory, not just the files tracked the changes of a directory would change the entire project and all files back to a previous version instead of just a single file at a time BitKeeper SCM: 2000: closed source, proprietary had a free community version a company owned it and sold it it had distributed version control the free version was used for the source code management of the Linux kernel from 2002 to 2005 it was controversial to use a proprietary SCM for an open-source project in 2005 the community version stopped being free Git: April 2005 created by Linus Torvalds, written from scratch to replace BitKeeper distributed version control open-source and free software faster than other SCM's (100 times in some cases) better safeguards against data corruption Git had an explosion in popularity GitHub launched in 2008 to host Git repositories in 2009 there were over 50,000 repositories with 100,000 users in 2011 there were over 2 million repos, over 1 million users 2018 GitHub purchased by Microsoft 2019 over 57 million repos, over 28 million users about distributed version control \u00b6 different users each maintain their own repositories instead of working from a central repo changes are stored as sets or patches focused on tracking changes, not the versions of the documents previous VCS would track the changes to get from version to version of each different file Git focuses on these change sets and capturing those sets as discrete units those change sets can be exchanged between repositories \"merge in change sets\" or \"apply patches\" no single master repository many working copies, each with their own combination of change sets no need to communicate with a central server, faster, no network access required to submit changes no single point of failure encourages participation and forking of projects developers can work independently, make improvements or fix bugs, submit change sets for inclusion or rejection Git setup \u00b6 basic configuration \u00b6 3 places Git stores configuration information, depending how widely we want these configurations to apply system level configuration: /etc/gitconfig these are configs that will apply to every user of this user by default each user can override it with their own custom configurations, but these are the default if they don't user level config: ~/.gitconfig configs that will apply only to a single user, which is going to be most of us, most of the time, working as a single user on a machine project level config: my-project/.git/config we can have configurations that apply only to that project git provides commands to edit configs easily git config --system git config --global git config (inside of a project directory) git config --global user.name \"first-name last-name\" git config --global user.email \"my-email@example.com\" git config --global core.editor \"vim\" git config --global color.ui true git config --list = lists all possible configurations git config user.name = shows name git config user.email = shows email auto-completion \u00b6 go to https://github.com/git/git/tree/master/contrib/completion click on git-completion for your shell follow instructions do the same for git-prompt.sh as well Git help \u00b6 a useful tool for finding out more information about git git help $SUBJECT-YOU-NEED-HELP-ON gives you a convenient interface to access manual pages Getting Started \u00b6 initialize a repository \u00b6 git init Initialized empty Git repository in /home/justin/Projects/avim/.git/ where git files are stored \u00b6 ls -l .git total 112 drwxr-xr-x 2 justin justin 4096 Jan 18 15 :36 branches -rw-r--r-- 1 justin justin 267 Jan 18 15 :36 config -rw-r--r-- 1 justin justin 73 Jan 18 15 :36 description -rw-r--r-- 1 justin justin 21 Jan 18 15 :36 HEAD drwxr-xr-x 2 justin justin 4096 Jan 18 15 :36 hooks -rw-r--r-- 1 justin justin 70921 Jan 18 15 :36 index drwxr-xr-x 2 justin justin 4096 Jan 18 15 :36 info drwxr-xr-x 3 justin justin 4096 Jan 18 15 :36 logs drwxr-xr-x 4 justin justin 4096 Jan 18 15 :36 objects -rw-r--r-- 1 justin justin 112 Jan 18 15 :36 packed-refs drwxr-xr-x 5 justin justin 4096 Jan 18 15 :36 refs git centralizes everything into this one directory committing \u00b6 git add . = adds all files to be committed git commit -m \"committing\" make changes add changes commit changes commit messages: short single-line summary (less than 50 characters) optionally followed by a blank line and a more complete description keep lines in longer descriptions less than 72 characters write commit messages in present tense not past tense \"fix for a bug\" or \"fixes a bug\" not \"fixed a bug\" bullet points are usually asterisk or hyphen can add tracking numbers from bugs or support requests can develop shorthand for organization \"[css,js]\" \"bugfix:\" \"#38405 -\" bad: \"fix typo\", good: \"add missing hyphen in project section of HTML\" got log = shows project commit history got log -n5 = shows 5 most recent project commit history got log --grep=\"bug fix\" shows commits with bug fix in message got log since=2022-01-010 shows commits since specified date got log until=2022-01-010 shows commits that happened up until specified date got log author=\"first-name\" shows commits by authors with specified name every commit is given a unique id Git concepts and architecture \u00b6 the three trees \u00b6 repository, staging index, working make changes in working add files to staging and then commit to repository git only tracks changes that are committed Git workflows \u00b6 make changes in working tree, add completed changes to staging tree, commit changes we want finalized hash values (SHA-1) \u00b6 Git generates a checksum (the hash value) for each change set checksum algorithms convert data into a simple number, which we call a checksum the same data put into the same mathematical algorithm always returns the same result or the same checksum we call it a checksum because we can check and make sure that it's the same checksum is used to provide data integrity data integrity is fundamental changing data would change checksum Gits data integrity features are not included in all VCS each hash value is not only unique, it is directly tied to the contents that are inside of it Git uses the SHA-1 hash algorithm people refer to this value as being the SHA value (S-H-A) 40-character hexadecimal string the HEAD pointer \u00b6 HEAD is a reference variable Git maintains pointer to tip of current branch in repo last state of repo, what was last checked out points to parent of next commit where writing commit takes place the repository has nothing to do with the staging index or working directory, it is a way of tracking the current position in the repo a good metaphor for the HEAD is the playback and record head on a cassette tape recorder as we start recording audio, the tape moves past the HEAD and it records onto it when the record head is stopped, is the place that it will start recording again if we press record a second time we can move around, move the head to different places, we can fast forward and rewind wherever the head is positioned when we hit record again, that is where it is going to start recording the HEAD pointer in Git is very similar by default the branch we are working on is the master branch, which is our main branch when you make a new commit, the HEAD points to that commit make changes to files \u00b6 add files \u00b6 shows the status of repo untracked files mean they are not added to the repository and Git knows nothing about them git add moves files to staging directory git reset HEAD <file> to unstage files git status edit files \u00b6 view changes with diff \u00b6 view only stages changes \u00b6 delete files \u00b6 move and rename files \u00b6 use Git with a real project \u00b6 the Explore California website \u00b6 initialize Git \u00b6 view file edits \u00b6 stage and commit shortcut \u00b6 view a commit \u00b6 compare commits \u00b6 multiline commit messages \u00b6 make atomic commits \u00b6 undo changes \u00b6 undo working directory changes \u00b6 unstage files \u00b6 amend commits \u00b6 retrieve old versions \u00b6 revert a commit \u00b6 remove untracked files \u00b6 ignore files \u00b6 use .gitignore files \u00b6 ideas on what to ignore \u00b6 globally ignored files \u00b6 ignore tracked files \u00b6 track empty directories \u00b6","title":"Git Essentials"},{"location":"software/git/essentials/#git-essentials","text":"Git helps you to manage the code in a project as you develop new features, helps to find and fix problems, and simplifies collaboration with other developers, whether working in an office or remotely","title":"Git Essentials"},{"location":"software/git/essentials/#what-is-git","text":"software that tracks changes you make to files and directories keeps track of project versions","title":"what is Git?"},{"location":"software/git/essentials/#version-control","text":"Git is a VCS (version control system) or SCM (source code management) tool VCS and SCM are often used pretty interchangeably","title":"version control"},{"location":"software/git/essentials/#history-behind-git","text":"there are 5 different VCS that predate Git SCCS = Source Code Control System: 1972: closed source, free with Unix stored original version and sets of changes was not the first but first to become popular released in 1972 and was developed by AT&T it was bundled free with the Unix operating system Unix was also free so it spread quickly to places such as universities and SCCS went along with it universities taught their students version control using SCCS so when they left the university to go work in jobs, the VCS they were familiar with and that they took with them was SCCS SCCS saves the original document but then instead of saving the whole document a second time, it just saves a snapshot of what the changes were SCCS stayed dominant until the early 80's, when RCS was developed RCS = Revision Control System: 1982: open source made lots of improvements over SCCS it was cross platform whereas SCCS was Unix only with the rise of the personal computer it was important to have a version control system that would also work on PCs it was also more intuitive, had a cleaner syntax with fewer commands and more features most importantly it was faster and alot of the speed increase came from the fact that it used a smarter storage strategy than SCCS RCS kept the most recent file in it's whole form and it you wanted to go backwards in time and you wanted previous versions, then you applied the change snapshots to go in reverse this new tracking method was alot faster because most of the time you want to look at the most current document a problem with RCS and SCCS were they only allowed work on 1 file at a time, which CVS allowed you to do CVS = Concurrent Versions System: 1986 - 1990: open source multiple files, entire project multi-user repositories could put the repo on a remote server and more than 1 user can work on the same file at the same time, they can work concurrently SVN = Apache Subversion: 2000: open source track text and images tracked file changes collectively watched changes to a directory as a whole actually took snapshots of the directory, not just the files tracked the changes of a directory would change the entire project and all files back to a previous version instead of just a single file at a time BitKeeper SCM: 2000: closed source, proprietary had a free community version a company owned it and sold it it had distributed version control the free version was used for the source code management of the Linux kernel from 2002 to 2005 it was controversial to use a proprietary SCM for an open-source project in 2005 the community version stopped being free Git: April 2005 created by Linus Torvalds, written from scratch to replace BitKeeper distributed version control open-source and free software faster than other SCM's (100 times in some cases) better safeguards against data corruption Git had an explosion in popularity GitHub launched in 2008 to host Git repositories in 2009 there were over 50,000 repositories with 100,000 users in 2011 there were over 2 million repos, over 1 million users 2018 GitHub purchased by Microsoft 2019 over 57 million repos, over 28 million users","title":"history behind Git"},{"location":"software/git/essentials/#about-distributed-version-control","text":"different users each maintain their own repositories instead of working from a central repo changes are stored as sets or patches focused on tracking changes, not the versions of the documents previous VCS would track the changes to get from version to version of each different file Git focuses on these change sets and capturing those sets as discrete units those change sets can be exchanged between repositories \"merge in change sets\" or \"apply patches\" no single master repository many working copies, each with their own combination of change sets no need to communicate with a central server, faster, no network access required to submit changes no single point of failure encourages participation and forking of projects developers can work independently, make improvements or fix bugs, submit change sets for inclusion or rejection","title":"about distributed version control"},{"location":"software/git/essentials/#git-setup","text":"","title":"Git setup"},{"location":"software/git/essentials/#basic-configuration","text":"3 places Git stores configuration information, depending how widely we want these configurations to apply system level configuration: /etc/gitconfig these are configs that will apply to every user of this user by default each user can override it with their own custom configurations, but these are the default if they don't user level config: ~/.gitconfig configs that will apply only to a single user, which is going to be most of us, most of the time, working as a single user on a machine project level config: my-project/.git/config we can have configurations that apply only to that project git provides commands to edit configs easily git config --system git config --global git config (inside of a project directory) git config --global user.name \"first-name last-name\" git config --global user.email \"my-email@example.com\" git config --global core.editor \"vim\" git config --global color.ui true git config --list = lists all possible configurations git config user.name = shows name git config user.email = shows email","title":"basic configuration"},{"location":"software/git/essentials/#auto-completion","text":"go to https://github.com/git/git/tree/master/contrib/completion click on git-completion for your shell follow instructions do the same for git-prompt.sh as well","title":"auto-completion"},{"location":"software/git/essentials/#git-help","text":"a useful tool for finding out more information about git git help $SUBJECT-YOU-NEED-HELP-ON gives you a convenient interface to access manual pages","title":"Git help"},{"location":"software/git/essentials/#getting-started","text":"","title":"Getting Started"},{"location":"software/git/essentials/#initialize-a-repository","text":"git init Initialized empty Git repository in /home/justin/Projects/avim/.git/","title":"initialize a repository"},{"location":"software/git/essentials/#where-git-files-are-stored","text":"ls -l .git total 112 drwxr-xr-x 2 justin justin 4096 Jan 18 15 :36 branches -rw-r--r-- 1 justin justin 267 Jan 18 15 :36 config -rw-r--r-- 1 justin justin 73 Jan 18 15 :36 description -rw-r--r-- 1 justin justin 21 Jan 18 15 :36 HEAD drwxr-xr-x 2 justin justin 4096 Jan 18 15 :36 hooks -rw-r--r-- 1 justin justin 70921 Jan 18 15 :36 index drwxr-xr-x 2 justin justin 4096 Jan 18 15 :36 info drwxr-xr-x 3 justin justin 4096 Jan 18 15 :36 logs drwxr-xr-x 4 justin justin 4096 Jan 18 15 :36 objects -rw-r--r-- 1 justin justin 112 Jan 18 15 :36 packed-refs drwxr-xr-x 5 justin justin 4096 Jan 18 15 :36 refs git centralizes everything into this one directory","title":"where git files are stored"},{"location":"software/git/essentials/#committing","text":"git add . = adds all files to be committed git commit -m \"committing\" make changes add changes commit changes commit messages: short single-line summary (less than 50 characters) optionally followed by a blank line and a more complete description keep lines in longer descriptions less than 72 characters write commit messages in present tense not past tense \"fix for a bug\" or \"fixes a bug\" not \"fixed a bug\" bullet points are usually asterisk or hyphen can add tracking numbers from bugs or support requests can develop shorthand for organization \"[css,js]\" \"bugfix:\" \"#38405 -\" bad: \"fix typo\", good: \"add missing hyphen in project section of HTML\" got log = shows project commit history got log -n5 = shows 5 most recent project commit history got log --grep=\"bug fix\" shows commits with bug fix in message got log since=2022-01-010 shows commits since specified date got log until=2022-01-010 shows commits that happened up until specified date got log author=\"first-name\" shows commits by authors with specified name every commit is given a unique id","title":"committing"},{"location":"software/git/essentials/#git-concepts-and-architecture","text":"","title":"Git concepts and architecture"},{"location":"software/git/essentials/#the-three-trees","text":"repository, staging index, working make changes in working add files to staging and then commit to repository git only tracks changes that are committed","title":"the three trees"},{"location":"software/git/essentials/#git-workflows","text":"make changes in working tree, add completed changes to staging tree, commit changes we want finalized","title":"Git workflows"},{"location":"software/git/essentials/#hash-values-sha-1","text":"Git generates a checksum (the hash value) for each change set checksum algorithms convert data into a simple number, which we call a checksum the same data put into the same mathematical algorithm always returns the same result or the same checksum we call it a checksum because we can check and make sure that it's the same checksum is used to provide data integrity data integrity is fundamental changing data would change checksum Gits data integrity features are not included in all VCS each hash value is not only unique, it is directly tied to the contents that are inside of it Git uses the SHA-1 hash algorithm people refer to this value as being the SHA value (S-H-A) 40-character hexadecimal string","title":"hash values (SHA-1)"},{"location":"software/git/essentials/#the-head-pointer","text":"HEAD is a reference variable Git maintains pointer to tip of current branch in repo last state of repo, what was last checked out points to parent of next commit where writing commit takes place the repository has nothing to do with the staging index or working directory, it is a way of tracking the current position in the repo a good metaphor for the HEAD is the playback and record head on a cassette tape recorder as we start recording audio, the tape moves past the HEAD and it records onto it when the record head is stopped, is the place that it will start recording again if we press record a second time we can move around, move the head to different places, we can fast forward and rewind wherever the head is positioned when we hit record again, that is where it is going to start recording the HEAD pointer in Git is very similar by default the branch we are working on is the master branch, which is our main branch when you make a new commit, the HEAD points to that commit","title":"the HEAD pointer"},{"location":"software/git/essentials/#make-changes-to-files","text":"","title":"make changes to files"},{"location":"software/git/essentials/#add-files","text":"shows the status of repo untracked files mean they are not added to the repository and Git knows nothing about them git add moves files to staging directory git reset HEAD <file> to unstage files git status","title":"add files"},{"location":"software/git/essentials/#edit-files","text":"","title":"edit files"},{"location":"software/git/essentials/#view-changes-with-diff","text":"","title":"view changes with diff"},{"location":"software/git/essentials/#view-only-stages-changes","text":"","title":"view only stages changes"},{"location":"software/git/essentials/#delete-files","text":"","title":"delete files"},{"location":"software/git/essentials/#move-and-rename-files","text":"","title":"move and rename files"},{"location":"software/git/essentials/#use-git-with-a-real-project","text":"","title":"use Git with a real project"},{"location":"software/git/essentials/#the-explore-california-website","text":"","title":"the Explore California website"},{"location":"software/git/essentials/#initialize-git","text":"","title":"initialize Git"},{"location":"software/git/essentials/#view-file-edits","text":"","title":"view file edits"},{"location":"software/git/essentials/#stage-and-commit-shortcut","text":"","title":"stage and commit shortcut"},{"location":"software/git/essentials/#view-a-commit","text":"","title":"view a commit"},{"location":"software/git/essentials/#compare-commits","text":"","title":"compare commits"},{"location":"software/git/essentials/#multiline-commit-messages","text":"","title":"multiline commit messages"},{"location":"software/git/essentials/#make-atomic-commits","text":"","title":"make atomic commits"},{"location":"software/git/essentials/#undo-changes","text":"","title":"undo changes"},{"location":"software/git/essentials/#undo-working-directory-changes","text":"","title":"undo working directory changes"},{"location":"software/git/essentials/#unstage-files","text":"","title":"unstage files"},{"location":"software/git/essentials/#amend-commits","text":"","title":"amend commits"},{"location":"software/git/essentials/#retrieve-old-versions","text":"","title":"retrieve old versions"},{"location":"software/git/essentials/#revert-a-commit","text":"","title":"revert a commit"},{"location":"software/git/essentials/#remove-untracked-files","text":"","title":"remove untracked files"},{"location":"software/git/essentials/#ignore-files","text":"","title":"ignore files"},{"location":"software/git/essentials/#use-gitignore-files","text":"","title":"use .gitignore files"},{"location":"software/git/essentials/#ideas-on-what-to-ignore","text":"","title":"ideas on what to ignore"},{"location":"software/git/essentials/#globally-ignored-files","text":"","title":"globally ignored files"},{"location":"software/git/essentials/#ignore-tracked-files","text":"","title":"ignore tracked files"},{"location":"software/git/essentials/#track-empty-directories","text":"","title":"track empty directories"},{"location":"software/git/github-pages/","text":"Using GitHub Pages \u00b6 GitHub Pages sites are publicly available on the internet by default even if the repository is private create a site \u00b6 create repository \u00b6 skip if repository is already set up for site in the upper-right corner of any page click the drop-down menu select new repository click the owner drop-down menu select the account you want to own the repository for a user site the repository name must be named .github.io in all lowercase letters choose name and optional description choose repository visibility select initialize with README click create repository push site to site to publish to repository choose a publishing source \u00b6 publishing source info the publishing source for your GitHub Pages site is the branch and folder where the source files for your site are stored the default publishing source for user and organization sites is the root of the default branch for the repository site can be published from any branch in the repository if /docs is chosen as the folder for publishing source GitHub Pages will get all resources from there GitHub pages will read things such as the CNAME file from the publishing folder as well edit the site custom domain through the GitHub Pages settings if using /docs as publishing folder the custom domain would write to /docs/CNAME go to sites GitHub repository under repository name click settings in the left sidebar click pages under \"GitHub Pages\" use the \"None\" or \"Branch\" drop-down menu and select a publishing source optionally use the drop-down menu to select a folder for publishing source click save set up a custom domain \u00b6 update DNS records and repository settings to point the default domain for GitHub Pages site to a custom domain go to GitHub repository for site repeat steps 3 and 4 from above \u261d\ufe0f under \"Custom domain\" type custom domain click save go to DNS provider and create a CNAME record the CNAME record should point subdomain to the default domain for site to use docs.example.com create a CNAME record that points docs.example.com to default GitHub Pages site domain the default domain for the repository .github.io would be .github.io use the dig command from a terminal to confirm the DNS record is configured correctly dig docs.example.com +nostats +nocomments +nocmd","title":"GitHub Pages"},{"location":"software/git/github-pages/#using-github-pages","text":"GitHub Pages sites are publicly available on the internet by default even if the repository is private","title":"Using GitHub Pages"},{"location":"software/git/github-pages/#create-a-site","text":"","title":"create a site"},{"location":"software/git/github-pages/#create-repository","text":"skip if repository is already set up for site in the upper-right corner of any page click the drop-down menu select new repository click the owner drop-down menu select the account you want to own the repository for a user site the repository name must be named .github.io in all lowercase letters choose name and optional description choose repository visibility select initialize with README click create repository push site to site to publish to repository","title":"create repository"},{"location":"software/git/github-pages/#choose-a-publishing-source","text":"publishing source info the publishing source for your GitHub Pages site is the branch and folder where the source files for your site are stored the default publishing source for user and organization sites is the root of the default branch for the repository site can be published from any branch in the repository if /docs is chosen as the folder for publishing source GitHub Pages will get all resources from there GitHub pages will read things such as the CNAME file from the publishing folder as well edit the site custom domain through the GitHub Pages settings if using /docs as publishing folder the custom domain would write to /docs/CNAME go to sites GitHub repository under repository name click settings in the left sidebar click pages under \"GitHub Pages\" use the \"None\" or \"Branch\" drop-down menu and select a publishing source optionally use the drop-down menu to select a folder for publishing source click save","title":"choose a publishing source"},{"location":"software/git/github-pages/#set-up-a-custom-domain","text":"update DNS records and repository settings to point the default domain for GitHub Pages site to a custom domain go to GitHub repository for site repeat steps 3 and 4 from above \u261d\ufe0f under \"Custom domain\" type custom domain click save go to DNS provider and create a CNAME record the CNAME record should point subdomain to the default domain for site to use docs.example.com create a CNAME record that points docs.example.com to default GitHub Pages site domain the default domain for the repository .github.io would be .github.io use the dig command from a terminal to confirm the DNS record is configured correctly dig docs.example.com +nostats +nocomments +nocmd","title":"set up a custom domain"},{"location":"software/nodejs/essentials/","text":"Node.js Essentials \u00b6 what is Node.js? \u00b6 Node.js history \u00b6 has been around for about a decade and one of the most powerful JS tools available created by Ryan Dahl in 2009 as a JS runtime based on Chrome's v8 Engine in 2011 NPM version 1 was released to allow for sharing of open source node libraries this marked a huge shift in the way that code was shared and maintained and it started to submit Node.js as a huge player in the ecosystem after some infighting in the community about implementation and project management the Node.js Foundation was formed in 2015 the foundation is made up of several large companies including IBM, Microsoft, PayPal, and Groupon it is referred to as a collaborative project at the Linux Foundation you can find the Node.js Foundation on GitHub you can find the Node.js project itself , it is an open source project on GitHub How Node.js works \u00b6 Apache web server, is multi-threaded, a single thread waits for the file system to finish reading files before it can do anything else we refer to this as blocking Node.js is single threaded, Node.js is behaves asynchronously non-blocking event-driven IO a single thread that will respond to events in the order that they are raise this thread behaves asynchronously, it does not have to wait for resources to finish doing what they're doing before our thread can do anything else if the thread gets too busy it can duplicate and create a new thread to help Node.js is single threaded, all users are sharing the same thread events are raised and recorded in an event queue and then handled in the order that they were raised Node.js is asynchronous, which means it can do more than one thing at a time this ability to multi-task is what makes Node.js so fast and one of the reasons so many developers are building their web applications with Node.js Node globals \u00b6 the global object \u00b6 can exclude the .js when running files with node console = global.console the global object contains all the objects, methods, etc we can use in our Node.js files with out having to import any functionality the require function \u00b6 allows us to use other modules in our programs path module gives us tools to work with path strings every Node.js file we create is a module, it contains it's own code when we want to load other modules we must use a require() function const path = require ( \"path\" ); console . log ( __dirname ); console . log ( __filename ); console . log ( `this filename is ${ path . basename ( __filename ) } ` ); console . log ( process . pid ); console . log ( process . versions . node ); node code/nodejs/essentials/01.js /home/justin/Desktop/learning-docs/code/nodejs/essentials /home/justin/Desktop/learning-docs/code/nodejs/essentials/01.js this filename is 01 .js 26749 17 .4.0 argument variables with process.argv \u00b6 globally available, gives us information about the current process as well as tools to interact with that process process.argv is an array const [,, arg1 , arg2 ] = process . argv console . log ( process . argv ); console . log ( arg1 , arg2 ) node code / nodejs / essentials / 02 . js argument3 argument4 [ '/home/justin/.nvm/versions/node/v17.4.0/bin/node' , '/home/justin/Desktop/docs/code/nodejs/essentials/02.js' , 'argument3' , 'argument4' ] argument3 argument4 const grab = flag => { let indexAfterFlag = process . argv . indexOf ( flag ) + 1 ; return process . argv [ indexAfterFlag ]; } const firstName = grab ( \"--first\" ) const lastName = grab ( \"--last\" ) console . log ( `Hello ${ firstName } ${ lastName } ` ) node process - args . js -- first justin -- last angeles Hello justin angeles stdout stdin \u00b6 process.stdout is a writable string and it implements a write method use write method to send data out of our program stdout needs newline (\\n) characters to print a new line const questions = [ \"what is your name?\" , \"what would your rather be doing?\" , \"what is your favorite programming language?\" , ] const ask = ( i = 0 ) => { process . stdout . write ( `\\n\\n\\n ${ questions [ i ] } ` ); process . stdout . write ( ' > \\n' ) }; ask (); const answers = []; process . stdin . on ( \"data\" , data => { answers . push ( data . toString (). trim ()); if ( answers . length < questions . length ) { ask ( answers . length ); } else { process . exit (); } }); process . on ( \"exit\" , () => { const [ name , activity , lang ] = answers ; console . log ( ` go ${ activity } ${ name } , you can write ${ lang } later!! ` ) }); node questions.js what is your name? > justin what would your rather be doing? > study what is your favorite programming language? > javascript go study justin, you can write javascript later!! setTimeout setInterval \u00b6 const waitTime = process . argv [ 2 ] * 1000 || 3000 ; const waitInterval = 500 ; let currentTime = 0 ; const incrementTime = () => { currentTime += waitInterval ; const percentage = Math . floor (( currentTime / waitTime ) * 100 ); process . stdout . write ( ` ${ percentage } % complete \\n` ); }; console . log ( `setting a ${ waitTime / 1000 } second delay` ); const timerFinished = () => { clearInterval ( interval ); process . stdout . clearLine (); process . stdout . cursorTo ( 0 ); const percentage = Math . floor (( currentTime / waitTime ) * 100 ); console . log ( \"finished\" ); } const interval = setInterval ( incrementTime , waitInterval ); setTimeout ( timerFinished , waitTime ); node timer 2 setting a 2 second delay 25 % complete 50 % complete 75 % complete finished Node modules \u00b6 core modules \u00b6 collect information with readline \u00b6 use readline functions \u00b6 export custom modules \u00b6 create a module \u00b6 custom events with the EventEmitter \u00b6 improve a module with EventEmitter \u00b6 file system basics \u00b6 list directory files \u00b6 read files \u00b6 write & append files \u00b6 directory creation \u00b6 append files \u00b6 rename and remove \u00b6 rename and remove directories \u00b6 files and streams \u00b6 readable file streams \u00b6 writeable file streams \u00b6 create child process with exec \u00b6 create child process with spawn \u00b6","title":"Essentials"},{"location":"software/nodejs/essentials/#nodejs-essentials","text":"","title":"Node.js Essentials"},{"location":"software/nodejs/essentials/#what-is-nodejs","text":"","title":"what is Node.js?"},{"location":"software/nodejs/essentials/#nodejs-history","text":"has been around for about a decade and one of the most powerful JS tools available created by Ryan Dahl in 2009 as a JS runtime based on Chrome's v8 Engine in 2011 NPM version 1 was released to allow for sharing of open source node libraries this marked a huge shift in the way that code was shared and maintained and it started to submit Node.js as a huge player in the ecosystem after some infighting in the community about implementation and project management the Node.js Foundation was formed in 2015 the foundation is made up of several large companies including IBM, Microsoft, PayPal, and Groupon it is referred to as a collaborative project at the Linux Foundation you can find the Node.js Foundation on GitHub you can find the Node.js project itself , it is an open source project on GitHub","title":"Node.js history"},{"location":"software/nodejs/essentials/#how-nodejs-works","text":"Apache web server, is multi-threaded, a single thread waits for the file system to finish reading files before it can do anything else we refer to this as blocking Node.js is single threaded, Node.js is behaves asynchronously non-blocking event-driven IO a single thread that will respond to events in the order that they are raise this thread behaves asynchronously, it does not have to wait for resources to finish doing what they're doing before our thread can do anything else if the thread gets too busy it can duplicate and create a new thread to help Node.js is single threaded, all users are sharing the same thread events are raised and recorded in an event queue and then handled in the order that they were raised Node.js is asynchronous, which means it can do more than one thing at a time this ability to multi-task is what makes Node.js so fast and one of the reasons so many developers are building their web applications with Node.js","title":"How Node.js works"},{"location":"software/nodejs/essentials/#node-globals","text":"","title":"Node globals"},{"location":"software/nodejs/essentials/#the-global-object","text":"can exclude the .js when running files with node console = global.console the global object contains all the objects, methods, etc we can use in our Node.js files with out having to import any functionality","title":"the global object"},{"location":"software/nodejs/essentials/#the-require-function","text":"allows us to use other modules in our programs path module gives us tools to work with path strings every Node.js file we create is a module, it contains it's own code when we want to load other modules we must use a require() function const path = require ( \"path\" ); console . log ( __dirname ); console . log ( __filename ); console . log ( `this filename is ${ path . basename ( __filename ) } ` ); console . log ( process . pid ); console . log ( process . versions . node ); node code/nodejs/essentials/01.js /home/justin/Desktop/learning-docs/code/nodejs/essentials /home/justin/Desktop/learning-docs/code/nodejs/essentials/01.js this filename is 01 .js 26749 17 .4.0","title":"the require function"},{"location":"software/nodejs/essentials/#argument-variables-with-processargv","text":"globally available, gives us information about the current process as well as tools to interact with that process process.argv is an array const [,, arg1 , arg2 ] = process . argv console . log ( process . argv ); console . log ( arg1 , arg2 ) node code / nodejs / essentials / 02 . js argument3 argument4 [ '/home/justin/.nvm/versions/node/v17.4.0/bin/node' , '/home/justin/Desktop/docs/code/nodejs/essentials/02.js' , 'argument3' , 'argument4' ] argument3 argument4 const grab = flag => { let indexAfterFlag = process . argv . indexOf ( flag ) + 1 ; return process . argv [ indexAfterFlag ]; } const firstName = grab ( \"--first\" ) const lastName = grab ( \"--last\" ) console . log ( `Hello ${ firstName } ${ lastName } ` ) node process - args . js -- first justin -- last angeles Hello justin angeles","title":"argument variables with process.argv"},{"location":"software/nodejs/essentials/#stdout-stdin","text":"process.stdout is a writable string and it implements a write method use write method to send data out of our program stdout needs newline (\\n) characters to print a new line const questions = [ \"what is your name?\" , \"what would your rather be doing?\" , \"what is your favorite programming language?\" , ] const ask = ( i = 0 ) => { process . stdout . write ( `\\n\\n\\n ${ questions [ i ] } ` ); process . stdout . write ( ' > \\n' ) }; ask (); const answers = []; process . stdin . on ( \"data\" , data => { answers . push ( data . toString (). trim ()); if ( answers . length < questions . length ) { ask ( answers . length ); } else { process . exit (); } }); process . on ( \"exit\" , () => { const [ name , activity , lang ] = answers ; console . log ( ` go ${ activity } ${ name } , you can write ${ lang } later!! ` ) }); node questions.js what is your name? > justin what would your rather be doing? > study what is your favorite programming language? > javascript go study justin, you can write javascript later!!","title":"stdout stdin"},{"location":"software/nodejs/essentials/#settimeout-setinterval","text":"const waitTime = process . argv [ 2 ] * 1000 || 3000 ; const waitInterval = 500 ; let currentTime = 0 ; const incrementTime = () => { currentTime += waitInterval ; const percentage = Math . floor (( currentTime / waitTime ) * 100 ); process . stdout . write ( ` ${ percentage } % complete \\n` ); }; console . log ( `setting a ${ waitTime / 1000 } second delay` ); const timerFinished = () => { clearInterval ( interval ); process . stdout . clearLine (); process . stdout . cursorTo ( 0 ); const percentage = Math . floor (( currentTime / waitTime ) * 100 ); console . log ( \"finished\" ); } const interval = setInterval ( incrementTime , waitInterval ); setTimeout ( timerFinished , waitTime ); node timer 2 setting a 2 second delay 25 % complete 50 % complete 75 % complete finished","title":"setTimeout setInterval"},{"location":"software/nodejs/essentials/#node-modules","text":"","title":"Node modules"},{"location":"software/nodejs/essentials/#core-modules","text":"","title":"core modules"},{"location":"software/nodejs/essentials/#collect-information-with-readline","text":"","title":"collect information with readline"},{"location":"software/nodejs/essentials/#use-readline-functions","text":"","title":"use readline functions"},{"location":"software/nodejs/essentials/#export-custom-modules","text":"","title":"export custom modules"},{"location":"software/nodejs/essentials/#create-a-module","text":"","title":"create a module"},{"location":"software/nodejs/essentials/#custom-events-with-the-eventemitter","text":"","title":"custom events with the EventEmitter"},{"location":"software/nodejs/essentials/#improve-a-module-with-eventemitter","text":"","title":"improve a module with EventEmitter"},{"location":"software/nodejs/essentials/#file-system-basics","text":"","title":"file system basics"},{"location":"software/nodejs/essentials/#list-directory-files","text":"","title":"list directory files"},{"location":"software/nodejs/essentials/#read-files","text":"","title":"read files"},{"location":"software/nodejs/essentials/#write-append-files","text":"","title":"write &amp; append files"},{"location":"software/nodejs/essentials/#directory-creation","text":"","title":"directory creation"},{"location":"software/nodejs/essentials/#append-files","text":"","title":"append files"},{"location":"software/nodejs/essentials/#rename-and-remove","text":"","title":"rename and remove"},{"location":"software/nodejs/essentials/#rename-and-remove-directories","text":"","title":"rename and remove directories"},{"location":"software/nodejs/essentials/#files-and-streams","text":"","title":"files and streams"},{"location":"software/nodejs/essentials/#readable-file-streams","text":"","title":"readable file streams"},{"location":"software/nodejs/essentials/#writeable-file-streams","text":"","title":"writeable file streams"},{"location":"software/nodejs/essentials/#create-child-process-with-exec","text":"","title":"create child process with exec"},{"location":"software/nodejs/essentials/#create-child-process-with-spawn","text":"","title":"create child process with spawn"},{"location":"software/nodejs/static-server/","text":"Simple Static Server \u00b6 var http = require ( 'http' ); var fs = require ( 'fs' ); var path = require ( 'path' ); http . createServer ( function ( request , response ) { console . log ( 'request ' , request . url ); var filePath = '.' + request . url ; if ( filePath == './' ) { filePath = './index.html' ; } var extname = String ( path . extname ( filePath )). toLowerCase (); var mimeTypes = { '.html' : 'text/html' , '.js' : 'text/javascript' , '.css' : 'text/css' , '.json' : 'application/json' , '.png' : 'image/png' , '.jpg' : 'image/jpg' , '.gif' : 'image/gif' , '.svg' : 'image/svg+xml' , '.wav' : 'audio/wav' , '.mp4' : 'video/mp4' , '.woff' : 'application/font-woff' , '.ttf' : 'application/font-ttf' , '.eot' : 'application/vnd.ms-fontobject' , '.otf' : 'application/font-otf' , '.wasm' : 'application/wasm' }; var contentType = mimeTypes [ extname ] || 'application/octet-stream' ; fs . readFile ( filePath , function ( error , content ) { if ( error ) { if ( error . code == 'ENOENT' ) { fs . readFile ( './404.html' , function ( error , content ) { response . writeHead ( 404 , { 'Content-Type' : 'text/html' }); response . end ( content , 'utf-8' ); }); } else { response . writeHead ( 500 ); response . end ( 'Sorry, check with the site admin for error: ' + error . code + ' ..\\n' ); } } else { response . writeHead ( 200 , { 'Content-Type' : contentType }); response . end ( content , 'utf-8' ); } }); }). listen ( 8125 ); console . log ( 'Server running at http://127.0.0.1:8125/' );","title":"Static Server"},{"location":"software/nodejs/static-server/#simple-static-server","text":"var http = require ( 'http' ); var fs = require ( 'fs' ); var path = require ( 'path' ); http . createServer ( function ( request , response ) { console . log ( 'request ' , request . url ); var filePath = '.' + request . url ; if ( filePath == './' ) { filePath = './index.html' ; } var extname = String ( path . extname ( filePath )). toLowerCase (); var mimeTypes = { '.html' : 'text/html' , '.js' : 'text/javascript' , '.css' : 'text/css' , '.json' : 'application/json' , '.png' : 'image/png' , '.jpg' : 'image/jpg' , '.gif' : 'image/gif' , '.svg' : 'image/svg+xml' , '.wav' : 'audio/wav' , '.mp4' : 'video/mp4' , '.woff' : 'application/font-woff' , '.ttf' : 'application/font-ttf' , '.eot' : 'application/vnd.ms-fontobject' , '.otf' : 'application/font-otf' , '.wasm' : 'application/wasm' }; var contentType = mimeTypes [ extname ] || 'application/octet-stream' ; fs . readFile ( filePath , function ( error , content ) { if ( error ) { if ( error . code == 'ENOENT' ) { fs . readFile ( './404.html' , function ( error , content ) { response . writeHead ( 404 , { 'Content-Type' : 'text/html' }); response . end ( content , 'utf-8' ); }); } else { response . writeHead ( 500 ); response . end ( 'Sorry, check with the site admin for error: ' + error . code + ' ..\\n' ); } } else { response . writeHead ( 200 , { 'Content-Type' : contentType }); response . end ( content , 'utf-8' ); } }); }). listen ( 8125 ); console . log ( 'Server running at http://127.0.0.1:8125/' );","title":"Simple Static Server"},{"location":"software/react/authentication/","text":"React Authentication \u00b6 user authentication basics \u00b6 what is user authentication? \u00b6 verifying that our application's users are who they say they are JSON Web Tokens (JWT) \u00b6 strings we can give to users when they authenticate unique strings that we give to different users of our site after they have logged in form the figurative beating heart of most modern website authentication can be used instead of the user's password to interact with protected server resources if the user wants to interact with our database in any way as that user, such as update their information in our database, instead of having to send their password to our server everytime, they can send us this string instead JWT is a actually an encoded JSON object that contains information about our user, such as the id, email, and other application information { id : ' 123 ' , email : 'joh n .doe@gmail.com' , likesCo ffee : true , } usually encoded base64 the header tells us the type and signing algo of the token the payload is the actual data that the JSON web token contains pieces of the data in the payload are referred to as claims the signature is used to verify the authenticity of the data that the JWT contains in it's other parts the signature is created by combining the header and payload and signing those using the specified algo and a secret key the secret key is defined on the server anyone who has the token can see the information that it contains (unless it is encrypted), but they cannot change the data in the token unless they have the private key, which should not be the case because our server should be the only one with access to the private key JWT in full-stack apps \u00b6 user logs in server generates a JWT containing the user's information server sends token back to the user the front end / react / browser stores jwt in session or local storage whenever user wants to make privileged request, they send JWT along with their request server uses JWT signature to verify that it has not been modified when the front end send a JWT to the server, it will usually send the token in an { Authorization: 'Bearer ijsfiosjdifjsjfiosjfisojf'} request header tokens are credentials and they need to be treated with care never give anyone else access to your JWT tokens, never want to display them in a public place, and as a developer you want to make sure the user's JWT's are as secure as possible signing vs encrypting \u00b6 unfortunately these two concepts do seem fairly similar to each other at first glance, but there is a big difference between them signing = proves that the data in the JWT is correct and has not been modified encrypting = hides the data that the token contains from 3rd parties, JWTs are not encrypted by default do not put secret information inside of JWTs unless they are encrypted or unless you are using HTTPS JWT benefits \u00b6 they are stateless, all the info JWTs contain is contained inside of the token itself, so it does not require our backend to actively keep track of who is logged in in our DB we do not have to set properties on users saying logged in = true or anything like that use JSON which is more compact and secure (since signing JSON is generally easier and less vulnerable than XML)than using XML or other similar options to XML JWT drawbacks \u00b6 because of the way tokens work, they remain valid until they expire or until the private key is changed if a user's account gets hacked, there is not really a great way to kick the hacker out, even after the user changes their password, since the hacker will still have that JWT hard to block specific users without making our JWT flow stateful, by having a database that has blacklisted ids, for example tokens are valid until they expire or until the private key is changed the user will have to reauthenticate when the token expires the JWT standard does not define a process for refreshing tokens, so when the token expires, the user will have to reauthenticate (every 2 days or however long we set the expiration date) email verification \u00b6 resetting passwords \u00b6 OAuth \u00b6 prebuilt authentication options \u00b6 best practices \u00b6","title":"Authentication"},{"location":"software/react/authentication/#react-authentication","text":"","title":"React Authentication"},{"location":"software/react/authentication/#user-authentication-basics","text":"","title":"user authentication basics"},{"location":"software/react/authentication/#what-is-user-authentication","text":"verifying that our application's users are who they say they are","title":"what is user authentication?"},{"location":"software/react/authentication/#json-web-tokens-jwt","text":"strings we can give to users when they authenticate unique strings that we give to different users of our site after they have logged in form the figurative beating heart of most modern website authentication can be used instead of the user's password to interact with protected server resources if the user wants to interact with our database in any way as that user, such as update their information in our database, instead of having to send their password to our server everytime, they can send us this string instead JWT is a actually an encoded JSON object that contains information about our user, such as the id, email, and other application information { id : ' 123 ' , email : 'joh n .doe@gmail.com' , likesCo ffee : true , } usually encoded base64 the header tells us the type and signing algo of the token the payload is the actual data that the JSON web token contains pieces of the data in the payload are referred to as claims the signature is used to verify the authenticity of the data that the JWT contains in it's other parts the signature is created by combining the header and payload and signing those using the specified algo and a secret key the secret key is defined on the server anyone who has the token can see the information that it contains (unless it is encrypted), but they cannot change the data in the token unless they have the private key, which should not be the case because our server should be the only one with access to the private key","title":"JSON Web Tokens (JWT)"},{"location":"software/react/authentication/#jwt-in-full-stack-apps","text":"user logs in server generates a JWT containing the user's information server sends token back to the user the front end / react / browser stores jwt in session or local storage whenever user wants to make privileged request, they send JWT along with their request server uses JWT signature to verify that it has not been modified when the front end send a JWT to the server, it will usually send the token in an { Authorization: 'Bearer ijsfiosjdifjsjfiosjfisojf'} request header tokens are credentials and they need to be treated with care never give anyone else access to your JWT tokens, never want to display them in a public place, and as a developer you want to make sure the user's JWT's are as secure as possible","title":"JWT in full-stack apps"},{"location":"software/react/authentication/#signing-vs-encrypting","text":"unfortunately these two concepts do seem fairly similar to each other at first glance, but there is a big difference between them signing = proves that the data in the JWT is correct and has not been modified encrypting = hides the data that the token contains from 3rd parties, JWTs are not encrypted by default do not put secret information inside of JWTs unless they are encrypted or unless you are using HTTPS","title":"signing vs encrypting"},{"location":"software/react/authentication/#jwt-benefits","text":"they are stateless, all the info JWTs contain is contained inside of the token itself, so it does not require our backend to actively keep track of who is logged in in our DB we do not have to set properties on users saying logged in = true or anything like that use JSON which is more compact and secure (since signing JSON is generally easier and less vulnerable than XML)than using XML or other similar options to XML","title":"JWT benefits"},{"location":"software/react/authentication/#jwt-drawbacks","text":"because of the way tokens work, they remain valid until they expire or until the private key is changed if a user's account gets hacked, there is not really a great way to kick the hacker out, even after the user changes their password, since the hacker will still have that JWT hard to block specific users without making our JWT flow stateful, by having a database that has blacklisted ids, for example tokens are valid until they expire or until the private key is changed the user will have to reauthenticate when the token expires the JWT standard does not define a process for refreshing tokens, so when the token expires, the user will have to reauthenticate (every 2 days or however long we set the expiration date)","title":"JWT drawbacks"},{"location":"software/react/authentication/#email-verification","text":"","title":"email verification"},{"location":"software/react/authentication/#resetting-passwords","text":"","title":"resetting passwords"},{"location":"software/react/authentication/#oauth","text":"","title":"OAuth"},{"location":"software/react/authentication/#prebuilt-authentication-options","text":"","title":"prebuilt authentication options"},{"location":"software/react/authentication/#best-practices","text":"","title":"best practices"},{"location":"software/react/design-patterns/","text":"React Design Patterns \u00b6 what are design patterns? \u00b6 effective solutions to common application development challenges there are a lot of solutions to problems that are not effective that lead to more problems and that lead to more brittle code down the line and make your apps less performant and less maintainable the non-effective solutions are generally referred to as anti-patterns design patterns are the positive equivalent of anti-patterns, they are the most effective solutions to a given development challenge this pages design patterns are not referring to OOJ design patterns, they are React specific common challenges \u00b6 creating reusable layouts reusing complex logic between multiple components working with forms correctly incorporating functional concepts into our code Layout Components \u00b6 what are layout components? \u00b6 React components that deal primarily with arranging other components on the page some examples: split screens (arranging more than one component in different sections of the page) lists and items (displaying data in a list) modals (just content that gets displayed over the top of the actual page) normally when creating a component (like a side nav), the normal way we would go about doing that is by including the div and the styles that go with that side nav inside the component itself with layout components, we split the actual layout styles into their own component and then simply display the component itself (like a side nav), inside the layout component, this separates the component itself from where the component is being displayed on the page this gives us more flexibility with how we use it in the future the main idea with layout components is that the components we create, (the main content components of our pages), should not know or care where it is being displayed split-screen components \u00b6 styled-components are a package that makes it easy to create React styled components (npm i styled-components) use styled components to add weight to our components like for a navbar App.js import { SplitScreen } from \"./SplitScreen\" ; const LeftHandComponent = ({ name }) => { return < h1 style = {{ backgroundColor : \"green\" }} > { name } < /h1> } const RightHandComponent = ({ message }) => { return < p style = {{ backgroundColor : 'red' }} > { message } < /p> } function App () { return ( < SplitScreen left = { LeftHandComponent } right = { RightHandComponent } > < LeftHandComponent name = \"Justin\" /> < RightHandComponent message = \"Hello\" /> < /SplitScreen> ); } export default App ; SplitScreen.js import styled from \"styled-components\" ; const Container = styled . div ` display: flex ` ; const Pane = styled . div `flex: ${ props => props . weight } ;` export const SplitScreen = ({ children , leftWeight = 1 , rightWeight = 1 }) => { const [ left , right ] = children return ( < Container > < Pane weight = { leftWeight } > { left } < /Pane> < Pane weight = { rightWeight } > { right } < /Pane> < /Container> ) } list components \u00b6 App.js import { RegularList } from \"./RegularList\" ; import { NumberedList } from \"./NumberedList\" ; import { SmallPersonListItem } from \"./person/SmallPersonListItem\" ; import { LargePersonListItem } from \"./person/LargePersonListItem\" ; import { SmallProductListItem } from \"./product/SmallProductListItem\" ; import { LargeProductListItem } from \"./product/LargeProductListItem\" ; const people = [{ name : 'John Doe' , age : 54 , hairColor : 'brown' , hobbies : [ 'swimming' , 'bicycling' , 'video games' ], }, { name : 'Brenda Smith' , age : 33 , hairColor : 'black' , hobbies : [ 'golf' , 'mathematics' ], }, { name : 'Jane Garcia' , age : 27 , hairColor : 'blonde' , hobbies : [ 'biology' , 'medicine' , 'gymnastics' ], }]; const products = [{ name : 'Flat-Screen TV' , price : '$300' , description : 'Huge LCD screen, a great deal' , rating : 4.5 , }, { name : 'Basketball' , price : '$10' , description : 'Just like the pros use' , rating : 3.8 , }, { name : 'Running Shoes' , price : '$120' , description : 'State-of-the-art technology for optimum running' , rating : 4.2 , }]; function App () { return ( <> < RegularList items = { people } resourceName = \"person\" itemComponent = { SmallPersonListItem } /> < NumberedList items = { products } resourceName = \"product\" itemComponent = { SmallProductListItem } /> < RegularList items = { people } resourceName = \"person\" itemComponent = { LargePersonListItem } /> < NumberedList items = { products } resourceName = \"product\" itemComponent = { LargeProductListItem } /> < /> ); } export default App ; NumberedList.js export const NumberedList = ({ items , resourceName , itemComponent : ItemComponent , }) => { return ( <> { items . map (( item , i ) => ( <> < h3 > { i + 1 } < /h3> < ItemComponent key = { i } {...{[ resourceName ] : item }} /> < /> ))} < /> ) } RegularList.js export const RegularList = ({ items , resourceName , itemComponent : ItemComponent , }) => { return ( <> { items . map (( item , i ) => ( < ItemComponent key = { i } {...{ [ resourceName ] : item }} /> ))} < /> ) } SmallPersonListItem.js export const SmallPersonListItem = ({ person }) => { const { name , age } = person ; return ( < p > Name : { name }, Age : { age } < /p> ); } LargePersonListItem.js export const LargePersonListItem = ({ person }) => { const { name , age , hairColor , hobbies } = person ; return ( <> < h3 > { name } < /h3> < p > Age : { age } years < /p> < p > Hair Color : { hairColor } < /p> < h3 > Hobbies :< /h3> < ul > { hobbies . map ( hobby => < li key = { hobby } > { hobby } < /li>)} < /ul> < /> ); } SmallProductListItem.js export const SmallProductListItem = ({ product }) => { const { name , price } = product ; return ( < h3 > { name } - { price } < /h3> ) } LargeProductListItem.js export const LargeProductListItem = ({ product }) => { const { name , price , description , rating } = product ; return ( <> < h3 > { name } < /h3> < p > { price } < /p> < h3 > Description :< /h3> < p > { description } < /p> < p > Average Rating : { rating } < /p> < /> ) } modal components \u00b6 when most people go to add modals to the react application, most times, the first thing they do is install react modal, or some similar package this is not necessary and it is easy to implement your own container components \u00b6 what are container components? \u00b6 server instructions \u00b6 CurrentUserLoader component \u00b6 UserLoader component \u00b6 ResourceLoader component \u00b6 DataSource component \u00b6 loading data from localStorage \u00b6 controlled and uncontrolled components \u00b6 controlled vs uncontrolled components \u00b6 uncontrolled forms \u00b6 controlled forms \u00b6 controlled modals \u00b6 uncontrolled boarding flows \u00b6 collecting onboarding data \u00b6 controlled onboarding flows \u00b6 higher-order components \u00b6 what are higher-order components \u00b6 printing props with HOCs \u00b6 loading data with HOCs \u00b6 modifying data with HOCs \u00b6 creating forms with HOCs \u00b6 higher-order component improvements \u00b6 custom hooks patterns \u00b6 what are custom hooks? \u00b6 useCurrentUser hooks \u00b6 getCurrentUser hook \u00b6 useUser hook \u00b6 useResource hook \u00b6 useDataSource hook \u00b6 functional programming and React \u00b6 what is functional programming? \u00b6 recursive components \u00b6 component composition \u00b6 partially applied components \u00b6","title":"Design Patterns"},{"location":"software/react/design-patterns/#react-design-patterns","text":"","title":"React Design Patterns"},{"location":"software/react/design-patterns/#what-are-design-patterns","text":"effective solutions to common application development challenges there are a lot of solutions to problems that are not effective that lead to more problems and that lead to more brittle code down the line and make your apps less performant and less maintainable the non-effective solutions are generally referred to as anti-patterns design patterns are the positive equivalent of anti-patterns, they are the most effective solutions to a given development challenge this pages design patterns are not referring to OOJ design patterns, they are React specific","title":"what are design patterns?"},{"location":"software/react/design-patterns/#common-challenges","text":"creating reusable layouts reusing complex logic between multiple components working with forms correctly incorporating functional concepts into our code","title":"common challenges"},{"location":"software/react/design-patterns/#layout-components","text":"","title":"Layout Components"},{"location":"software/react/design-patterns/#what-are-layout-components","text":"React components that deal primarily with arranging other components on the page some examples: split screens (arranging more than one component in different sections of the page) lists and items (displaying data in a list) modals (just content that gets displayed over the top of the actual page) normally when creating a component (like a side nav), the normal way we would go about doing that is by including the div and the styles that go with that side nav inside the component itself with layout components, we split the actual layout styles into their own component and then simply display the component itself (like a side nav), inside the layout component, this separates the component itself from where the component is being displayed on the page this gives us more flexibility with how we use it in the future the main idea with layout components is that the components we create, (the main content components of our pages), should not know or care where it is being displayed","title":"what are layout components?"},{"location":"software/react/design-patterns/#split-screen-components","text":"styled-components are a package that makes it easy to create React styled components (npm i styled-components) use styled components to add weight to our components like for a navbar App.js import { SplitScreen } from \"./SplitScreen\" ; const LeftHandComponent = ({ name }) => { return < h1 style = {{ backgroundColor : \"green\" }} > { name } < /h1> } const RightHandComponent = ({ message }) => { return < p style = {{ backgroundColor : 'red' }} > { message } < /p> } function App () { return ( < SplitScreen left = { LeftHandComponent } right = { RightHandComponent } > < LeftHandComponent name = \"Justin\" /> < RightHandComponent message = \"Hello\" /> < /SplitScreen> ); } export default App ; SplitScreen.js import styled from \"styled-components\" ; const Container = styled . div ` display: flex ` ; const Pane = styled . div `flex: ${ props => props . weight } ;` export const SplitScreen = ({ children , leftWeight = 1 , rightWeight = 1 }) => { const [ left , right ] = children return ( < Container > < Pane weight = { leftWeight } > { left } < /Pane> < Pane weight = { rightWeight } > { right } < /Pane> < /Container> ) }","title":"split-screen components"},{"location":"software/react/design-patterns/#list-components","text":"App.js import { RegularList } from \"./RegularList\" ; import { NumberedList } from \"./NumberedList\" ; import { SmallPersonListItem } from \"./person/SmallPersonListItem\" ; import { LargePersonListItem } from \"./person/LargePersonListItem\" ; import { SmallProductListItem } from \"./product/SmallProductListItem\" ; import { LargeProductListItem } from \"./product/LargeProductListItem\" ; const people = [{ name : 'John Doe' , age : 54 , hairColor : 'brown' , hobbies : [ 'swimming' , 'bicycling' , 'video games' ], }, { name : 'Brenda Smith' , age : 33 , hairColor : 'black' , hobbies : [ 'golf' , 'mathematics' ], }, { name : 'Jane Garcia' , age : 27 , hairColor : 'blonde' , hobbies : [ 'biology' , 'medicine' , 'gymnastics' ], }]; const products = [{ name : 'Flat-Screen TV' , price : '$300' , description : 'Huge LCD screen, a great deal' , rating : 4.5 , }, { name : 'Basketball' , price : '$10' , description : 'Just like the pros use' , rating : 3.8 , }, { name : 'Running Shoes' , price : '$120' , description : 'State-of-the-art technology for optimum running' , rating : 4.2 , }]; function App () { return ( <> < RegularList items = { people } resourceName = \"person\" itemComponent = { SmallPersonListItem } /> < NumberedList items = { products } resourceName = \"product\" itemComponent = { SmallProductListItem } /> < RegularList items = { people } resourceName = \"person\" itemComponent = { LargePersonListItem } /> < NumberedList items = { products } resourceName = \"product\" itemComponent = { LargeProductListItem } /> < /> ); } export default App ; NumberedList.js export const NumberedList = ({ items , resourceName , itemComponent : ItemComponent , }) => { return ( <> { items . map (( item , i ) => ( <> < h3 > { i + 1 } < /h3> < ItemComponent key = { i } {...{[ resourceName ] : item }} /> < /> ))} < /> ) } RegularList.js export const RegularList = ({ items , resourceName , itemComponent : ItemComponent , }) => { return ( <> { items . map (( item , i ) => ( < ItemComponent key = { i } {...{ [ resourceName ] : item }} /> ))} < /> ) } SmallPersonListItem.js export const SmallPersonListItem = ({ person }) => { const { name , age } = person ; return ( < p > Name : { name }, Age : { age } < /p> ); } LargePersonListItem.js export const LargePersonListItem = ({ person }) => { const { name , age , hairColor , hobbies } = person ; return ( <> < h3 > { name } < /h3> < p > Age : { age } years < /p> < p > Hair Color : { hairColor } < /p> < h3 > Hobbies :< /h3> < ul > { hobbies . map ( hobby => < li key = { hobby } > { hobby } < /li>)} < /ul> < /> ); } SmallProductListItem.js export const SmallProductListItem = ({ product }) => { const { name , price } = product ; return ( < h3 > { name } - { price } < /h3> ) } LargeProductListItem.js export const LargeProductListItem = ({ product }) => { const { name , price , description , rating } = product ; return ( <> < h3 > { name } < /h3> < p > { price } < /p> < h3 > Description :< /h3> < p > { description } < /p> < p > Average Rating : { rating } < /p> < /> ) }","title":"list components"},{"location":"software/react/design-patterns/#modal-components","text":"when most people go to add modals to the react application, most times, the first thing they do is install react modal, or some similar package this is not necessary and it is easy to implement your own","title":"modal components"},{"location":"software/react/design-patterns/#container-components","text":"","title":"container components"},{"location":"software/react/design-patterns/#what-are-container-components","text":"","title":"what are container components?"},{"location":"software/react/design-patterns/#server-instructions","text":"","title":"server instructions"},{"location":"software/react/design-patterns/#currentuserloader-component","text":"","title":"CurrentUserLoader component"},{"location":"software/react/design-patterns/#userloader-component","text":"","title":"UserLoader component"},{"location":"software/react/design-patterns/#resourceloader-component","text":"","title":"ResourceLoader component"},{"location":"software/react/design-patterns/#datasource-component","text":"","title":"DataSource component"},{"location":"software/react/design-patterns/#loading-data-from-localstorage","text":"","title":"loading data from localStorage"},{"location":"software/react/design-patterns/#controlled-and-uncontrolled-components","text":"","title":"controlled and uncontrolled components"},{"location":"software/react/design-patterns/#controlled-vs-uncontrolled-components","text":"","title":"controlled vs uncontrolled components"},{"location":"software/react/design-patterns/#uncontrolled-forms","text":"","title":"uncontrolled forms"},{"location":"software/react/design-patterns/#controlled-forms","text":"","title":"controlled forms"},{"location":"software/react/design-patterns/#controlled-modals","text":"","title":"controlled modals"},{"location":"software/react/design-patterns/#uncontrolled-boarding-flows","text":"","title":"uncontrolled boarding flows"},{"location":"software/react/design-patterns/#collecting-onboarding-data","text":"","title":"collecting onboarding data"},{"location":"software/react/design-patterns/#controlled-onboarding-flows","text":"","title":"controlled onboarding flows"},{"location":"software/react/design-patterns/#higher-order-components","text":"","title":"higher-order components"},{"location":"software/react/design-patterns/#what-are-higher-order-components","text":"","title":"what are higher-order components"},{"location":"software/react/design-patterns/#printing-props-with-hocs","text":"","title":"printing props with HOCs"},{"location":"software/react/design-patterns/#loading-data-with-hocs","text":"","title":"loading data with HOCs"},{"location":"software/react/design-patterns/#modifying-data-with-hocs","text":"","title":"modifying data with HOCs"},{"location":"software/react/design-patterns/#creating-forms-with-hocs","text":"","title":"creating forms with HOCs"},{"location":"software/react/design-patterns/#higher-order-component-improvements","text":"","title":"higher-order component improvements"},{"location":"software/react/design-patterns/#custom-hooks-patterns","text":"","title":"custom hooks patterns"},{"location":"software/react/design-patterns/#what-are-custom-hooks","text":"","title":"what are custom hooks?"},{"location":"software/react/design-patterns/#usecurrentuser-hooks","text":"","title":"useCurrentUser hooks"},{"location":"software/react/design-patterns/#getcurrentuser-hook","text":"","title":"getCurrentUser hook"},{"location":"software/react/design-patterns/#useuser-hook","text":"","title":"useUser hook"},{"location":"software/react/design-patterns/#useresource-hook","text":"","title":"useResource hook"},{"location":"software/react/design-patterns/#usedatasource-hook","text":"","title":"useDataSource hook"},{"location":"software/react/design-patterns/#functional-programming-and-react","text":"","title":"functional programming and React"},{"location":"software/react/design-patterns/#what-is-functional-programming","text":"","title":"what is functional programming?"},{"location":"software/react/design-patterns/#recursive-components","text":"","title":"recursive components"},{"location":"software/react/design-patterns/#component-composition","text":"","title":"component composition"},{"location":"software/react/design-patterns/#partially-applied-components","text":"","title":"partially applied components"},{"location":"software/react/ecosystems/","text":"React Ecosystems \u00b6 React ecosystem \u00b6 React is the ecosystem nucleus \u00b6 React is like the nucleus of a powerful ecosystem React does not try to be too many things has a small library or API to keep things simple the power lies in giving you the proper syntax and infrastructure to build your application with components everywhere uses props (properties / parameters) to pass data to your components uses states to keep track of your current application state allows the community and ecosystem to address other needs you might have with your application it is the ecosystem that makes React so valuable React ecosystem electrons \u00b6 as React popularity has soared over the years a developer community has gathered around it's core and built hundreds of extensions to provide everything we need to build best in class and enterprise applications when you look at the electrons surrounding the React core you can see tons of functional libraries helping us achieve specific goals for applications application goals: server-side rendering state management mobile testing and debugging animation routing and navigation types many others the electrons \u00b6 routing & navigation \u00b6 use them every day when you surf the web or navigate through an applications menu behind the scenes, routing basically happens as a function of navigating to different pages, or sections of a website or app when you browse a webpage and click on a navigation link, you are routed to a new page although it may seem complex initially, routing is really quite simple, when you like on a link named news, the link calls a route named news the route \"news\", has a component named news attached to it, and the component will render that page in the browser if you click on other links, the same process happens over and over again on a mobile or web application it is the same when you tab or click any items that require a render for a new section or page best way to route is react is react-router react router training server-side rendering \u00b6 a website normally renders on the server where it is usually hosted, or your browser, commonly called a client depending on the application some are rendered on the server and some on the client it means grabbing all of your code and representing all of your code can be done on both sides benefits of rendering on server-side: faster more secure SEO friendly do this in React by using ReactDomServer APIs, provided with Reacts core library in the server code we can use: renderToString(element) renderToStaticMarkup(element) SSR docs are on https://facebook.github.io/react state management \u00b6 when data changes or when you click on a link, the application will change to reflect these events think of a state as the webpage you are on before there are any changes or before you click on any links that is the current state of the site or application at that point in time when we click on a link, we change the state of the application at another point in time in its simplest form, state management is: managing different points in time, or states for your application with React, we get an object we can observe and analyze, which is called state so as these events occur, you see the state changing, both visually on the web page or application, and internally in the state object Redux, one of the leading libraries, provides us with great syntax and structure to manage out state Redux has actions that call reducers, which are functions that create a new state based on the previous one with the new action added to it if we click the action, \"get me the latest news\", the reducer will copy the old list of news, add the new ones, and create a new state object with the updated news learn about Redux at redux.js.org or take linked in learning course on the subject mobile \u00b6 a couple years ago Reacts team decided to remove the react web apis, called react-dom from the react library this opened up the possibility of using React in new environments such as mobile devices react native allows building mobile applications react native ecosystem includes: routing UI starting kits IDEs testing checkout linkedin react native course animation \u00b6 research has shown that subtle, well placed animation makes the difference between an addictive application and one that just feels meh react has a few tools for animation, such as the transition group which is part of reacts library, which is quite simple and does not provide too many options if you want to push the possibilities or do a fell feature show using the 12 principles of animation then you are better off using a library such as react-motion react-motion offers spring, motion, and transitions, and many other ways to get your components on and off the screen get started with react motion at github.com/chenglou/react-motion testing and debugging \u00b6 application development almost never goes smoothly React developer tools are good for when you need to inspect components to figure out what the state of your application is, or when you need to see what your state object looks like, or when you need to see what props are being passed to your component, it is built on top of your browser's development tools and it will let you see all of this information and more jest is good for: to see if a component renders correctly with snapshots, which are great for UI tests when you need to know which files are being tested, JEST provides great coverage support good when you need to validate that the proper values are returned with matchers even though Jest is built by Facebook and aimed at React applications, you can also use it with many other frameworks, so the time invested in learning it is well spent types \u00b6 type checking type checking allows us to specify the type of data our variables, objects, or functions are expecting adds another tool for application efficiency and bug prevention when pass a value that is not of the expected type accidentally, in your program it will lead to trouble the benefit to type checking is to eliminate alot of the common and easily avoidable bugs or better understand why your code might not work as expected 2 ways to get started, propTypes (by facebook) or flow.org (also by facebook)","title":"Ecosystem"},{"location":"software/react/ecosystems/#react-ecosystems","text":"","title":"React Ecosystems"},{"location":"software/react/ecosystems/#react-ecosystem","text":"","title":"React ecosystem"},{"location":"software/react/ecosystems/#react-is-the-ecosystem-nucleus","text":"React is like the nucleus of a powerful ecosystem React does not try to be too many things has a small library or API to keep things simple the power lies in giving you the proper syntax and infrastructure to build your application with components everywhere uses props (properties / parameters) to pass data to your components uses states to keep track of your current application state allows the community and ecosystem to address other needs you might have with your application it is the ecosystem that makes React so valuable","title":"React is the ecosystem nucleus"},{"location":"software/react/ecosystems/#react-ecosystem-electrons","text":"as React popularity has soared over the years a developer community has gathered around it's core and built hundreds of extensions to provide everything we need to build best in class and enterprise applications when you look at the electrons surrounding the React core you can see tons of functional libraries helping us achieve specific goals for applications application goals: server-side rendering state management mobile testing and debugging animation routing and navigation types many others","title":"React ecosystem electrons"},{"location":"software/react/ecosystems/#the-electrons","text":"","title":"the electrons"},{"location":"software/react/ecosystems/#routing-navigation","text":"use them every day when you surf the web or navigate through an applications menu behind the scenes, routing basically happens as a function of navigating to different pages, or sections of a website or app when you browse a webpage and click on a navigation link, you are routed to a new page although it may seem complex initially, routing is really quite simple, when you like on a link named news, the link calls a route named news the route \"news\", has a component named news attached to it, and the component will render that page in the browser if you click on other links, the same process happens over and over again on a mobile or web application it is the same when you tab or click any items that require a render for a new section or page best way to route is react is react-router react router training","title":"routing &amp; navigation"},{"location":"software/react/ecosystems/#server-side-rendering","text":"a website normally renders on the server where it is usually hosted, or your browser, commonly called a client depending on the application some are rendered on the server and some on the client it means grabbing all of your code and representing all of your code can be done on both sides benefits of rendering on server-side: faster more secure SEO friendly do this in React by using ReactDomServer APIs, provided with Reacts core library in the server code we can use: renderToString(element) renderToStaticMarkup(element) SSR docs are on https://facebook.github.io/react","title":"server-side rendering"},{"location":"software/react/ecosystems/#state-management","text":"when data changes or when you click on a link, the application will change to reflect these events think of a state as the webpage you are on before there are any changes or before you click on any links that is the current state of the site or application at that point in time when we click on a link, we change the state of the application at another point in time in its simplest form, state management is: managing different points in time, or states for your application with React, we get an object we can observe and analyze, which is called state so as these events occur, you see the state changing, both visually on the web page or application, and internally in the state object Redux, one of the leading libraries, provides us with great syntax and structure to manage out state Redux has actions that call reducers, which are functions that create a new state based on the previous one with the new action added to it if we click the action, \"get me the latest news\", the reducer will copy the old list of news, add the new ones, and create a new state object with the updated news learn about Redux at redux.js.org or take linked in learning course on the subject","title":"state management"},{"location":"software/react/ecosystems/#mobile","text":"a couple years ago Reacts team decided to remove the react web apis, called react-dom from the react library this opened up the possibility of using React in new environments such as mobile devices react native allows building mobile applications react native ecosystem includes: routing UI starting kits IDEs testing checkout linkedin react native course","title":"mobile"},{"location":"software/react/ecosystems/#animation","text":"research has shown that subtle, well placed animation makes the difference between an addictive application and one that just feels meh react has a few tools for animation, such as the transition group which is part of reacts library, which is quite simple and does not provide too many options if you want to push the possibilities or do a fell feature show using the 12 principles of animation then you are better off using a library such as react-motion react-motion offers spring, motion, and transitions, and many other ways to get your components on and off the screen get started with react motion at github.com/chenglou/react-motion","title":"animation"},{"location":"software/react/ecosystems/#testing-and-debugging","text":"application development almost never goes smoothly React developer tools are good for when you need to inspect components to figure out what the state of your application is, or when you need to see what your state object looks like, or when you need to see what props are being passed to your component, it is built on top of your browser's development tools and it will let you see all of this information and more jest is good for: to see if a component renders correctly with snapshots, which are great for UI tests when you need to know which files are being tested, JEST provides great coverage support good when you need to validate that the proper values are returned with matchers even though Jest is built by Facebook and aimed at React applications, you can also use it with many other frameworks, so the time invested in learning it is well spent","title":"testing and debugging"},{"location":"software/react/ecosystems/#types","text":"type checking type checking allows us to specify the type of data our variables, objects, or functions are expecting adds another tool for application efficiency and bug prevention when pass a value that is not of the expected type accidentally, in your program it will lead to trouble the benefit to type checking is to eliminate alot of the common and easily avoidable bugs or better understand why your code might not work as expected 2 ways to get started, propTypes (by facebook) or flow.org (also by facebook)","title":"types"},{"location":"software/react/essentials/","text":"React Essentials \u00b6 components \u00b6 think of a component as being a building block, a little piece of the UI that you use to describe one part of our application we create a component by creating a function, which returns JSX, or UI think of a component as a function that returns UI we can compose these functions together to create a larger application you can use components to display dynamic data JSX \u00b6 React.createElement appends elements to the DOM this is not how React is normally used import React from 'react' ; import ReactDOM from 'react-dom' ; import './index.css' ; ReactDOM . render ( React . createElement ( \"ul\" , null , React . createElement ( \"li\" , null , \"list item\" ) React . createElement ( \"li\" , null , \"list item\" ) React . createElement ( \"li\" , null , \"list item\" ) React . createElement ( \"li\" , null , \"list item\" ) React . createElement ( \"li\" , null , \"list item\" ) ), document . getElementById ( 'root' ) ); javascript as XML a language extension that allows you to write tags directly in JavaScript does not run in the browser natively / naturally if a JS file with JSX tried running in the web browser it would not work and throw errors this is where create-react-app comes in, using babel babel is a tool that is working behind the scenes see babeljs.io compiler page to see how it works babel is a super useful tool that is found in a ton of different JS projects if you are writing JSX or some sort of new JS syntax that is not supported in older browsers, babel will do the hard work of compiling your code behind the scenes component properties \u00b6 every React components has access to an object called props (for properties) when creating React component functions, we use props for the parameters and then use the props / parameters inside of the function body we call functions in React using JSX syntax we access the props properties by using props.MYPROPERTY (dot notation) inside of our function body think of props being this little kind of backpack that you can place different information in for every single component when we render the component we pass properties like attributes / named arguments in to the component using JSX syntax any keywords in HTML or CSS that clash with keywords in react or use hyphens are replaced with a camel-case version const Header = ( props ) => { return ( < h1 > { props . name } ' s Header < /h1> ) } const Main = ( props ) => { return ( < p > { props . adjective } < /p> ) } const Footer = ( props ) => { return ( < h3 > { props . date } < /h3> ) } function App () { return ( < div > < Header name = \"Justin\" /> < Main adjective = \"so freakin awesome\" /> < Footer date = { new Date (). getFullYear ()} /> < /div> ); } export default App ; component file names are usually capitalized import your own components using a relative file path when creating list components, they need to be created with a key, which is like a unique id and can most likely come from the id of the data you are using / mapping styling components \u00b6 you can use curly braces and pass in style={style-object} as an argument to a component to style it you can style by passing in className=\"my classes class3\" as well try not to use strings however, it is better assign them as variables before the return statement working with lists \u00b6 to display more complex data with our components, we can use lists we can use the .map() Array method to map the list items as components when passing in a variable as an argument we use curly braces, which is pretty much always unless we are passing in a string try not to use strings in your code, make them variables first each child in a list should have a unique key property a key is like an ID that helps keep everything in sync it is possible that our array items might get out of sync when rendering occurs particularly when something is being added to the DOM at the beginning or the middle of the list instead of the end there are a couple different ways we can handle this one thing we can do is add an index to our map method that we can use as a key, but this is not recommended React documentation says using an array index as a key can cause problems when rendering the items to the DOM normally when working with data this should not be too much of a problem because the data will have a unique ID we can use if we do not have a unique Id we can use a transformation function to map over the list and create an object whenever we return an object from a function like this in line, we need to wrap it in parenthesis keys help your data stay in sync as your application data changes over time const Main = ( props ) => { return ( < div > < p > { props . adjective } < /p> < ul > { props . myList . map (( listItem ) => ( < li key = { listItem . id } > { listItem . day } < /li> ))} < /ul> < /div> ) }; const Footer = ( props ) => { return ( < h3 > { props . date } < /h3> ) } function App () { const weekDays = [ 'monday' , 'tuesday' , 'wednesday' , 'thursday' , 'friday' , 'saturday' , 'sunday' ] const weekDaysObject = weekDaysList . map (( weekday , index ) => ({ id : index , day : weekday })) return ( < div > < Header name = \"Justin\" /> < Main myList = { weekDaysObject } adjective = \"so freakin awesome\" /> < Footer date = { new Date (). getFullYear ()} /> < /div> ); } using React.Fragment \u00b6 JSX must always return with a single parent node text nodes count, so a one-element, one-line return would work, and without parenthesis if there is more than 1 element and it spans lines, the return statement must have opening and closing parenthesis and a single parent element wrapping the render statement JSX with or <> can basically act as a parent div as well adding images \u00b6 add images to React just like with HTML import the image from the relative directory path use img tag with src attribute and curly braces for imported variable name can also use URLS img elements must have an alt prop, either with meaningful text, or an empty string for decorative images always add an alt to images for the visually impaired import imageName from './images-dir/my-image.jpg' ; const myImage = () => { const myImageUrl = \"https://github.com/justinsgithub.png\" return ( < img src = { myImageUrl } height = { 200 } alt = \"justinsgithub image\" /> < img src = { imageName } alt = \"alternate description for imageName\" /> ) } state in the component tree \u00b6 conditional rendering \u00b6 components can be rendered conditionally we can choose certain components to display based on the value of whatever variables we choose in our code we can use terser syntax for conditional rendering ? true : veryTrue we can also set bind components with different attributes to variable names, for easier conditionals in some situations import React from \"react\" ; import \"./App.css\" const Title = ( props ) => { return < h1 > { props . name } < /h1> } const Header = ( props ) => { const justin = < Title name = \"justin\" /> const notJustin = < Title name = \"not justin\" /> return ( < header > { props . isJustin === true ? justin : notJustin } < /header> ) } function App () { let isJustin = true return ( < Header isJustin = { isJustin } /> ); } export default App ; array destructuring \u00b6 a way to automatically assign variable names to array items const [ word1 , word2 , word3 ] = [ 'random' , 'word' , 'array' ] console . log ( word2 ) // 'word' const [,, word3 ] = [ 'random' , 'word' , 'array' ] console . log ( word3 ) // 'array' often used with the props object import React from \"react\" ; import \"./App.css\" const Title = ({ name }) => { return < h1 > { name } < /h1> } const Header = ( props ) => { const justin = < Title name = \"justin\" /> const notJustin = < Title name = \"not justin\" /> return ( < header > { props . isJustin === true ? justin : notJustin } < /header> ) } function App () { let isJustin = true return ( < Header isJustin = { isJustin } /> ); } export default App ; handling loading states \u00b6 when we make a http request to an API, there are 3 possible states: pending / loading success failed, this can happen at times such as making a request to a broken URL handling states example \u00b6 ``` import React,{useState, useEffect} from \"react\"; import \"./App.css\" function App({login}) { const [dataState, setDataState] = useState(null) const [loadingState, setLoadingState] = useState(false) const [errorState, setErrorState] = useState(null) const ghurl = \"https://api.github.com/users\" useEffect(() => { if(!login) return; setLoadingState(true); fetch(` ${ ghurl } / ${ login } `) .then(response => response.json()) .then(setDataState) .then(() => setLoadingState(false)) .catch(setErrorState) }, [login]); if (loadingState) return <h1> Loading... </h1> ; if (errorState) return <pre> {JSON.stringify(errorState, null, 2)} </pre> ; if (!dataState) return null; return( < > <div> <h1> {dataState.name} </h1> <h1> {dataState.login} </h1> <p> {dataState.location} </p> <img alt= {dataState.login} src= {dataState.avatar_url}/ > </div> ); }; export default App; ``` React router \u00b6 when creating a React application, we are creating a SPA (single page application) you can think of a SPA as instead of creating different files for different pages, we create a single page and javascript is going to load information and change the UI something that becomes tricky when creating an SPA, is somehow handling routing how are we gonna get users from page to page? we can use react router to help us when developing for web application, react-router-dom is used, react-router has tools for native applications as well the router lives in the index.js file index.js is where you pass all the information from the router to any nested components npm install react-router@next react-router-dom@next route properties \u00b6 routes take in 2 arguments a path argument which is the URL we want to use an element argument, which is the Components we want to display at that URL the home component would be path=\"/\" link component \u00b6 the link component takes an argument called to (to=\"/my-page\") you can create a custom 404 page using path=\"*\" useLocation \u00b6 a function that is going to return our current location let location = useLocation () nested routes \u00b6 use Outlet to setup nested routes index.js \u00b6 import React from 'react' ; import ReactDOM from 'react-dom' ; import './index.css' ; import App from './App' ; import { BrowserRouter as Router } from \"react-router-dom\" ; // <App login=\"justinsgithub\"/>, document.getElementById('root')); ReactDOM . render ( < Router > < App /> < /Router>, document . getElementById ( 'root' ) ); App.js \u00b6 import { Routes , Route } from \"react-router-dom\" ; import \"./App.css\" import { Home , About , Events , Contact , Whoops404 , Services , CompanyHistory , Location } from './pages' ; function App () { return ( < div > < Routes > < Route path = \"/\" element = { < Home /> } /> < Route path = \"/about\" element = { < About /> } > < Route path = \"services\" element = { < Services /> } /> < Route path = \"location\" element = { < Location /> } /> < Route path = \"history\" element = { < CompanyHistory /> } /> < /Route> < Route path = \"/events\" element = { < Events /> } /> < Route path = \"/contact\" element = { < Contact /> } /> < Route path = \"*\" element = { < Whoops404 /> } /> < /Routes> < /div> ); }; export default App ; pages.js \u00b6 import React from 'react' ; import { Link , useLocation , Outlet } from 'react-router-dom' ; export function Home () { return ( < div > < h1 > [ Company Website ] < /h1> < nav > < Link to = \"about\" > About < /Link> < Link to = \"events\" > Events < /Link> < Link to = \"contact\" > Contact < /Link> < /nav> < /div> ); } export function About () { return ( < div > < h1 > [ About ] < /h1> < Outlet /> < /div> ); } export function Events () { return ( < div > < h1 > [ Events ] < /h1> < /div> ); } export function Contact () { return ( < div > < h1 > [ Contact ] < /h1> < /div> ); } export function Whoops404 () { let location = useLocation () return ( < h1 > whoopsies no page found at { location . pathname } < /h1> ) } export function Services () { return ( < div > < h2 > Our Services < /h2> < /div> ) } export function CompanyHistory () { return ( < div > < h2 > Our Company History < /h2> < /div> ) } export function Location () { return ( < div > < h2 > Our Location < /h2> < /div> ) }","title":"Essentials"},{"location":"software/react/essentials/#react-essentials","text":"","title":"React Essentials"},{"location":"software/react/essentials/#components","text":"think of a component as being a building block, a little piece of the UI that you use to describe one part of our application we create a component by creating a function, which returns JSX, or UI think of a component as a function that returns UI we can compose these functions together to create a larger application you can use components to display dynamic data","title":"components"},{"location":"software/react/essentials/#jsx","text":"React.createElement appends elements to the DOM this is not how React is normally used import React from 'react' ; import ReactDOM from 'react-dom' ; import './index.css' ; ReactDOM . render ( React . createElement ( \"ul\" , null , React . createElement ( \"li\" , null , \"list item\" ) React . createElement ( \"li\" , null , \"list item\" ) React . createElement ( \"li\" , null , \"list item\" ) React . createElement ( \"li\" , null , \"list item\" ) React . createElement ( \"li\" , null , \"list item\" ) ), document . getElementById ( 'root' ) ); javascript as XML a language extension that allows you to write tags directly in JavaScript does not run in the browser natively / naturally if a JS file with JSX tried running in the web browser it would not work and throw errors this is where create-react-app comes in, using babel babel is a tool that is working behind the scenes see babeljs.io compiler page to see how it works babel is a super useful tool that is found in a ton of different JS projects if you are writing JSX or some sort of new JS syntax that is not supported in older browsers, babel will do the hard work of compiling your code behind the scenes","title":"JSX"},{"location":"software/react/essentials/#component-properties","text":"every React components has access to an object called props (for properties) when creating React component functions, we use props for the parameters and then use the props / parameters inside of the function body we call functions in React using JSX syntax we access the props properties by using props.MYPROPERTY (dot notation) inside of our function body think of props being this little kind of backpack that you can place different information in for every single component when we render the component we pass properties like attributes / named arguments in to the component using JSX syntax any keywords in HTML or CSS that clash with keywords in react or use hyphens are replaced with a camel-case version const Header = ( props ) => { return ( < h1 > { props . name } ' s Header < /h1> ) } const Main = ( props ) => { return ( < p > { props . adjective } < /p> ) } const Footer = ( props ) => { return ( < h3 > { props . date } < /h3> ) } function App () { return ( < div > < Header name = \"Justin\" /> < Main adjective = \"so freakin awesome\" /> < Footer date = { new Date (). getFullYear ()} /> < /div> ); } export default App ; component file names are usually capitalized import your own components using a relative file path when creating list components, they need to be created with a key, which is like a unique id and can most likely come from the id of the data you are using / mapping","title":"component properties"},{"location":"software/react/essentials/#styling-components","text":"you can use curly braces and pass in style={style-object} as an argument to a component to style it you can style by passing in className=\"my classes class3\" as well try not to use strings however, it is better assign them as variables before the return statement","title":"styling components"},{"location":"software/react/essentials/#working-with-lists","text":"to display more complex data with our components, we can use lists we can use the .map() Array method to map the list items as components when passing in a variable as an argument we use curly braces, which is pretty much always unless we are passing in a string try not to use strings in your code, make them variables first each child in a list should have a unique key property a key is like an ID that helps keep everything in sync it is possible that our array items might get out of sync when rendering occurs particularly when something is being added to the DOM at the beginning or the middle of the list instead of the end there are a couple different ways we can handle this one thing we can do is add an index to our map method that we can use as a key, but this is not recommended React documentation says using an array index as a key can cause problems when rendering the items to the DOM normally when working with data this should not be too much of a problem because the data will have a unique ID we can use if we do not have a unique Id we can use a transformation function to map over the list and create an object whenever we return an object from a function like this in line, we need to wrap it in parenthesis keys help your data stay in sync as your application data changes over time const Main = ( props ) => { return ( < div > < p > { props . adjective } < /p> < ul > { props . myList . map (( listItem ) => ( < li key = { listItem . id } > { listItem . day } < /li> ))} < /ul> < /div> ) }; const Footer = ( props ) => { return ( < h3 > { props . date } < /h3> ) } function App () { const weekDays = [ 'monday' , 'tuesday' , 'wednesday' , 'thursday' , 'friday' , 'saturday' , 'sunday' ] const weekDaysObject = weekDaysList . map (( weekday , index ) => ({ id : index , day : weekday })) return ( < div > < Header name = \"Justin\" /> < Main myList = { weekDaysObject } adjective = \"so freakin awesome\" /> < Footer date = { new Date (). getFullYear ()} /> < /div> ); }","title":"working with lists"},{"location":"software/react/essentials/#using-reactfragment","text":"JSX must always return with a single parent node text nodes count, so a one-element, one-line return would work, and without parenthesis if there is more than 1 element and it spans lines, the return statement must have opening and closing parenthesis and a single parent element wrapping the render statement JSX with or <> can basically act as a parent div as well","title":"using React.Fragment"},{"location":"software/react/essentials/#adding-images","text":"add images to React just like with HTML import the image from the relative directory path use img tag with src attribute and curly braces for imported variable name can also use URLS img elements must have an alt prop, either with meaningful text, or an empty string for decorative images always add an alt to images for the visually impaired import imageName from './images-dir/my-image.jpg' ; const myImage = () => { const myImageUrl = \"https://github.com/justinsgithub.png\" return ( < img src = { myImageUrl } height = { 200 } alt = \"justinsgithub image\" /> < img src = { imageName } alt = \"alternate description for imageName\" /> ) }","title":"adding images"},{"location":"software/react/essentials/#state-in-the-component-tree","text":"","title":"state in the component tree"},{"location":"software/react/essentials/#conditional-rendering","text":"components can be rendered conditionally we can choose certain components to display based on the value of whatever variables we choose in our code we can use terser syntax for conditional rendering ? true : veryTrue we can also set bind components with different attributes to variable names, for easier conditionals in some situations import React from \"react\" ; import \"./App.css\" const Title = ( props ) => { return < h1 > { props . name } < /h1> } const Header = ( props ) => { const justin = < Title name = \"justin\" /> const notJustin = < Title name = \"not justin\" /> return ( < header > { props . isJustin === true ? justin : notJustin } < /header> ) } function App () { let isJustin = true return ( < Header isJustin = { isJustin } /> ); } export default App ;","title":"conditional rendering"},{"location":"software/react/essentials/#array-destructuring","text":"a way to automatically assign variable names to array items const [ word1 , word2 , word3 ] = [ 'random' , 'word' , 'array' ] console . log ( word2 ) // 'word' const [,, word3 ] = [ 'random' , 'word' , 'array' ] console . log ( word3 ) // 'array' often used with the props object import React from \"react\" ; import \"./App.css\" const Title = ({ name }) => { return < h1 > { name } < /h1> } const Header = ( props ) => { const justin = < Title name = \"justin\" /> const notJustin = < Title name = \"not justin\" /> return ( < header > { props . isJustin === true ? justin : notJustin } < /header> ) } function App () { let isJustin = true return ( < Header isJustin = { isJustin } /> ); } export default App ;","title":"array destructuring"},{"location":"software/react/essentials/#handling-loading-states","text":"when we make a http request to an API, there are 3 possible states: pending / loading success failed, this can happen at times such as making a request to a broken URL","title":"handling loading states"},{"location":"software/react/essentials/#handling-states-example","text":"``` import React,{useState, useEffect} from \"react\"; import \"./App.css\" function App({login}) { const [dataState, setDataState] = useState(null) const [loadingState, setLoadingState] = useState(false) const [errorState, setErrorState] = useState(null) const ghurl = \"https://api.github.com/users\" useEffect(() => { if(!login) return; setLoadingState(true); fetch(` ${ ghurl } / ${ login } `) .then(response => response.json()) .then(setDataState) .then(() => setLoadingState(false)) .catch(setErrorState) }, [login]); if (loadingState) return <h1> Loading... </h1> ; if (errorState) return <pre> {JSON.stringify(errorState, null, 2)} </pre> ; if (!dataState) return null; return( < > <div> <h1> {dataState.name} </h1> <h1> {dataState.login} </h1> <p> {dataState.location} </p> <img alt= {dataState.login} src= {dataState.avatar_url}/ > </div> ); }; export default App; ```","title":"handling states example"},{"location":"software/react/essentials/#react-router","text":"when creating a React application, we are creating a SPA (single page application) you can think of a SPA as instead of creating different files for different pages, we create a single page and javascript is going to load information and change the UI something that becomes tricky when creating an SPA, is somehow handling routing how are we gonna get users from page to page? we can use react router to help us when developing for web application, react-router-dom is used, react-router has tools for native applications as well the router lives in the index.js file index.js is where you pass all the information from the router to any nested components npm install react-router@next react-router-dom@next","title":"React router"},{"location":"software/react/essentials/#route-properties","text":"routes take in 2 arguments a path argument which is the URL we want to use an element argument, which is the Components we want to display at that URL the home component would be path=\"/\"","title":"route properties"},{"location":"software/react/essentials/#link-component","text":"the link component takes an argument called to (to=\"/my-page\") you can create a custom 404 page using path=\"*\"","title":"link component"},{"location":"software/react/essentials/#uselocation","text":"a function that is going to return our current location let location = useLocation ()","title":"useLocation"},{"location":"software/react/essentials/#nested-routes","text":"use Outlet to setup nested routes","title":"nested routes"},{"location":"software/react/essentials/#indexjs","text":"import React from 'react' ; import ReactDOM from 'react-dom' ; import './index.css' ; import App from './App' ; import { BrowserRouter as Router } from \"react-router-dom\" ; // <App login=\"justinsgithub\"/>, document.getElementById('root')); ReactDOM . render ( < Router > < App /> < /Router>, document . getElementById ( 'root' ) );","title":"index.js"},{"location":"software/react/essentials/#appjs","text":"import { Routes , Route } from \"react-router-dom\" ; import \"./App.css\" import { Home , About , Events , Contact , Whoops404 , Services , CompanyHistory , Location } from './pages' ; function App () { return ( < div > < Routes > < Route path = \"/\" element = { < Home /> } /> < Route path = \"/about\" element = { < About /> } > < Route path = \"services\" element = { < Services /> } /> < Route path = \"location\" element = { < Location /> } /> < Route path = \"history\" element = { < CompanyHistory /> } /> < /Route> < Route path = \"/events\" element = { < Events /> } /> < Route path = \"/contact\" element = { < Contact /> } /> < Route path = \"*\" element = { < Whoops404 /> } /> < /Routes> < /div> ); }; export default App ;","title":"App.js"},{"location":"software/react/essentials/#pagesjs","text":"import React from 'react' ; import { Link , useLocation , Outlet } from 'react-router-dom' ; export function Home () { return ( < div > < h1 > [ Company Website ] < /h1> < nav > < Link to = \"about\" > About < /Link> < Link to = \"events\" > Events < /Link> < Link to = \"contact\" > Contact < /Link> < /nav> < /div> ); } export function About () { return ( < div > < h1 > [ About ] < /h1> < Outlet /> < /div> ); } export function Events () { return ( < div > < h1 > [ Events ] < /h1> < /div> ); } export function Contact () { return ( < div > < h1 > [ Contact ] < /h1> < /div> ); } export function Whoops404 () { let location = useLocation () return ( < h1 > whoopsies no page found at { location . pathname } < /h1> ) } export function Services () { return ( < div > < h2 > Our Services < /h2> < /div> ) } export function CompanyHistory () { return ( < div > < h2 > Our Company History < /h2> < /div> ) } export function Location () { return ( < div > < h2 > Our Location < /h2> < /div> ) }","title":"pages.js"},{"location":"software/react/getting-started/","text":"Getting Started w/ React \u00b6 tools for react \u00b6 git nodejs react developer tools react snippets js/jsx snippets create-react-app npx create-react-app building-an-interface create-react-app modules \u00b6 create-react-app scaffolds a project template for you webpack \u00b6 a JS bundler main job is to manage how our application is assembled and the loading of your different modules into an application babel \u00b6 a JS compiler lets you write code with the latest JS features and will convert it so that it works with older browsers ES Lint | extension \u00b6 a JS linter analyzes your code against certain rules and helps you fix them you may need an extension installed on your editor to use it Jest \u00b6 a testing framework web vitals \u00b6 -a performance monitoring tool for your site - measures: - performance - accessibility - best practices external components \u00b6 in a real application you won't want to code everything from scratch, so you can install extra modules tailwind CSS \u00b6 a framework for building great looking sites, with a utility first approach super popular for a library like react installing tailwind is a little bit different from most other libraries the reason is a problem with one of the libraries that tailwind uses called PostCSS right now create-react-app does not support PostCSS 8 to install for create-react-app v5.0+ npm install -D tailwindcss postcss autoprefixer npx tailwindcss init -p creates 2 files: tailwind.config.css module . exports = { content : [ \"./src/**/*.{js,jsx,ts,tsx}\" , ], theme : { extend : {}, }, plugins : [ require ( '@tailwindcss/forms' ), ], } postcss.config.css module . exports = { plugins : { tailwindcss : {}, autoprefixer : {}, }, } add directives to src/index.css @ tailwind base ; @ tailwind components ; @ tailwind utilities ; in tailwind you usually want to wrap everything in a container class react-icons \u00b6 react-icons will only use the code for the specific icons that you use, unlike linking to something like font-awesome after installing it will be available to any of your modules search react-icons website to find icons to use each icon is prefixed with the library that it comes from npm install react-icons import { ICONNAME1 , ICONNAME2 } from 'react-icons/LIBRARY-NAME' // 'react-icons/bs' for example; ... < ICONNAME /> project configuration \u00b6 folder layout node_modules package.json package-lock.json public README.md src files are put into 2 main folders, src and public src folder \u00b6 App.css App.js App.test.js index.css index.js logo.svg reportWebVitals.js setupTests.js index.js \u00b6 index.js is the entry point for the JS application index.js will import alot of code from different libraries like react and react-dom react is the main library for working with React react-dom manages how the document model works within react react and react-dom are being used by Node using what is listed as dependencies in your package.json webpack allows an application wide CSS file by importing index.css into index.js like below a configuration file for web report vitals is also included in the index.js import App is importing the App.js file, you can ignore extensions when you load other JS files import React from 'react' ; import ReactDOM from 'react-dom' ; import './index.css' ; import App from './App' ; import reportWebVitals from './reportWebVitals' ; ReactDOM . render ( < React . StrictMode > < App /> < /React.StrictMode>, document . getElementById ( 'root' ) ); // If you want to start measuring performance in your app, pass a function // to log results (for example: reportWebVitals(console.log)) // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals reportWebVitals (); the React library is getting used inside of our render command there is also some code to put React in strict mode during development strict mode will complain if you write potentially dangerous code the render command loads up the App component as a module, and looks for an item with the id of root in your index.html file, where your application will be loaded App.js \u00b6 the logo being imported here will not be in the final build that is launched for the public since it is being managed by webpack react code is normally written in JSX which is a combination of JS and XML / HTML react functions return HTML with some small differences you can use JS code inside of the HTML by wrapping it with {curly braces} there are places where normal HTML keywords will have to be replaced by the JSX version, such as class when using the class keyword inside of HTML you have to use className instead, since class is a JS keyword standalone HTML tags such as br and hr need to include a closing slash import logo from './logo.svg' ; import './App.css' ; function App () { return ( < div className = \"App\" > < header className = \"App-header\" > < img src = { logo } className = \"App-logo\" alt = \"logo\" /> < p > Edit < code > src / App . js < /code> and save to reload. < /p> < a className = \"App-link\" href = \"https://reactjs.org\" target = \"_blank\" rel = \"noopener noreferrer\" > Learn React < /a> < /header> < /div> ); } export default App ; public folder \u00b6 the public folder has files that webpack will manage will be moved to the server when the project is deployed the logo / icon files will show up when we preview our application robots.txt gives web crawlers information about your site web-crawlers are applications that search engines like google use to get more information about your websites favicon.ico index.html logo192.png logo512.png manifest.json robots.txt index.html \u00b6 the index.html file is the entry point for browsers index.html can be modified but webpack uses this file to inject the JS code you write, as well as React code and CSS inside of the root div is where your application is loaded <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"utf-8\" /> < link rel = \"icon\" href = \"%PUBLIC_URL%/favicon.ico\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" /> < meta name = \"theme-color\" content = \"#000000\" /> < meta name = \"description\" content = \"Web site created using create-react-app\" /> < link rel = \"apple-touch-icon\" href = \"%PUBLIC_URL%/logo192.png\" /> <!-- manifest.json provides metadata used when your web app is installed on a user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/ --> < link rel = \"manifest\" href = \"%PUBLIC_URL%/manifest.json\" /> <!-- Notice the use of %PUBLIC_URL% in the tags above. It will be replaced with the URL of the `public` folder during the build. Only files inside the `public` folder can be referenced from the HTML. Unlike \"/favicon.ico\" or \"favicon.ico\", \"%PUBLIC_URL%/favicon.ico\" will work correctly both with client-side routing and a non-root public URL. Learn how to configure a non-root public URL by running `npm run build`. --> < title > React App </ title > </ head > < body > < noscript > You need to enable JavaScript to run this app. </ noscript > < div id = \"root\" ></ div > <!-- This HTML file is a template. If you open it directly in the browser, you will see an empty page. You can add webfonts, meta tags, or analytics to this file. The build step will place the bundled scripts into the <body> tag. To begin the development, run `npm start` or `yarn start`. To create a production bundle, use `npm run build` or `yarn build`. --> </ body > </ html > package.json \u00b6 package.json is the file Node creates to manage a project { \"name\" : \"react-repo\" , \"version\" : \"0.1.0\" , \"private\" : true , \"dependencies\" : { \"@testing-library/jest-dom\" : \"^5.16.1\" , \"@testing-library/react\" : \"^12.1.2\" , \"@testing-library/user-event\" : \"^13.5.0\" , \"react\" : \"^17.0.2\" , \"react-dom\" : \"^17.0.2\" , \"react-scripts\" : \"5.0.0\" , \"web-vitals\" : \"^2.1.2\" }, \"scripts\" : { \"start\" : \"react-scripts start\" , \"build\" : \"react-scripts build\" , \"test\" : \"react-scripts test\" , \"eject\" : \"react-scripts eject\" }, \"eslintConfig\" : { \"extends\" : [ \"react-app\" , \"react-app/jest\" ] }, \"browserslist\" : { \"production\" : [ \">0.2%\" , \"not dead\" , \"not op_mini all\" ], \"development\" : [ \"last 1 chrome version\" , \"last 1 firefox version\" , \"last 1 safari version\" ] } } browserslist \u00b6 helps your modules like webpack know which browsers you are targeting for the build in the above package.json we are targeting browsers that are not opera mini .gitignore \u00b6 helps you control which files are tracked by GitHub # See https://help.github.com/articles/ignoring-files/ for more about ignoring files. # dependencies /node_modules /.pnp .pnp.js # testing /coverage # production /build # misc .DS_Store .env.local .env.development.local .env.test.local .env.production.local npm-debug.log* yarn-debug.log* yarn-error.log*","title":"Getting Started"},{"location":"software/react/getting-started/#getting-started-w-react","text":"","title":"Getting Started w/ React"},{"location":"software/react/getting-started/#tools-for-react","text":"git nodejs react developer tools react snippets js/jsx snippets create-react-app npx create-react-app building-an-interface","title":"tools for react"},{"location":"software/react/getting-started/#create-react-app-modules","text":"create-react-app scaffolds a project template for you","title":"create-react-app modules"},{"location":"software/react/getting-started/#webpack","text":"a JS bundler main job is to manage how our application is assembled and the loading of your different modules into an application","title":"webpack"},{"location":"software/react/getting-started/#babel","text":"a JS compiler lets you write code with the latest JS features and will convert it so that it works with older browsers","title":"babel"},{"location":"software/react/getting-started/#es-lint-extension","text":"a JS linter analyzes your code against certain rules and helps you fix them you may need an extension installed on your editor to use it","title":"ES Lint | extension"},{"location":"software/react/getting-started/#jest","text":"a testing framework","title":"Jest"},{"location":"software/react/getting-started/#web-vitals","text":"-a performance monitoring tool for your site - measures: - performance - accessibility - best practices","title":"web vitals"},{"location":"software/react/getting-started/#external-components","text":"in a real application you won't want to code everything from scratch, so you can install extra modules","title":"external components"},{"location":"software/react/getting-started/#tailwind-css","text":"a framework for building great looking sites, with a utility first approach super popular for a library like react installing tailwind is a little bit different from most other libraries the reason is a problem with one of the libraries that tailwind uses called PostCSS right now create-react-app does not support PostCSS 8 to install for create-react-app v5.0+ npm install -D tailwindcss postcss autoprefixer npx tailwindcss init -p creates 2 files: tailwind.config.css module . exports = { content : [ \"./src/**/*.{js,jsx,ts,tsx}\" , ], theme : { extend : {}, }, plugins : [ require ( '@tailwindcss/forms' ), ], } postcss.config.css module . exports = { plugins : { tailwindcss : {}, autoprefixer : {}, }, } add directives to src/index.css @ tailwind base ; @ tailwind components ; @ tailwind utilities ; in tailwind you usually want to wrap everything in a container class","title":"tailwind CSS"},{"location":"software/react/getting-started/#react-icons","text":"react-icons will only use the code for the specific icons that you use, unlike linking to something like font-awesome after installing it will be available to any of your modules search react-icons website to find icons to use each icon is prefixed with the library that it comes from npm install react-icons import { ICONNAME1 , ICONNAME2 } from 'react-icons/LIBRARY-NAME' // 'react-icons/bs' for example; ... < ICONNAME />","title":"react-icons"},{"location":"software/react/getting-started/#project-configuration","text":"folder layout node_modules package.json package-lock.json public README.md src files are put into 2 main folders, src and public","title":"project configuration"},{"location":"software/react/getting-started/#src-folder","text":"App.css App.js App.test.js index.css index.js logo.svg reportWebVitals.js setupTests.js","title":"src folder"},{"location":"software/react/getting-started/#indexjs","text":"index.js is the entry point for the JS application index.js will import alot of code from different libraries like react and react-dom react is the main library for working with React react-dom manages how the document model works within react react and react-dom are being used by Node using what is listed as dependencies in your package.json webpack allows an application wide CSS file by importing index.css into index.js like below a configuration file for web report vitals is also included in the index.js import App is importing the App.js file, you can ignore extensions when you load other JS files import React from 'react' ; import ReactDOM from 'react-dom' ; import './index.css' ; import App from './App' ; import reportWebVitals from './reportWebVitals' ; ReactDOM . render ( < React . StrictMode > < App /> < /React.StrictMode>, document . getElementById ( 'root' ) ); // If you want to start measuring performance in your app, pass a function // to log results (for example: reportWebVitals(console.log)) // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals reportWebVitals (); the React library is getting used inside of our render command there is also some code to put React in strict mode during development strict mode will complain if you write potentially dangerous code the render command loads up the App component as a module, and looks for an item with the id of root in your index.html file, where your application will be loaded","title":"index.js"},{"location":"software/react/getting-started/#appjs","text":"the logo being imported here will not be in the final build that is launched for the public since it is being managed by webpack react code is normally written in JSX which is a combination of JS and XML / HTML react functions return HTML with some small differences you can use JS code inside of the HTML by wrapping it with {curly braces} there are places where normal HTML keywords will have to be replaced by the JSX version, such as class when using the class keyword inside of HTML you have to use className instead, since class is a JS keyword standalone HTML tags such as br and hr need to include a closing slash import logo from './logo.svg' ; import './App.css' ; function App () { return ( < div className = \"App\" > < header className = \"App-header\" > < img src = { logo } className = \"App-logo\" alt = \"logo\" /> < p > Edit < code > src / App . js < /code> and save to reload. < /p> < a className = \"App-link\" href = \"https://reactjs.org\" target = \"_blank\" rel = \"noopener noreferrer\" > Learn React < /a> < /header> < /div> ); } export default App ;","title":"App.js"},{"location":"software/react/getting-started/#public-folder","text":"the public folder has files that webpack will manage will be moved to the server when the project is deployed the logo / icon files will show up when we preview our application robots.txt gives web crawlers information about your site web-crawlers are applications that search engines like google use to get more information about your websites favicon.ico index.html logo192.png logo512.png manifest.json robots.txt","title":"public folder"},{"location":"software/react/getting-started/#indexhtml","text":"the index.html file is the entry point for browsers index.html can be modified but webpack uses this file to inject the JS code you write, as well as React code and CSS inside of the root div is where your application is loaded <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"utf-8\" /> < link rel = \"icon\" href = \"%PUBLIC_URL%/favicon.ico\" /> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" /> < meta name = \"theme-color\" content = \"#000000\" /> < meta name = \"description\" content = \"Web site created using create-react-app\" /> < link rel = \"apple-touch-icon\" href = \"%PUBLIC_URL%/logo192.png\" /> <!-- manifest.json provides metadata used when your web app is installed on a user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/ --> < link rel = \"manifest\" href = \"%PUBLIC_URL%/manifest.json\" /> <!-- Notice the use of %PUBLIC_URL% in the tags above. It will be replaced with the URL of the `public` folder during the build. Only files inside the `public` folder can be referenced from the HTML. Unlike \"/favicon.ico\" or \"favicon.ico\", \"%PUBLIC_URL%/favicon.ico\" will work correctly both with client-side routing and a non-root public URL. Learn how to configure a non-root public URL by running `npm run build`. --> < title > React App </ title > </ head > < body > < noscript > You need to enable JavaScript to run this app. </ noscript > < div id = \"root\" ></ div > <!-- This HTML file is a template. If you open it directly in the browser, you will see an empty page. You can add webfonts, meta tags, or analytics to this file. The build step will place the bundled scripts into the <body> tag. To begin the development, run `npm start` or `yarn start`. To create a production bundle, use `npm run build` or `yarn build`. --> </ body > </ html >","title":"index.html"},{"location":"software/react/getting-started/#packagejson","text":"package.json is the file Node creates to manage a project { \"name\" : \"react-repo\" , \"version\" : \"0.1.0\" , \"private\" : true , \"dependencies\" : { \"@testing-library/jest-dom\" : \"^5.16.1\" , \"@testing-library/react\" : \"^12.1.2\" , \"@testing-library/user-event\" : \"^13.5.0\" , \"react\" : \"^17.0.2\" , \"react-dom\" : \"^17.0.2\" , \"react-scripts\" : \"5.0.0\" , \"web-vitals\" : \"^2.1.2\" }, \"scripts\" : { \"start\" : \"react-scripts start\" , \"build\" : \"react-scripts build\" , \"test\" : \"react-scripts test\" , \"eject\" : \"react-scripts eject\" }, \"eslintConfig\" : { \"extends\" : [ \"react-app\" , \"react-app/jest\" ] }, \"browserslist\" : { \"production\" : [ \">0.2%\" , \"not dead\" , \"not op_mini all\" ], \"development\" : [ \"last 1 chrome version\" , \"last 1 firefox version\" , \"last 1 safari version\" ] } }","title":"package.json"},{"location":"software/react/getting-started/#browserslist","text":"helps your modules like webpack know which browsers you are targeting for the build in the above package.json we are targeting browsers that are not opera mini","title":"browserslist"},{"location":"software/react/getting-started/#gitignore","text":"helps you control which files are tracked by GitHub # See https://help.github.com/articles/ignoring-files/ for more about ignoring files. # dependencies /node_modules /.pnp .pnp.js # testing /coverage # production /build # misc .DS_Store .env.local .env.development.local .env.test.local .env.production.local npm-debug.log* yarn-debug.log* yarn-error.log*","title":".gitignore"},{"location":"software/react/hooks-descriptions/","text":"React Hooks \u00b6 the modern way to work with React projects is to use a feature called hooks hooks allow you to use state and other react features without having to write classes useState \u00b6 managing state in an application is the utmost importance and we can do this with Reacts function useState useState is a function that returns an array of 2 items, the first item is the state of our variable, and the second item is a function we define the first item in the array returned from useState by passing it in as an argument to useState create a variable that holds an array containing a variable for data and a variable that you call whenever you want to modify the data variable the created variable is given the value of useState, which takes an argument of the data variables initial value the initial value could be false to set the default state of an element to hide, so that it only shows when a user click on it useState allows us to track the value of an element and modify our code to do things depending on the state of the useState variable useReducer \u00b6 the most simple definition of a reducer function is that it takes the current state and returns a new state useReducer takes in two arguments, the first is a function to change the state, and the second is the initial state useReducer abstracts writing separate state changing functions and makes our code even more concise, thank you React useCallback \u00b6 useCallback allows us to use async functions and perform things like setState functions when its finished good for using the fetch command in JS useEffect \u00b6 typically used to manage side effects that aren't related to the components render things like console messages, fetching data, and sometimes animations can benefit from useEffect takes in a callback function and normally does something one of our applications states also takes in a second argument called the dependency array if you pass in an empty array, the props and state inside the effect will always have the initial values an empty array means the effect is not going to be called again after the first render with an empty dependency array, the useEffect still will not run even when the state its using changes React will complain if we do not add any state to track to our dependency array and leave it empty useEffect lets you perform what are called side effects in function components useEffect is like the React life cycle methods componentDidMount / componentDidUpdate / componentWillUnmount perfect for performing data searching operations and manually changing the DOM when certain components are a result of these operations effect is supposed to be something like a side effect that your application doesn't normally worry about, controls React a little bit more useEffect can use something like a useCallback fetch function and track the fetching of the data if the data changes for some reason, useEffect can track it and update our application automatically","title":"Hooks Descriptions"},{"location":"software/react/hooks-descriptions/#react-hooks","text":"the modern way to work with React projects is to use a feature called hooks hooks allow you to use state and other react features without having to write classes","title":"React Hooks"},{"location":"software/react/hooks-descriptions/#usestate","text":"managing state in an application is the utmost importance and we can do this with Reacts function useState useState is a function that returns an array of 2 items, the first item is the state of our variable, and the second item is a function we define the first item in the array returned from useState by passing it in as an argument to useState create a variable that holds an array containing a variable for data and a variable that you call whenever you want to modify the data variable the created variable is given the value of useState, which takes an argument of the data variables initial value the initial value could be false to set the default state of an element to hide, so that it only shows when a user click on it useState allows us to track the value of an element and modify our code to do things depending on the state of the useState variable","title":"useState"},{"location":"software/react/hooks-descriptions/#usereducer","text":"the most simple definition of a reducer function is that it takes the current state and returns a new state useReducer takes in two arguments, the first is a function to change the state, and the second is the initial state useReducer abstracts writing separate state changing functions and makes our code even more concise, thank you React","title":"useReducer"},{"location":"software/react/hooks-descriptions/#usecallback","text":"useCallback allows us to use async functions and perform things like setState functions when its finished good for using the fetch command in JS","title":"useCallback"},{"location":"software/react/hooks-descriptions/#useeffect","text":"typically used to manage side effects that aren't related to the components render things like console messages, fetching data, and sometimes animations can benefit from useEffect takes in a callback function and normally does something one of our applications states also takes in a second argument called the dependency array if you pass in an empty array, the props and state inside the effect will always have the initial values an empty array means the effect is not going to be called again after the first render with an empty dependency array, the useEffect still will not run even when the state its using changes React will complain if we do not add any state to track to our dependency array and leave it empty useEffect lets you perform what are called side effects in function components useEffect is like the React life cycle methods componentDidMount / componentDidUpdate / componentWillUnmount perfect for performing data searching operations and manually changing the DOM when certain components are a result of these operations effect is supposed to be something like a side effect that your application doesn't normally worry about, controls React a little bit more useEffect can use something like a useCallback fetch function and track the fetching of the data if the data changes for some reason, useEffect can track it and update our application automatically","title":"useEffect"},{"location":"software/react/rendering-process/","text":"React's UI Rendering Process \u00b6 React allows you to write maintainable and performant code by using the concept of components components allow you to focus on describing the UI you want, rather than focusing on the details of how the UI actually gets inserted in the page HTML & the DOM \u00b6 helpful to think of a web page as a document, instead of editing document with word processor, you use an api (the DOM) components & elements \u00b6 components are functions and classes to describe the UI you want to ultimately end up with jsx is the primary way we write components, but we do not have to use jsx an element is a plain object describing a component or HTML tag component using jsx \u00b6 const MyComponent = () => { return ( <main> <h1 id=\"title\">Look ma!</h1> </main> ) } returned element \u00b6 { type : \"main\" ; key : null , ref : null , \"$$typeof\" : Symbol ( react . element ), props : { children : { type : \"h1\" , key : null , ref : null , props : { id : \"title\" , children : \"Look ma!\" }, }}} you can actually write your code like above and it would work type property \u00b6 a string reference to an HTML tag (react internally calls this a dom element) a reference to a component, react calls this a component element (if you did import \"MyComponent\" at the top of a JS file, that is what would be in type) key property \u00b6 used when you are manually creating a bunch of children, when you are mapping over an Array and you are generating a bunch of components from mapping used to uniquely identify an element among siblings ref property \u00b6 reference to an actual DOM node using (createRef, useRef), the value ends up here you may want something referenced when you want to do something such as focus an input, or if you have a 3rd party library that is writing attributes to a DOM node and you want to access those $$typeof property \u00b6 a safety feature (super edge case) its value is always a Symbol with a Symbol you can pass in a String, or anything and it generates a unique anonymous \"hash\" (essentially, almost like a UUID) the idea is that this Symbol is unique to the react App itself cannot have a Symbol in json, returns typeof Symbol, cannot send Symbols back and forth through API calls the Symbol as a value is protection against cross-site scripting attacks react expects all elements to have this property so malicious or fake components don't get injected into code when fetching data from a server props property \u00b6 the meat of the element everything inside of the element an object, above only has 1 prop children can be an object or an Array, an Array of objects which are the children elements we have a component, internally React creates a component instance, which ultimately generates an object like the one above the object that is generated is what is known as a virtual DOM it is really computationally expensive to write to the DOM, it is super cheap to create an object view an element \u00b6 const MyComponent = ( < main > < h1 id = \"title\" > Look Ma !< /h1> < /main> ) console . log ( MyComponent ) shadow DOM? \u00b6 the shadow DOM is browser technology designed for scoping variables in CSS and web components not related specifically related to React reconciliation \u00b6 creating the virtual DOM is part of the process known as reconciliation reconciliation is responsible for maintaining the tree of elements when a components props or state change react creates a tree of elements every time the render function is called, that is ultimately what we are getting back to be efficient we need a way to tell what is different between the 2 trees so that we are only changing things in the DOM that need to be changed reconciliation houses the diffing algorithm that determines what parts of that tree need to be replaced reconciliation - type change \u00b6 below situation is such as a customer looking at a product page and then clicking to view a single product < Wrapper > < Wrapper > < ProductList /> => < IndividualProduct /> < /Wrapper> </Wrapper> whenever the roots of elements have different types, react tears down the whole tree and it builds a whole new tree from scratch the reason for the new tree is that their type has changed if the type of a component object changes, everything beneath it gets blown away when tearing down a tree, all DOM nodes are destroyed, component instances will receive component will unmount and the equivalent useEffect hook will fire the new DOM nodes are inserted to the DOM and then components will receive component will mount and then component did mount functional components will have their useEffect hooks run as is appropriate any state associated with the old tree is lost React is not reusing DOM elements, it is actually destroying an recreating them every time an element gets generated so there is some stuff happening in the middle, but you can think of every DOM element correlated with a DOM node, if that element goes away, that DOM node goes away reconciliation - DOM element: there are some under the hood differences between what happens with native DOM elements and component elements, React makes a distinction to these 2 types of elements when there is a native DOM element, a minor change is not a big deal, or adding / changing element attributes is done easily with a component, when something changes in the DOM React recursively looks at each child node 1 by 1 and decides if it needs to change anything if there is a component with list item as children, react will compare li1 to li1 and only change if the li(n) is different from li(n) a problem happens if a list adds a li to the beginning of the list, then React none of the li(n) will be equivalent to each other any longer and React will re-render the entire list, which may not be noticeable with a small list, but as that list grows the cost would become more noticeable to avoid unnecessarily rendering any DOM elements, we can give each element a key so React compares items by it's key instead of text content do not make component keys the list index: if a list is reversed in the app, React will think every component changed and re-render the entire list another situation is the list items content change but the index of it does not so React does not change them if do not have a unique id for your data, use something like lodash which will create a UUID for each item in your data","title":"Rendering Process"},{"location":"software/react/rendering-process/#reacts-ui-rendering-process","text":"React allows you to write maintainable and performant code by using the concept of components components allow you to focus on describing the UI you want, rather than focusing on the details of how the UI actually gets inserted in the page","title":"React's UI Rendering Process"},{"location":"software/react/rendering-process/#html-the-dom","text":"helpful to think of a web page as a document, instead of editing document with word processor, you use an api (the DOM)","title":"HTML &amp; the DOM"},{"location":"software/react/rendering-process/#components-elements","text":"components are functions and classes to describe the UI you want to ultimately end up with jsx is the primary way we write components, but we do not have to use jsx an element is a plain object describing a component or HTML tag","title":"components &amp; elements"},{"location":"software/react/rendering-process/#component-using-jsx","text":"const MyComponent = () => { return ( <main> <h1 id=\"title\">Look ma!</h1> </main> ) }","title":"component using jsx"},{"location":"software/react/rendering-process/#returned-element","text":"{ type : \"main\" ; key : null , ref : null , \"$$typeof\" : Symbol ( react . element ), props : { children : { type : \"h1\" , key : null , ref : null , props : { id : \"title\" , children : \"Look ma!\" }, }}} you can actually write your code like above and it would work","title":"returned element"},{"location":"software/react/rendering-process/#type-property","text":"a string reference to an HTML tag (react internally calls this a dom element) a reference to a component, react calls this a component element (if you did import \"MyComponent\" at the top of a JS file, that is what would be in type)","title":"type property"},{"location":"software/react/rendering-process/#key-property","text":"used when you are manually creating a bunch of children, when you are mapping over an Array and you are generating a bunch of components from mapping used to uniquely identify an element among siblings","title":"key property"},{"location":"software/react/rendering-process/#ref-property","text":"reference to an actual DOM node using (createRef, useRef), the value ends up here you may want something referenced when you want to do something such as focus an input, or if you have a 3rd party library that is writing attributes to a DOM node and you want to access those","title":"ref property"},{"location":"software/react/rendering-process/#typeof-property","text":"a safety feature (super edge case) its value is always a Symbol with a Symbol you can pass in a String, or anything and it generates a unique anonymous \"hash\" (essentially, almost like a UUID) the idea is that this Symbol is unique to the react App itself cannot have a Symbol in json, returns typeof Symbol, cannot send Symbols back and forth through API calls the Symbol as a value is protection against cross-site scripting attacks react expects all elements to have this property so malicious or fake components don't get injected into code when fetching data from a server","title":"$$typeof property"},{"location":"software/react/rendering-process/#props-property","text":"the meat of the element everything inside of the element an object, above only has 1 prop children can be an object or an Array, an Array of objects which are the children elements we have a component, internally React creates a component instance, which ultimately generates an object like the one above the object that is generated is what is known as a virtual DOM it is really computationally expensive to write to the DOM, it is super cheap to create an object","title":"props property"},{"location":"software/react/rendering-process/#view-an-element","text":"const MyComponent = ( < main > < h1 id = \"title\" > Look Ma !< /h1> < /main> ) console . log ( MyComponent )","title":"view an element"},{"location":"software/react/rendering-process/#shadow-dom","text":"the shadow DOM is browser technology designed for scoping variables in CSS and web components not related specifically related to React","title":"shadow DOM?"},{"location":"software/react/rendering-process/#reconciliation","text":"creating the virtual DOM is part of the process known as reconciliation reconciliation is responsible for maintaining the tree of elements when a components props or state change react creates a tree of elements every time the render function is called, that is ultimately what we are getting back to be efficient we need a way to tell what is different between the 2 trees so that we are only changing things in the DOM that need to be changed reconciliation houses the diffing algorithm that determines what parts of that tree need to be replaced","title":"reconciliation"},{"location":"software/react/rendering-process/#reconciliation-type-change","text":"below situation is such as a customer looking at a product page and then clicking to view a single product < Wrapper > < Wrapper > < ProductList /> => < IndividualProduct /> < /Wrapper> </Wrapper> whenever the roots of elements have different types, react tears down the whole tree and it builds a whole new tree from scratch the reason for the new tree is that their type has changed if the type of a component object changes, everything beneath it gets blown away when tearing down a tree, all DOM nodes are destroyed, component instances will receive component will unmount and the equivalent useEffect hook will fire the new DOM nodes are inserted to the DOM and then components will receive component will mount and then component did mount functional components will have their useEffect hooks run as is appropriate any state associated with the old tree is lost React is not reusing DOM elements, it is actually destroying an recreating them every time an element gets generated so there is some stuff happening in the middle, but you can think of every DOM element correlated with a DOM node, if that element goes away, that DOM node goes away reconciliation - DOM element: there are some under the hood differences between what happens with native DOM elements and component elements, React makes a distinction to these 2 types of elements when there is a native DOM element, a minor change is not a big deal, or adding / changing element attributes is done easily with a component, when something changes in the DOM React recursively looks at each child node 1 by 1 and decides if it needs to change anything if there is a component with list item as children, react will compare li1 to li1 and only change if the li(n) is different from li(n) a problem happens if a list adds a li to the beginning of the list, then React none of the li(n) will be equivalent to each other any longer and React will re-render the entire list, which may not be noticeable with a small list, but as that list grows the cost would become more noticeable to avoid unnecessarily rendering any DOM elements, we can give each element a key so React compares items by it's key instead of text content do not make component keys the list index: if a list is reversed in the app, React will think every component changed and re-render the entire list another situation is the list items content change but the index of it does not so React does not change them if do not have a unique id for your data, use something like lodash which will create a UUID for each item in your data","title":"reconciliation - type change"},{"location":"software/react/software-architecture/","text":"Software Architecture \u00b6 basics \u00b6 what is software architecture? the word architecture is normally applied to a building, referring to the overall structure and large scale design of that building, compared to interior design, which would be more of the details inside the building when talking software architecture, it is the study of the broader structure, organization, and patterns of a development project - primarily the ones that impact developer productivity overtime (the latter part is where normal architecture and software architecture may diverge a little bit) normal architecture \u00b6 design a building that fits constrained and required uses constraints include things like budget and zoning restrictions required uses is what the people using the building need it to do once finished the build will remain static over time it may be renovated every once in a while and there will be ongoing maintenance with the plumbing and electrical, but for the most part we are not going to make any drastic changes to it software architecture \u00b6 design software that fits the constraints and required uses just like with regular architecture, the restraints can be things like budget the required uses are what people are designing that software to do in the first place will be constantly changing throughout its lifetime you are never going to get to the point where everybody is happy with it and no one wants to add anymore features managers and other stakeholders are always going to want to add other features this means we have to design our software in a way that will be easily changed over time software theory \u00b6 in theory software architecture is meant to be technology independent this means we design our programs without saying things like we have to use a certain database with it, or a certain front end framework with it this allows for more flexibility incase you want to change your technologies down the road","title":"Software Architecture"},{"location":"software/react/software-architecture/#software-architecture","text":"","title":"Software Architecture"},{"location":"software/react/software-architecture/#basics","text":"what is software architecture? the word architecture is normally applied to a building, referring to the overall structure and large scale design of that building, compared to interior design, which would be more of the details inside the building when talking software architecture, it is the study of the broader structure, organization, and patterns of a development project - primarily the ones that impact developer productivity overtime (the latter part is where normal architecture and software architecture may diverge a little bit)","title":"basics"},{"location":"software/react/software-architecture/#normal-architecture","text":"design a building that fits constrained and required uses constraints include things like budget and zoning restrictions required uses is what the people using the building need it to do once finished the build will remain static over time it may be renovated every once in a while and there will be ongoing maintenance with the plumbing and electrical, but for the most part we are not going to make any drastic changes to it","title":"normal architecture"},{"location":"software/react/software-architecture/#software-architecture_1","text":"design software that fits the constraints and required uses just like with regular architecture, the restraints can be things like budget the required uses are what people are designing that software to do in the first place will be constantly changing throughout its lifetime you are never going to get to the point where everybody is happy with it and no one wants to add anymore features managers and other stakeholders are always going to want to add other features this means we have to design our software in a way that will be easily changed over time","title":"software architecture"},{"location":"software/react/software-architecture/#software-theory","text":"in theory software architecture is meant to be technology independent this means we design our programs without saying things like we have to use a certain database with it, or a certain front end framework with it this allows for more flexibility incase you want to change your technologies down the road","title":"software theory"},{"location":"software/react/state-management/","text":"Managing State in React \u00b6 immutability = not modifying a variable after it is created in Redux specifically, it means not mutating states directly most popular state management solutions: \u00b6 React: built in state management solutions Redux: most popular option, emphasizes one-way data flow and immutability which means every time you change state, such as changing information on a user profile, what is returned to React is a copy of the old state with just the new thing changed, not simply the modification that might sound redundant or wasteful, but there are some great benefits that include undo and redo functionality and better debuggability MobX: appeals to those with knowledge and background in object orientated programming uses the observer pattern which allows the system to build a dependency tree among different parts of state produces free rendering of components by just keeping track of what needs mutated Apollo and GraphQL existing solutions in React \u00b6 avoid prematurely adding state management packages \u00b6 as soon as you extend beyond basically functionality there is typically some need for a state management solution the main reason to use a state management solution, is that it manages business logic presentation logic: logic that is associated with how components appear on a page when should a modal pop up? when should the color of a button change? does not have to do with the purpose of the application think of logic that is agnostic towards the applications purpose business logic: handling, manipulating, and storing business objects for example like in a todo app where a user needs to login, it could mean things like user accounts or items in a todo list unlike presentation logic, this is logic that is application-specific handling business logic is the most common use case for introducing a state management library figuring out where to connect presentation and business logic can be pretty tricky: we can run into all kinds of problems to solve how do we persist state for users between sessions? how does React know that our data has changed and that we need to re-render the component state management makes opinionated decisions for us, that allow us to work in a consistent system if you do not use a state management system, this would mean you store every part of your business logic in a React state this is not best practice the power of setState() \u00b6 data fetching using only React \u00b6 avoid the pitfall of prop drilling \u00b6 defining context \u00b6 using the context API \u00b6 React Hooks: Refactoring \u00b6 Evolution of State Management \u00b6 Flux wars: beginnings of Redux \u00b6 you don't need Redux \u00b6 Redux feature \u00b6 Redux feature container \u00b6 benefits of Redux \u00b6 immutability out of the box \u00b6 benefits of Redux middleware \u00b6 where state should live in your components \u00b6 debugging with Redux \u00b6 React and Redux Alternatives \u00b6 MobX: OOJ statement approach \u00b6 Apollo Link State: state management with GraphQL \u00b6","title":"State Management"},{"location":"software/react/state-management/#managing-state-in-react","text":"immutability = not modifying a variable after it is created in Redux specifically, it means not mutating states directly","title":"Managing State in React"},{"location":"software/react/state-management/#most-popular-state-management-solutions","text":"React: built in state management solutions Redux: most popular option, emphasizes one-way data flow and immutability which means every time you change state, such as changing information on a user profile, what is returned to React is a copy of the old state with just the new thing changed, not simply the modification that might sound redundant or wasteful, but there are some great benefits that include undo and redo functionality and better debuggability MobX: appeals to those with knowledge and background in object orientated programming uses the observer pattern which allows the system to build a dependency tree among different parts of state produces free rendering of components by just keeping track of what needs mutated Apollo and GraphQL","title":"most popular state management solutions:"},{"location":"software/react/state-management/#existing-solutions-in-react","text":"","title":"existing solutions in React"},{"location":"software/react/state-management/#avoid-prematurely-adding-state-management-packages","text":"as soon as you extend beyond basically functionality there is typically some need for a state management solution the main reason to use a state management solution, is that it manages business logic presentation logic: logic that is associated with how components appear on a page when should a modal pop up? when should the color of a button change? does not have to do with the purpose of the application think of logic that is agnostic towards the applications purpose business logic: handling, manipulating, and storing business objects for example like in a todo app where a user needs to login, it could mean things like user accounts or items in a todo list unlike presentation logic, this is logic that is application-specific handling business logic is the most common use case for introducing a state management library figuring out where to connect presentation and business logic can be pretty tricky: we can run into all kinds of problems to solve how do we persist state for users between sessions? how does React know that our data has changed and that we need to re-render the component state management makes opinionated decisions for us, that allow us to work in a consistent system if you do not use a state management system, this would mean you store every part of your business logic in a React state this is not best practice","title":"avoid prematurely adding state management packages"},{"location":"software/react/state-management/#the-power-of-setstate","text":"","title":"the power of setState()"},{"location":"software/react/state-management/#data-fetching-using-only-react","text":"","title":"data fetching using only React"},{"location":"software/react/state-management/#avoid-the-pitfall-of-prop-drilling","text":"","title":"avoid the pitfall of prop drilling"},{"location":"software/react/state-management/#defining-context","text":"","title":"defining context"},{"location":"software/react/state-management/#using-the-context-api","text":"","title":"using the context API"},{"location":"software/react/state-management/#react-hooks-refactoring","text":"","title":"React Hooks: Refactoring"},{"location":"software/react/state-management/#evolution-of-state-management","text":"","title":"Evolution of State Management"},{"location":"software/react/state-management/#flux-wars-beginnings-of-redux","text":"","title":"Flux wars: beginnings of Redux"},{"location":"software/react/state-management/#you-dont-need-redux","text":"","title":"you don't need Redux"},{"location":"software/react/state-management/#redux-feature","text":"","title":"Redux feature"},{"location":"software/react/state-management/#redux-feature-container","text":"","title":"Redux feature container"},{"location":"software/react/state-management/#benefits-of-redux","text":"","title":"benefits of Redux"},{"location":"software/react/state-management/#immutability-out-of-the-box","text":"","title":"immutability out of the box"},{"location":"software/react/state-management/#benefits-of-redux-middleware","text":"","title":"benefits of Redux middleware"},{"location":"software/react/state-management/#where-state-should-live-in-your-components","text":"","title":"where state should live in your components"},{"location":"software/react/state-management/#debugging-with-redux","text":"","title":"debugging with Redux"},{"location":"software/react/state-management/#react-and-redux-alternatives","text":"","title":"React and Redux Alternatives"},{"location":"software/react/state-management/#mobx-ooj-statement-approach","text":"","title":"MobX: OOJ statement approach"},{"location":"software/react/state-management/#apollo-link-state-state-management-with-graphql","text":"","title":"Apollo Link State: state management with GraphQL"},{"location":"software/typescript/","text":"TypeScript ( TS ) \u00b6 static typing for JavaScript ( JS ) npm install -g typescript tsc hello.ts about \u00b6 the goal of TS is to be a static type checker for JS JS has been around for over 20 years JS has some peculiar runtime semantics and quirks managing large code bases in JS gets difficult to manage at scale the most common type of error that programmers write can be described as type errors a type error is when a certain type of value was used where a different type was expected ( 10 = 5 + '5' ) TS is a tool that runs before JS code runs ( static ) and ensures that the types in the program are correct ( typechecked ) when JS code is ran, the runtime knows what to do by figuring out the types of the values in the code the type of a value tells our code what behaviors and capabilities a binding has TS will also add massive editor support for auto completion and code hints benefits \u00b6 reduce mental overhead and mistakes // Accessing the property 'toLowerCase' // on 'message' and then calling it message . toLowerCase (); // Calling 'message' which is a silly mistake, which TS help avoid without thinking about it message (); we have to remember alot of mental notes for the above code is message callable? does it have property lowercase on it? is toLowerCase callable? what does lowerCase return? the above questions might be a super simple block but what about a project with hundreds of lines of code and multiple files of it? TS vs JS errors \u00b6 TS can catch spelling errors much easier TS can catch uncalled functions from forgetting the closing parenthesis const user = { name : \"Daniel\" , age : 26 , }; user . location ; - in JS the above code would not throw an undefined error - in TS the above code would throw a specific property \"location\" does not exist error","title":"Intro"},{"location":"software/typescript/#typescript-ts","text":"static typing for JavaScript ( JS ) npm install -g typescript tsc hello.ts","title":"TypeScript ( TS )"},{"location":"software/typescript/#about","text":"the goal of TS is to be a static type checker for JS JS has been around for over 20 years JS has some peculiar runtime semantics and quirks managing large code bases in JS gets difficult to manage at scale the most common type of error that programmers write can be described as type errors a type error is when a certain type of value was used where a different type was expected ( 10 = 5 + '5' ) TS is a tool that runs before JS code runs ( static ) and ensures that the types in the program are correct ( typechecked ) when JS code is ran, the runtime knows what to do by figuring out the types of the values in the code the type of a value tells our code what behaviors and capabilities a binding has TS will also add massive editor support for auto completion and code hints","title":"about"},{"location":"software/typescript/#benefits","text":"reduce mental overhead and mistakes // Accessing the property 'toLowerCase' // on 'message' and then calling it message . toLowerCase (); // Calling 'message' which is a silly mistake, which TS help avoid without thinking about it message (); we have to remember alot of mental notes for the above code is message callable? does it have property lowercase on it? is toLowerCase callable? what does lowerCase return? the above questions might be a super simple block but what about a project with hundreds of lines of code and multiple files of it?","title":"benefits"},{"location":"software/typescript/#ts-vs-js-errors","text":"TS can catch spelling errors much easier TS can catch uncalled functions from forgetting the closing parenthesis const user = { name : \"Daniel\" , age : 26 , }; user . location ; - in JS the above code would not throw an undefined error - in TS the above code would throw a specific property \"location\" does not exist error","title":"TS vs JS errors"},{"location":"software/typescript/essentials/","text":"TypeScript Essentials \u00b6 designed to be fully compatible with JS TS tooling is fully cross-platform TS is a superset of JS, which means it is an extension of JS, adding new features and syntax on top of the core language introducing TS \u00b6 TS is a super set of the JS programming language that adds the concept of static typing to the core features of JS JS is and always has been a dynamically typed language both static and dynamic languages rely on types (definitions of data structures and behaviors to ensure their programs are correct) the different kinds of typed languages validate types in different ways dynamic languages: aim to be much more forgiving at development time, relying on the concept of duck typing to validate that a particular object can be used a certain way duck typing refers to the idea that if it looks like a duck, walks like a duck, and quacks like a duck, it must be a duck the net result of this approach is that tools do not have enough information to catch errors before the application runs statically typed languages: more rigid than dynamic aim to catch errors before the code is executed they do this by imposing restrictions on how you can interact with objects forcing you to clearly specify everything about the object that you are going to interact with in the static world you cannot just call a \"quack\" method on any object, you must first explicitly define a type that has that \"quack\" method as well as any parameters that need to be passed into that method, not to mention the value that the \"quack\" method will return to its callers tsconfig.json a configuration object with config values typescript compiler automatically looks for this file when it starts and if it does it treats the whole folder and any subfolders as one project with this file we no longer have to tell typescript which files to watch when running tsc -w { \"compilerOptions\" : { \"target\" : \"es5\" , \"module\" : \"system\" } } ES6 language features \u00b6 reviewing ES6 language features \u00b6 TS provides the ability to leverage a handful of ECMAScript 6 and ES7 features that aren't yet widely supported and compile them down to ES5 compatible JS default / optional parameters \u00b6 allows you to specify a default value for a given a parameter template strings \u00b6 allows inserting variables directly into strings, gives ability to more easily programmatically render HTML to the DOM let and const \u00b6 the var keyword has sometimes undesirable behavior, it is accessible outside of scopes that other languages would never make possible using the let keyword changes variable assignment to behave more like other programming language const means to create a variable and not let it change for...of loops \u00b6 used to loop over an array with smoother syntax var array = [ \"learn typescript\" , \"learn typescript more\" , \"practice typescript\" ] for ( var index in array ) { var value = array [ index ]; console . log ( ` ${ index } : ${ value } ` ); } for ( var value of array ) { console . log ( ` ${ value } ` ) } lambdas \u00b6 the this keyword has strange behavior compared to most programming languages arrow functions allow us to get around the this keyword with cleaner syntax var container = document . getElementById ( 'container' ); var container2 = document . getElementById ( 'container2' ); function Counter ( el ){ this . count = 0 ; el . innerHTML = this . count ; let _this = this ; el . addEventListener ( \"click\" , function () { _this . count += 1 el . innerHTML = _this . count ; } ) } new Counter ( container ) function Counter2 ( el ) { this . count = 0 ; el . innerHTML = this . count ; el . addEventListener ( 'click' , () => { this . count += 1 ; el . innerHTML = this . count ; }) } new Counter2 ( container2 ) const filtered = [ - 1 , 1 , 2 , 3 ]. filter ( x => x > 0 ) console . log ( filtered ) arrow \"lambda\" functions / anonymous functions return their output automatically destructuring \u00b6 the ability to assign values to multiple variable from a single object with a single statement think of destructuring as the reverse of creating a bunch of variables and combining them into an array swapping values also becomes easier, instead of having to use a temporary value to hold the first value we swap var array = [ 123 , \"learn typescript more\" , false ] var [ id , chore , completed ] = array ; console . log ( array ) console . log ( id , chore , completed ) let a = \"yes\" ; let b = \"no\" ; console . log ( a , b ) var temp = a ; a = b ; b = temp ; console . log ( a , b ); var c = \"yes\" ; var d = \"no\" ; console . log ( c , d ); [ c , d ] = [ d , c ]; console . log ( c , d ); var todo = { id : 123 , chore : \"learn more ts\" , completed : false }; var { id , chore , completed } = todo ; console . log ( id , chore , completed ) can use to destructure parameters as well spread operator \u00b6 can use in a function to accept any number of arguments used for cleaner array syntax, such as adding and removing items, or adding 2 arrays together computed properties \u00b6 allows you to define a property on an object with a name that is computed dynamically at runtime this allows to create dynamic variable names, which can be helpful when scraping users data and you want to use each users username as its variable name, however you do not know what all the usernames are going to be yet type fundamentals \u00b6 JS types \u00b6 primitive values (immutable) = boolean, number, string null / undefined object (many thought of types are actually just different kinds of objects) as an object orientated lang, JS offers the ability to share properties and behaviors between different types through inheritance, called prototypical inheritance prototypical inheritance means that an object is defined that contains the base properties and behavior to be shared and when new instances of that type are created, JS links those new instances to the properties and behaviors of the base class not all JS objects must be created from a constructor that has a prototype an object literal is a simple way to define a JS object an object literal is nothing more than a way to define an instantiate an object all at the same time understanding type inference \u00b6 static analysis means that regardless of whether you explicitly define types or not, TS looks through your code doing its best to guess / infer what type any given object could be TS will automatically enforce inferred types TS will infer the type of function return values as well when TS cannot infer what a type might be, then it just calls it the any type, which is the most dynamic and nonrestrictive type available the any type is basically the default dynamic type of JS you can use any type to reassign variables to values of different types you lose any and all help that TS provides when using an any type, TS would not even catch things like misspellings so the any type should only be used when absolutely necessary specifying JS types \u00b6 the more specific you are in your intent, the better the type system can help you find mistakes function arrayPlusString ( x : any [], y : string ) : number { var total : number = x . length + y . length ; return total } specifying function parameter types \u00b6 union types allow arguments to accept multiple types with the pipe operator (|) TS will limit methods on union types, use instanceof operator first if needed this is known as the type-guard syntax function totalLength ( x : string , y : string ) : number function totalLength ( x : any [], y : any []) : number function totalLength ( x : ( string | any []), y : ( string | any [])) : number { var total : number = x . length + y . length ; x . slice ( 0 ); if ( x instanceof Array ) { x . push ( 'abc' ) } if ( x instanceof String ) { x . substr ( 1 ); } return total ; } console . log ( totalLength ( \"hello \" , \"there\" )) function overloads allow us to define possible function parameter values before it is created custom types \u00b6 you can define custom types that describe the data structures and behavior that your application uses TS defines 3 ways to define a custom type, interfaces, classes and enums defining custom types with interfaces \u00b6 an interface acts as a contract that describes the data and the behaviors that the object exposes for others to interact with interfaces are strictly used for compile-time checks only and have no effect on the code at runtime consider interfaces as a way to tell TS more information about objects to help you check more errors at build time, but do not ever rely on them being there at runtime the first thing that typescript does when it compiles the final JS output is to strip out all of the interface definitions normal syntax: var todo:Todo = {}; casting syntax: var todo = <Todo>{}; function totalLength ( x : string , y : string ) : number function totalLength ( x : any [], y : any []) : number function totalLength ( x : ( string | any []), y : ( string | any [])) : number { var total : number = x . length + y . length ; x . slice ( 0 ); if ( x instanceof Array ) { x . push ( 'abc' ) } if ( x instanceof String ) { x . substr ( 1 ); } return total ; } console . log ( totalLength ( \"hello \" , \"there\" )) using interfaces to describe functions \u00b6 JS are there own objects that can have their own properties and methods as well extending interface definitions \u00b6 you can extend definitions of 3rd party libraries when needed, such as adding a new method to an already existing interface defining constant values with enums \u00b6 enums in TS act pretty much the same as other languages such as java and c# enums are a way to define a set of meaningful and constant values that you can use to replace the magic strings and numbers that you would otherwise use a magic value a number or string in our code that means something, such as: 1 means stop 2 means slow down 3 means go 4 means broken these values might mean something to the developer writing it, but mean nothing to future developers working on the project unless there is some good comments explaining it, or they can infer meanings by studying the code enums give us a way to describe these values so they are more efficient to use for ourselves and others down the road enum TodoState { New = 1 , Active , Complete , Deleted }; interface Todo { name : string ; state : TodoState ; } var todo : Todo = { name : \"practice typescript\" , state : TodoState.New }; function deleteTodo ( todo : Todo ) { if ( todo . state != TodoState . Complete ) { throw \"Can't delete incomplete task!\" } } you can declare interfaces right inline anywhere that accepts a type, which is called an anonymous type classes \u00b6 understanding prototypical inheritance \u00b6 object-orientated functionality includes inheritance, abstraction, and encapsulation TS does not introduce the concept of a class, ECMAScript 6 did it is crucial to understand that although JS does have the class keyword syntax, it is all just syntactic sugar, and does not change the fact that JS is based on objects and prototypical inheritance JS is prototype-based programming prototype-based programming all starts with a special object called the prototype if you want to share behavior between object instances, you define that behavior on the prototype object you then link other instances to that object in JS objects are just bags of dynamic properties, which means accessing a member of an object is not as simple as testing whether or not that member exists whenever you attempt to access any member of an object, regardless of whether it is a method or a value field, JS tries as hard as it can to find the member that you are looking for first, JS looks for the member on the object itself, just like you asked it to if it finds a member with that name on the object you reference, then great. It acccess that member and its done however if JS does not find a matching member on that object, it will not give up there JS will then look at the object's prototype object to see if the member exists on that object if a member of that name exists on the prototype, then JS refers to that member and it is done Otherwise it accesses the prototype's prototype, and the cycle continues all the way up the chain until reaches the root of everything, the object prototype Object.prototype is actually an object that you can see and interact with if you type Object.prototype in the console, everything that you see will be available to all other JS objects where does this special prototype object come from, and how and when is it assigned to my objects? most of the time the prototype is assigned to your objects for you the more complex answer is that there are actually quite a few ways that prototype objects get assigned when JS creates any object, even an object literal, it automatically links its prototype object to the Object.prototype, the same is true about the other 2 special types of objects, functions and arrays when JS creates objects with functions and arrays, it links them to the Function.prototype and Array.prototype objects (respectively) this allows all functions and arrays to share common behavior, such as all arrays having the slice method and all functions having the bind method the most common way JS assigns a prototype to an object is with a constructor, which is really just a function that is called with the new keyword whem you initialize an object with a new keyword, JS does 3 things: creates a new object sets the new object's prototype to the constructor functions prototype executes the function that you called with the new keyword, referring to the new object as this within that method defining a class \u00b6 classes allow you to define prototypical behavior in a much simpler way original prototyping way: function TodoService () { this . todos = []; } TodoService . prototype . getAll = function () { return this . todos ; } var service = new TodoService (); service . getAll () you can use use all TS features to extend ECMAScript6 class syntax with additional static type information in the prototype based syntax, the constructor function is simply the function that you attach all of the prototype behavior to in order to define a constructor function using the class syntax, you simply define a method with the name constructor at somepoint you may need to maintain a single same value across multiple components, ot many instances of 1 type of component in other languages you would refer to these kinds of variables at static members for years the easiest and most common way to implement static variables was to simply create a variable in the global namespace global variables are now generally considered to be considered bad practice, and avoided at all costs modern JS the more accepted common practice of defining a static variable is to attach it to an object, especially the function that is going to use it the most prior to the ECMAScript6 syntax when creating a constructor function and attaching behavior to it via its prototype, the lastId variable would be attached directly onto the constructor function itself new class way with TS: interface Todo { name : string ; state : boolean ; } class TodoService { static lastId : number = 0 ; constructor ( private todos : Todo []) { } add ( todo : Todo ) { var newId = TodoService . getNextId (); } getAll () { return this . todos ; } static getNextId () { return TodoService . lastId += 1 ; } } making properties smarter with accessors \u00b6 getters and setters make it easier to apply logic when changing properties inside classes / objects inheriting behavior \u00b6 a statemachine is a design pattern for managing state use the extend keyword to extend a class the reason for inheriting from a base class is to extend and / or override its behavior you do not have to call constructor on the derived class, BUT if you do, you have to call it on the base class use the super keyword to call constructor on the base class make changes to methods by calling super inside of the method definition implementing an abstract class \u00b6 an abstract class is a class that is only created to be a base class for future classes use the abstract keyword to implement an abstract class use the abstract keyword before methods to define that any future derived classes need to implement their own version of that method TS supports abstract classes, JS does not controlling visibility with access modifiers \u00b6 the private keyword is an access modifier, used to hide members of a classfrom being accessed outside of that class you can apply access modifiers to any member of a Typescript class, including constructor parameters, methods, properties, static properties, getters, setters both the getter and the setter must be either private or public TS offers 3 access modifiers to describe how much you want to protect the members of your classes the access modifiers are private, protected, and public the private modifier is the most restrictive modifier of the 3 placing a private modifier on a member means that only methods defined directly on the same class definition may access that member TS will complain if any other type, including types that inherit or extend from that class, attempt access the member the protected modifier is smiliar to the private modifier in that only methods defined on the same class may access the member, but it expands this definition to any classes that inherit or extend from this class the public modifier is the least restrictive of all a member with public access may be accessed from any other type the public modifier basically just decribes the default behavior of JS public is the default access modifier so you probably will not see it much the 1 case you might see the public modifier more often is applying it to a constructor parameter JS does not actually support access modifiers TS is a superset of JS, which means that it does not change how JS works TS is able to let us use access modifiers just for development, to ensure better practices and less bugs in our code, express our intent and work with other developers and our code better in the future implementing interfaces \u00b6 the primary reason that interfaces exist in a statically typed langauge is to attach them to classes because TS understands and implements JS native duck typing behavior, you do not actually have to do anything in order to make use of an interface by simply applying the interface to the variables and the return values in which you expect to adhere to that interface, TS will automatically inspect every object that you attempt to assign to that variable or attempt to return as a return value when the object structure matches the interface you've defined, then it really does not matter what the type of the object is, everything is fine if the object structure does not match the interface, such as missing properties or methods that the interface expects, or the type of properties do not match, TS will yell at you, that you have attempted to use an object that does not match the interface even though you don't always have to apply type information for TS to work, the more explicit you are, the better a class can implement multiple interfaces at once generics \u00b6 introducing generics \u00b6 TS offers generics, which C# and Java offer as well generics are a way to create functions and classes that define a behavior that can be reused across many different types, while retaining the full information about that type create a generic by using <$name> after the function name but before the parameter parenthesis, this tells TS that you will be referring to a generic type in this function and you will be referring to that type by $name many people use <T> by covention, but any variable name is acceptable with a generic type defined, it can be used throughout the method any place that a regular type would be used, like on the methods parameter a generic type is good for telling TS that the input type and return type of a function will always be the same a generic type is not a specific type but is determined by TS each time it is used in a function to do things like ensure matching types of a parameter value and return value in a function where it could accept any time (such as a JSON.stringify function) whenever you see a place in your application where you seem to be copying the same code over and over, and all you are doing differently in each version is simply changing which type you are using, then that might be a great oppurtunity to reduce that duplicated code into a single generic function function clone < T > ( value : T ) : T { let serialized = JSON . stringify ( value ); return JSON . parse ( serialized ); } creating generic classes \u00b6 generics can be applied to classes as well TS treats the JS builtin Array type as a generic class below is just 2 different syntax for exactly the same thing var syntax1 : number [] = [ 1 , 2 , 3 ] var syntax2 : Array < number > = [ 1 , 2 , 3 ] generic classes are good for key value pair classes class KeyValuePair < Tkey , Tvalue > { constructor ( public key : Tkey , public value : Tvalue ){} } let pair01 = new KeyValuePair ( 'id' , 1 ); let pair02 = new KeyValuePair ( 'joined' , Date . now ()); let pair03 = new KeyValuePair ( 'name' , 'jack' ); let pair1 = new KeyValuePair < string , 1 > ( 'id' , 1 ); let pair2 = new KeyValuePair < number , Date > ( 'joined' , new Date ( Date . now ())); let pair3 = new KeyValuePair < string , string > ( 'name' , 'jack' ); class KeyValuePairPrinte < T , U > { constructor ( private pairs : KeyValuePair < T , U > []) {} print () { for ( let p of this . pairs ) { console . log ( ` ${ p . key } : ${ p . value } ` ) } } } a great way to group generic methods that all operate on the same types of objects applying generic constraints \u00b6 TS offers the concept of generic restraints that you can apply to your generic type parameters, to dissallow certain types of values apply generic constraints with the extends keyword you can place restraints on your generic types to limit the type parameters that consumers of your generic functions or classes can apply you cannot refer to generic parameters that you defined in the same type list modules \u00b6 understanding the need for modules in JS \u00b6 JS has been around for over 20 years only recently has the industry started to really take JS seriously and started to apply patterns, practices, and development standards for working in the browser a big problem that exists is putting all of your code in the global namespace putting all of your code in the global namespace encourages you to create all sorts of dependencies between components simply because you can global namespace is bad because: encourages implicit sharing between components difficult to determine component boundaries difficult to determine component dependencies global namespace can create what is known as spaghetti code, where your entire application just becomes 1 giant ball of intertwined threads, without anyway of telling where one component begins and another ends to avoid spaghetti code, many first class languages have some kind of mechanism to modularize code, to keep components seperate from one another and distinguish between 2 components that may share the same name but are otherwise completely different learning JS design patterns is an awesome free book JS encapsulattion methods: module pattern / revealing module pattern namespaces ECMAScript 2015 modules / module loaders organizing your code with namespaces \u00b6 TS offers a few ways to better encapsulate and organize your code namespaces is the simplest way to organize your code better putting variables inside of a namespace will hide that variable from code outside of the namespace using namespaces to encapsulate private members \u00b6 seperate classes into different files and place variables inside namespace to make completely private from any other code in the project the namepspace approach is also referred to as the \"internal module approach\" understanding the difference between internal and external modules \u00b6 internal vs external modules approach: both encourage encapsulation and organization internal uses namespaces to scope variables external uses the file itself to scope variables all modules are only available within the namespace by default and must be exported to be available to other modules TS supports CommonJS syntax and ECMAScript 2015 syntax using modules \u00b6 add module option to tsconfig CommonJS = import Model = require('./model'); ECMAScript 2015 = import * as Model from './model'; or import { Todo, User } from './model' extras \u00b6 debugging TS with source maps \u00b6 an emerging browser feature allows language compilers to tell browsers where exactly a particular variable or expression lives in the original source code, regardless what that source code is setting the sourceMap complier option to true creates an additional map file along with every JS file decorators \u00b6 a proposed ECMAScript syntax that allow you to implement the decorator design pattern to modify the behavior of a class, method, property, or parameter in a declarative fashion this powerful approach allows you to define common behavior in a central place and then easily apply it across your application to reduce duplicate code and make your code more readable and maintable, all at the same time a decorator is just a function with a special signature decorators support 4 different targets, classes, methods, properties, parameters","title":"Essentials"},{"location":"software/typescript/essentials/#typescript-essentials","text":"designed to be fully compatible with JS TS tooling is fully cross-platform TS is a superset of JS, which means it is an extension of JS, adding new features and syntax on top of the core language","title":"TypeScript Essentials"},{"location":"software/typescript/essentials/#introducing-ts","text":"TS is a super set of the JS programming language that adds the concept of static typing to the core features of JS JS is and always has been a dynamically typed language both static and dynamic languages rely on types (definitions of data structures and behaviors to ensure their programs are correct) the different kinds of typed languages validate types in different ways dynamic languages: aim to be much more forgiving at development time, relying on the concept of duck typing to validate that a particular object can be used a certain way duck typing refers to the idea that if it looks like a duck, walks like a duck, and quacks like a duck, it must be a duck the net result of this approach is that tools do not have enough information to catch errors before the application runs statically typed languages: more rigid than dynamic aim to catch errors before the code is executed they do this by imposing restrictions on how you can interact with objects forcing you to clearly specify everything about the object that you are going to interact with in the static world you cannot just call a \"quack\" method on any object, you must first explicitly define a type that has that \"quack\" method as well as any parameters that need to be passed into that method, not to mention the value that the \"quack\" method will return to its callers tsconfig.json a configuration object with config values typescript compiler automatically looks for this file when it starts and if it does it treats the whole folder and any subfolders as one project with this file we no longer have to tell typescript which files to watch when running tsc -w { \"compilerOptions\" : { \"target\" : \"es5\" , \"module\" : \"system\" } }","title":"introducing TS"},{"location":"software/typescript/essentials/#es6-language-features","text":"","title":"ES6 language features"},{"location":"software/typescript/essentials/#reviewing-es6-language-features","text":"TS provides the ability to leverage a handful of ECMAScript 6 and ES7 features that aren't yet widely supported and compile them down to ES5 compatible JS","title":"reviewing ES6 language features"},{"location":"software/typescript/essentials/#default-optional-parameters","text":"allows you to specify a default value for a given a parameter","title":"default / optional parameters"},{"location":"software/typescript/essentials/#template-strings","text":"allows inserting variables directly into strings, gives ability to more easily programmatically render HTML to the DOM","title":"template strings"},{"location":"software/typescript/essentials/#let-and-const","text":"the var keyword has sometimes undesirable behavior, it is accessible outside of scopes that other languages would never make possible using the let keyword changes variable assignment to behave more like other programming language const means to create a variable and not let it change","title":"let and const"},{"location":"software/typescript/essentials/#forof-loops","text":"used to loop over an array with smoother syntax var array = [ \"learn typescript\" , \"learn typescript more\" , \"practice typescript\" ] for ( var index in array ) { var value = array [ index ]; console . log ( ` ${ index } : ${ value } ` ); } for ( var value of array ) { console . log ( ` ${ value } ` ) }","title":"for...of loops"},{"location":"software/typescript/essentials/#lambdas","text":"the this keyword has strange behavior compared to most programming languages arrow functions allow us to get around the this keyword with cleaner syntax var container = document . getElementById ( 'container' ); var container2 = document . getElementById ( 'container2' ); function Counter ( el ){ this . count = 0 ; el . innerHTML = this . count ; let _this = this ; el . addEventListener ( \"click\" , function () { _this . count += 1 el . innerHTML = _this . count ; } ) } new Counter ( container ) function Counter2 ( el ) { this . count = 0 ; el . innerHTML = this . count ; el . addEventListener ( 'click' , () => { this . count += 1 ; el . innerHTML = this . count ; }) } new Counter2 ( container2 ) const filtered = [ - 1 , 1 , 2 , 3 ]. filter ( x => x > 0 ) console . log ( filtered ) arrow \"lambda\" functions / anonymous functions return their output automatically","title":"lambdas"},{"location":"software/typescript/essentials/#destructuring","text":"the ability to assign values to multiple variable from a single object with a single statement think of destructuring as the reverse of creating a bunch of variables and combining them into an array swapping values also becomes easier, instead of having to use a temporary value to hold the first value we swap var array = [ 123 , \"learn typescript more\" , false ] var [ id , chore , completed ] = array ; console . log ( array ) console . log ( id , chore , completed ) let a = \"yes\" ; let b = \"no\" ; console . log ( a , b ) var temp = a ; a = b ; b = temp ; console . log ( a , b ); var c = \"yes\" ; var d = \"no\" ; console . log ( c , d ); [ c , d ] = [ d , c ]; console . log ( c , d ); var todo = { id : 123 , chore : \"learn more ts\" , completed : false }; var { id , chore , completed } = todo ; console . log ( id , chore , completed ) can use to destructure parameters as well","title":"destructuring"},{"location":"software/typescript/essentials/#spread-operator","text":"can use in a function to accept any number of arguments used for cleaner array syntax, such as adding and removing items, or adding 2 arrays together","title":"spread operator"},{"location":"software/typescript/essentials/#computed-properties","text":"allows you to define a property on an object with a name that is computed dynamically at runtime this allows to create dynamic variable names, which can be helpful when scraping users data and you want to use each users username as its variable name, however you do not know what all the usernames are going to be yet","title":"computed properties"},{"location":"software/typescript/essentials/#type-fundamentals","text":"","title":"type fundamentals"},{"location":"software/typescript/essentials/#js-types","text":"primitive values (immutable) = boolean, number, string null / undefined object (many thought of types are actually just different kinds of objects) as an object orientated lang, JS offers the ability to share properties and behaviors between different types through inheritance, called prototypical inheritance prototypical inheritance means that an object is defined that contains the base properties and behavior to be shared and when new instances of that type are created, JS links those new instances to the properties and behaviors of the base class not all JS objects must be created from a constructor that has a prototype an object literal is a simple way to define a JS object an object literal is nothing more than a way to define an instantiate an object all at the same time","title":"JS types"},{"location":"software/typescript/essentials/#understanding-type-inference","text":"static analysis means that regardless of whether you explicitly define types or not, TS looks through your code doing its best to guess / infer what type any given object could be TS will automatically enforce inferred types TS will infer the type of function return values as well when TS cannot infer what a type might be, then it just calls it the any type, which is the most dynamic and nonrestrictive type available the any type is basically the default dynamic type of JS you can use any type to reassign variables to values of different types you lose any and all help that TS provides when using an any type, TS would not even catch things like misspellings so the any type should only be used when absolutely necessary","title":"understanding type inference"},{"location":"software/typescript/essentials/#specifying-js-types","text":"the more specific you are in your intent, the better the type system can help you find mistakes function arrayPlusString ( x : any [], y : string ) : number { var total : number = x . length + y . length ; return total }","title":"specifying JS types"},{"location":"software/typescript/essentials/#specifying-function-parameter-types","text":"union types allow arguments to accept multiple types with the pipe operator (|) TS will limit methods on union types, use instanceof operator first if needed this is known as the type-guard syntax function totalLength ( x : string , y : string ) : number function totalLength ( x : any [], y : any []) : number function totalLength ( x : ( string | any []), y : ( string | any [])) : number { var total : number = x . length + y . length ; x . slice ( 0 ); if ( x instanceof Array ) { x . push ( 'abc' ) } if ( x instanceof String ) { x . substr ( 1 ); } return total ; } console . log ( totalLength ( \"hello \" , \"there\" )) function overloads allow us to define possible function parameter values before it is created","title":"specifying function parameter types"},{"location":"software/typescript/essentials/#custom-types","text":"you can define custom types that describe the data structures and behavior that your application uses TS defines 3 ways to define a custom type, interfaces, classes and enums","title":"custom types"},{"location":"software/typescript/essentials/#defining-custom-types-with-interfaces","text":"an interface acts as a contract that describes the data and the behaviors that the object exposes for others to interact with interfaces are strictly used for compile-time checks only and have no effect on the code at runtime consider interfaces as a way to tell TS more information about objects to help you check more errors at build time, but do not ever rely on them being there at runtime the first thing that typescript does when it compiles the final JS output is to strip out all of the interface definitions normal syntax: var todo:Todo = {}; casting syntax: var todo = <Todo>{}; function totalLength ( x : string , y : string ) : number function totalLength ( x : any [], y : any []) : number function totalLength ( x : ( string | any []), y : ( string | any [])) : number { var total : number = x . length + y . length ; x . slice ( 0 ); if ( x instanceof Array ) { x . push ( 'abc' ) } if ( x instanceof String ) { x . substr ( 1 ); } return total ; } console . log ( totalLength ( \"hello \" , \"there\" ))","title":"defining custom types with interfaces"},{"location":"software/typescript/essentials/#using-interfaces-to-describe-functions","text":"JS are there own objects that can have their own properties and methods as well","title":"using interfaces to describe functions"},{"location":"software/typescript/essentials/#extending-interface-definitions","text":"you can extend definitions of 3rd party libraries when needed, such as adding a new method to an already existing interface","title":"extending interface definitions"},{"location":"software/typescript/essentials/#defining-constant-values-with-enums","text":"enums in TS act pretty much the same as other languages such as java and c# enums are a way to define a set of meaningful and constant values that you can use to replace the magic strings and numbers that you would otherwise use a magic value a number or string in our code that means something, such as: 1 means stop 2 means slow down 3 means go 4 means broken these values might mean something to the developer writing it, but mean nothing to future developers working on the project unless there is some good comments explaining it, or they can infer meanings by studying the code enums give us a way to describe these values so they are more efficient to use for ourselves and others down the road enum TodoState { New = 1 , Active , Complete , Deleted }; interface Todo { name : string ; state : TodoState ; } var todo : Todo = { name : \"practice typescript\" , state : TodoState.New }; function deleteTodo ( todo : Todo ) { if ( todo . state != TodoState . Complete ) { throw \"Can't delete incomplete task!\" } } you can declare interfaces right inline anywhere that accepts a type, which is called an anonymous type","title":"defining constant values with enums"},{"location":"software/typescript/essentials/#classes","text":"","title":"classes"},{"location":"software/typescript/essentials/#understanding-prototypical-inheritance","text":"object-orientated functionality includes inheritance, abstraction, and encapsulation TS does not introduce the concept of a class, ECMAScript 6 did it is crucial to understand that although JS does have the class keyword syntax, it is all just syntactic sugar, and does not change the fact that JS is based on objects and prototypical inheritance JS is prototype-based programming prototype-based programming all starts with a special object called the prototype if you want to share behavior between object instances, you define that behavior on the prototype object you then link other instances to that object in JS objects are just bags of dynamic properties, which means accessing a member of an object is not as simple as testing whether or not that member exists whenever you attempt to access any member of an object, regardless of whether it is a method or a value field, JS tries as hard as it can to find the member that you are looking for first, JS looks for the member on the object itself, just like you asked it to if it finds a member with that name on the object you reference, then great. It acccess that member and its done however if JS does not find a matching member on that object, it will not give up there JS will then look at the object's prototype object to see if the member exists on that object if a member of that name exists on the prototype, then JS refers to that member and it is done Otherwise it accesses the prototype's prototype, and the cycle continues all the way up the chain until reaches the root of everything, the object prototype Object.prototype is actually an object that you can see and interact with if you type Object.prototype in the console, everything that you see will be available to all other JS objects where does this special prototype object come from, and how and when is it assigned to my objects? most of the time the prototype is assigned to your objects for you the more complex answer is that there are actually quite a few ways that prototype objects get assigned when JS creates any object, even an object literal, it automatically links its prototype object to the Object.prototype, the same is true about the other 2 special types of objects, functions and arrays when JS creates objects with functions and arrays, it links them to the Function.prototype and Array.prototype objects (respectively) this allows all functions and arrays to share common behavior, such as all arrays having the slice method and all functions having the bind method the most common way JS assigns a prototype to an object is with a constructor, which is really just a function that is called with the new keyword whem you initialize an object with a new keyword, JS does 3 things: creates a new object sets the new object's prototype to the constructor functions prototype executes the function that you called with the new keyword, referring to the new object as this within that method","title":"understanding prototypical inheritance"},{"location":"software/typescript/essentials/#defining-a-class","text":"classes allow you to define prototypical behavior in a much simpler way original prototyping way: function TodoService () { this . todos = []; } TodoService . prototype . getAll = function () { return this . todos ; } var service = new TodoService (); service . getAll () you can use use all TS features to extend ECMAScript6 class syntax with additional static type information in the prototype based syntax, the constructor function is simply the function that you attach all of the prototype behavior to in order to define a constructor function using the class syntax, you simply define a method with the name constructor at somepoint you may need to maintain a single same value across multiple components, ot many instances of 1 type of component in other languages you would refer to these kinds of variables at static members for years the easiest and most common way to implement static variables was to simply create a variable in the global namespace global variables are now generally considered to be considered bad practice, and avoided at all costs modern JS the more accepted common practice of defining a static variable is to attach it to an object, especially the function that is going to use it the most prior to the ECMAScript6 syntax when creating a constructor function and attaching behavior to it via its prototype, the lastId variable would be attached directly onto the constructor function itself new class way with TS: interface Todo { name : string ; state : boolean ; } class TodoService { static lastId : number = 0 ; constructor ( private todos : Todo []) { } add ( todo : Todo ) { var newId = TodoService . getNextId (); } getAll () { return this . todos ; } static getNextId () { return TodoService . lastId += 1 ; } }","title":"defining a class"},{"location":"software/typescript/essentials/#making-properties-smarter-with-accessors","text":"getters and setters make it easier to apply logic when changing properties inside classes / objects","title":"making properties smarter with accessors"},{"location":"software/typescript/essentials/#inheriting-behavior","text":"a statemachine is a design pattern for managing state use the extend keyword to extend a class the reason for inheriting from a base class is to extend and / or override its behavior you do not have to call constructor on the derived class, BUT if you do, you have to call it on the base class use the super keyword to call constructor on the base class make changes to methods by calling super inside of the method definition","title":"inheriting behavior"},{"location":"software/typescript/essentials/#implementing-an-abstract-class","text":"an abstract class is a class that is only created to be a base class for future classes use the abstract keyword to implement an abstract class use the abstract keyword before methods to define that any future derived classes need to implement their own version of that method TS supports abstract classes, JS does not","title":"implementing an abstract class"},{"location":"software/typescript/essentials/#controlling-visibility-with-access-modifiers","text":"the private keyword is an access modifier, used to hide members of a classfrom being accessed outside of that class you can apply access modifiers to any member of a Typescript class, including constructor parameters, methods, properties, static properties, getters, setters both the getter and the setter must be either private or public TS offers 3 access modifiers to describe how much you want to protect the members of your classes the access modifiers are private, protected, and public the private modifier is the most restrictive modifier of the 3 placing a private modifier on a member means that only methods defined directly on the same class definition may access that member TS will complain if any other type, including types that inherit or extend from that class, attempt access the member the protected modifier is smiliar to the private modifier in that only methods defined on the same class may access the member, but it expands this definition to any classes that inherit or extend from this class the public modifier is the least restrictive of all a member with public access may be accessed from any other type the public modifier basically just decribes the default behavior of JS public is the default access modifier so you probably will not see it much the 1 case you might see the public modifier more often is applying it to a constructor parameter JS does not actually support access modifiers TS is a superset of JS, which means that it does not change how JS works TS is able to let us use access modifiers just for development, to ensure better practices and less bugs in our code, express our intent and work with other developers and our code better in the future","title":"controlling visibility with access modifiers"},{"location":"software/typescript/essentials/#implementing-interfaces","text":"the primary reason that interfaces exist in a statically typed langauge is to attach them to classes because TS understands and implements JS native duck typing behavior, you do not actually have to do anything in order to make use of an interface by simply applying the interface to the variables and the return values in which you expect to adhere to that interface, TS will automatically inspect every object that you attempt to assign to that variable or attempt to return as a return value when the object structure matches the interface you've defined, then it really does not matter what the type of the object is, everything is fine if the object structure does not match the interface, such as missing properties or methods that the interface expects, or the type of properties do not match, TS will yell at you, that you have attempted to use an object that does not match the interface even though you don't always have to apply type information for TS to work, the more explicit you are, the better a class can implement multiple interfaces at once","title":"implementing interfaces"},{"location":"software/typescript/essentials/#generics","text":"","title":"generics"},{"location":"software/typescript/essentials/#introducing-generics","text":"TS offers generics, which C# and Java offer as well generics are a way to create functions and classes that define a behavior that can be reused across many different types, while retaining the full information about that type create a generic by using <$name> after the function name but before the parameter parenthesis, this tells TS that you will be referring to a generic type in this function and you will be referring to that type by $name many people use <T> by covention, but any variable name is acceptable with a generic type defined, it can be used throughout the method any place that a regular type would be used, like on the methods parameter a generic type is good for telling TS that the input type and return type of a function will always be the same a generic type is not a specific type but is determined by TS each time it is used in a function to do things like ensure matching types of a parameter value and return value in a function where it could accept any time (such as a JSON.stringify function) whenever you see a place in your application where you seem to be copying the same code over and over, and all you are doing differently in each version is simply changing which type you are using, then that might be a great oppurtunity to reduce that duplicated code into a single generic function function clone < T > ( value : T ) : T { let serialized = JSON . stringify ( value ); return JSON . parse ( serialized ); }","title":"introducing generics"},{"location":"software/typescript/essentials/#creating-generic-classes","text":"generics can be applied to classes as well TS treats the JS builtin Array type as a generic class below is just 2 different syntax for exactly the same thing var syntax1 : number [] = [ 1 , 2 , 3 ] var syntax2 : Array < number > = [ 1 , 2 , 3 ] generic classes are good for key value pair classes class KeyValuePair < Tkey , Tvalue > { constructor ( public key : Tkey , public value : Tvalue ){} } let pair01 = new KeyValuePair ( 'id' , 1 ); let pair02 = new KeyValuePair ( 'joined' , Date . now ()); let pair03 = new KeyValuePair ( 'name' , 'jack' ); let pair1 = new KeyValuePair < string , 1 > ( 'id' , 1 ); let pair2 = new KeyValuePair < number , Date > ( 'joined' , new Date ( Date . now ())); let pair3 = new KeyValuePair < string , string > ( 'name' , 'jack' ); class KeyValuePairPrinte < T , U > { constructor ( private pairs : KeyValuePair < T , U > []) {} print () { for ( let p of this . pairs ) { console . log ( ` ${ p . key } : ${ p . value } ` ) } } } a great way to group generic methods that all operate on the same types of objects","title":"creating generic classes"},{"location":"software/typescript/essentials/#applying-generic-constraints","text":"TS offers the concept of generic restraints that you can apply to your generic type parameters, to dissallow certain types of values apply generic constraints with the extends keyword you can place restraints on your generic types to limit the type parameters that consumers of your generic functions or classes can apply you cannot refer to generic parameters that you defined in the same type list","title":"applying generic constraints"},{"location":"software/typescript/essentials/#modules","text":"","title":"modules"},{"location":"software/typescript/essentials/#understanding-the-need-for-modules-in-js","text":"JS has been around for over 20 years only recently has the industry started to really take JS seriously and started to apply patterns, practices, and development standards for working in the browser a big problem that exists is putting all of your code in the global namespace putting all of your code in the global namespace encourages you to create all sorts of dependencies between components simply because you can global namespace is bad because: encourages implicit sharing between components difficult to determine component boundaries difficult to determine component dependencies global namespace can create what is known as spaghetti code, where your entire application just becomes 1 giant ball of intertwined threads, without anyway of telling where one component begins and another ends to avoid spaghetti code, many first class languages have some kind of mechanism to modularize code, to keep components seperate from one another and distinguish between 2 components that may share the same name but are otherwise completely different learning JS design patterns is an awesome free book JS encapsulattion methods: module pattern / revealing module pattern namespaces ECMAScript 2015 modules / module loaders","title":"understanding the need for modules in JS"},{"location":"software/typescript/essentials/#organizing-your-code-with-namespaces","text":"TS offers a few ways to better encapsulate and organize your code namespaces is the simplest way to organize your code better putting variables inside of a namespace will hide that variable from code outside of the namespace","title":"organizing your code with namespaces"},{"location":"software/typescript/essentials/#using-namespaces-to-encapsulate-private-members","text":"seperate classes into different files and place variables inside namespace to make completely private from any other code in the project the namepspace approach is also referred to as the \"internal module approach\"","title":"using namespaces to encapsulate private members"},{"location":"software/typescript/essentials/#understanding-the-difference-between-internal-and-external-modules","text":"internal vs external modules approach: both encourage encapsulation and organization internal uses namespaces to scope variables external uses the file itself to scope variables all modules are only available within the namespace by default and must be exported to be available to other modules TS supports CommonJS syntax and ECMAScript 2015 syntax","title":"understanding the difference between internal and external modules"},{"location":"software/typescript/essentials/#using-modules","text":"add module option to tsconfig CommonJS = import Model = require('./model'); ECMAScript 2015 = import * as Model from './model'; or import { Todo, User } from './model'","title":"using modules"},{"location":"software/typescript/essentials/#extras","text":"","title":"extras"},{"location":"software/typescript/essentials/#debugging-ts-with-source-maps","text":"an emerging browser feature allows language compilers to tell browsers where exactly a particular variable or expression lives in the original source code, regardless what that source code is setting the sourceMap complier option to true creates an additional map file along with every JS file","title":"debugging TS with source maps"},{"location":"software/typescript/essentials/#decorators","text":"a proposed ECMAScript syntax that allow you to implement the decorator design pattern to modify the behavior of a class, method, property, or parameter in a declarative fashion this powerful approach allows you to define common behavior in a central place and then easily apply it across your application to reduce duplicate code and make your code more readable and maintable, all at the same time a decorator is just a function with a special signature decorators support 4 different targets, classes, methods, properties, parameters","title":"decorators"},{"location":"software/vim/","text":"Vim Text Editor \u00b6 Vi IMproved non-exhaustive documentation about Vim \u00b6 acronym for Vi IMproved free and open source text editor written by Bram Moolenaar was first released in 1991 for UNIX variants main goal was to provide enhancement to the Vi editor Vi editor was released 1976, by Bill Joy modal editor, which means it has different modes or ways to edit text command centric editor that is available everywhere Vim traditionally does not have GUI but now there is separate installer called gVim which provides GUI modes and features \u00b6 command mode is the default mode Vim starts in when first opened insert mode is used to enter text, press i to start this mode command line mode is used to type commands, press : to start this mode visual mode is used to visually select text and run commands on selected lines or sections features \u00b6 memory footprint is very low command centric so performing complex text manipulations is quick and easy highly configurable and uses simple text files to store its configuration there are many plug-in available for Vim functionality can be extended in greatly using plug-ins supports multiple windows and can be split into multiple windows supports multiple buffers supports multiple tabs supports recording features which allows to record and play Vim commands in repeated manner general commands \u00b6 Vim supports h l j k as well as arrow keys for moving cursor i ( change to insert mode ) esc ( change to command mode, default when opening Vim ) : ( change to command line mode ) v ( change to visual line mode ) ZZ ( save and quit ) h ( move cursor left ) l ( move cursor right ) k ( move cursor up a line ) j ( move cursor down a line ) 0 ( move cursor to beginning of current line ) $ ( move cursor to end of current line ) i ( insert, cursor starts at beginning of current character ) I ( insert at beginning of line, cursor starts at beginning of current line ) a ( insert / append, cursor starts after current character ) A ( insert / append to end line, cursor starts at end of line ) o ( insert / open, cursor starts on new line below ) O ( insert / open, cursor starts on new line above ) s ( substitute current character then enter insert mode ) S ( substitute current line then enter insert mode ) cc ( change line, delete current line then enter insert mode ) r MYCHAR ( replaces the character under the cursor with MYCHAR ) command-line mode \u00b6 :e Load new file in buffer for editing :edit Same as :e :e List the files for editing from current directory :edit Same as :e :edit ( loads or creates new file with name ) :view ( loads or creates new file with name in read-only mode ) :w ( save file ) :w ( save file with name ) :q ( quit ) :q! ( quit without saving ) :wq ( saves and quits ) :help ( opens the help menu ) tabs \u00b6 :tabnew ( open in new tab ) :tabclose ( close current tab ) :tabnext ( move to the next tab ) :tabprevious ( move to the previous tab ) :tabfirst ( move to the first tab ) :tablast ( move to the last tab ) buffers \u00b6 :badd add into new buffer ) :bN ( switch to Nth buffer ) :bnext ( move to the next buffer in buffer list ) :bprevious ( move to the previous buffer in buffer list ) :buffers ( list all buffers ) :bfirst ( move to the first buffer ) :blast ( move to the last buffer ) :ball ( load all buffers ) windows \u00b6 :new ( open new window ) :new ( open file in new window )","title":"Overview"},{"location":"software/vim/#vim-text-editor","text":"Vi IMproved non-exhaustive documentation","title":"Vim Text Editor"},{"location":"software/vim/#about-vim","text":"acronym for Vi IMproved free and open source text editor written by Bram Moolenaar was first released in 1991 for UNIX variants main goal was to provide enhancement to the Vi editor Vi editor was released 1976, by Bill Joy modal editor, which means it has different modes or ways to edit text command centric editor that is available everywhere Vim traditionally does not have GUI but now there is separate installer called gVim which provides GUI","title":"about Vim"},{"location":"software/vim/#modes-and-features","text":"command mode is the default mode Vim starts in when first opened insert mode is used to enter text, press i to start this mode command line mode is used to type commands, press : to start this mode visual mode is used to visually select text and run commands on selected lines or sections","title":"modes and features"},{"location":"software/vim/#features","text":"memory footprint is very low command centric so performing complex text manipulations is quick and easy highly configurable and uses simple text files to store its configuration there are many plug-in available for Vim functionality can be extended in greatly using plug-ins supports multiple windows and can be split into multiple windows supports multiple buffers supports multiple tabs supports recording features which allows to record and play Vim commands in repeated manner","title":"features"},{"location":"software/vim/#general-commands","text":"Vim supports h l j k as well as arrow keys for moving cursor i ( change to insert mode ) esc ( change to command mode, default when opening Vim ) : ( change to command line mode ) v ( change to visual line mode ) ZZ ( save and quit ) h ( move cursor left ) l ( move cursor right ) k ( move cursor up a line ) j ( move cursor down a line ) 0 ( move cursor to beginning of current line ) $ ( move cursor to end of current line ) i ( insert, cursor starts at beginning of current character ) I ( insert at beginning of line, cursor starts at beginning of current line ) a ( insert / append, cursor starts after current character ) A ( insert / append to end line, cursor starts at end of line ) o ( insert / open, cursor starts on new line below ) O ( insert / open, cursor starts on new line above ) s ( substitute current character then enter insert mode ) S ( substitute current line then enter insert mode ) cc ( change line, delete current line then enter insert mode ) r MYCHAR ( replaces the character under the cursor with MYCHAR )","title":"general commands"},{"location":"software/vim/#command-line-mode","text":":e Load new file in buffer for editing :edit Same as :e :e List the files for editing from current directory :edit Same as :e :edit ( loads or creates new file with name ) :view ( loads or creates new file with name in read-only mode ) :w ( save file ) :w ( save file with name ) :q ( quit ) :q! ( quit without saving ) :wq ( saves and quits ) :help ( opens the help menu )","title":"command-line mode"},{"location":"software/vim/#tabs","text":":tabnew ( open in new tab ) :tabclose ( close current tab ) :tabnext ( move to the next tab ) :tabprevious ( move to the previous tab ) :tabfirst ( move to the first tab ) :tablast ( move to the last tab )","title":"tabs"},{"location":"software/vim/#buffers","text":":badd add into new buffer ) :bN ( switch to Nth buffer ) :bnext ( move to the next buffer in buffer list ) :bprevious ( move to the previous buffer in buffer list ) :buffers ( list all buffers ) :bfirst ( move to the first buffer ) :blast ( move to the last buffer ) :ball ( load all buffers )","title":"buffers"},{"location":"software/vim/#windows","text":":new ( open new window ) :new ( open file in new window )","title":"windows"},{"location":"software/vim/learning-vim/","text":"Learning Vim \u00b6 Lindy Effect \u00b6 the longer a technology has been around, the more likely it is to remain in use buffers tabs windows \u00b6 a buffer is a file which is loaded into memory a buffer in vim is like a tab in other text editors use :vsplit to open a new window, which is a window into the same buffer you split from making a change in one buffer window will change the other buffer window as well (since they are the same buffer ) :tabnew % will open a new tab with the current buffer :tabnew will open a new tab with an empty file buffers are how we track all of the files we currently have opened in vim tabs are more of a way of organizing how we navigate the buffers, or maybe have one 2 projects open at 1 time, which all the files we are editing from all the tabs will be included in our list of buffers gt switches between tabs opening a new tab and a new buffer, and then closing that tab, will still keep that buffer in vims memory for us to continue editing people want to think of tabs as collections of buffers (but they are not, unfortunately) abbreviations \u00b6 :abb mygmail justinaawd@gmail.com = auto expands mygmail to justinaawd@gmail.com use ctrl+v+ space to stop the abbreviation from expanding use abbreviations to autocorrect commonly misspelled words :abb succes success :abb sucess success commands from vim \u00b6 :! ls = runs ls and displays the output :! touch testing.txt = creates new file named testing.txt :! rm testing.txt = removes testing.txt :com! PY3 ! python3 % = :PY3 runs current file with python3 :comm! WC ! wc % = :WC counts words in current file basics \u00b6 ctrl + g to see current file you are editing { = move backward a paragraph } = move forward a paragraph ( = move backward a sentence ) = move forward a sentence ctrl + f = move page forward ctrl + b = move page backward = search forward for current word = search backward for current word \u00b6 8 j = jump down 8 lines 8 k = kick up 8 lines 8G = move to line 8 ctrl o jump back through history ctrl i jump forward . go to location of last change you made split opens new window into same buffer trl w switch windows trl w c close window e! reopen current file in its initial state r my-snippet.txt pastes my-snippet.txt into current file -1 \"\" inserts file at line 1 noremap scroll down : commands \u00b6 :8 = go to line 8 regular expressions \u00b6 / = search forward from cursor position ? = search backward from cursor position get to text by searching /my-text = any word containing my-text /te.h = any word containing tech visual mode \u00b6 v = enters visual mode v + 3k + d = delete 3 highlighted lines visual line mode \u00b6 shift+v = creates visual line shift+v+2j = highlight 2 lines shift+d = delete highlighted lines visual block mode \u00b6 ctrl+v = creates visual block l+4j+d= deletes the 8 highlighted blocks l+4j+x= deletes the 8 highlighted blocks l+4j+c+-+esc = inserts - at 4 lines registers \u00b6 \"+a+yy = yank current line into register a \"+a+p = paste line in register a search and replace \u00b6 :%s/replace-this/with-this/gc = confirm before replacing marks \u00b6 create a mark using m+LETTER jump back to that mark using '+LETTER","title":"New Learnings"},{"location":"software/vim/learning-vim/#learning-vim","text":"","title":"Learning Vim"},{"location":"software/vim/learning-vim/#lindy-effect","text":"the longer a technology has been around, the more likely it is to remain in use","title":"Lindy Effect"},{"location":"software/vim/learning-vim/#buffers-tabs-windows","text":"a buffer is a file which is loaded into memory a buffer in vim is like a tab in other text editors use :vsplit to open a new window, which is a window into the same buffer you split from making a change in one buffer window will change the other buffer window as well (since they are the same buffer ) :tabnew % will open a new tab with the current buffer :tabnew will open a new tab with an empty file buffers are how we track all of the files we currently have opened in vim tabs are more of a way of organizing how we navigate the buffers, or maybe have one 2 projects open at 1 time, which all the files we are editing from all the tabs will be included in our list of buffers gt switches between tabs opening a new tab and a new buffer, and then closing that tab, will still keep that buffer in vims memory for us to continue editing people want to think of tabs as collections of buffers (but they are not, unfortunately)","title":"buffers tabs windows"},{"location":"software/vim/learning-vim/#abbreviations","text":":abb mygmail justinaawd@gmail.com = auto expands mygmail to justinaawd@gmail.com use ctrl+v+ space to stop the abbreviation from expanding use abbreviations to autocorrect commonly misspelled words :abb succes success :abb sucess success","title":"abbreviations"},{"location":"software/vim/learning-vim/#commands-from-vim","text":":! ls = runs ls and displays the output :! touch testing.txt = creates new file named testing.txt :! rm testing.txt = removes testing.txt :com! PY3 ! python3 % = :PY3 runs current file with python3 :comm! WC ! wc % = :WC counts words in current file","title":"commands from vim"},{"location":"software/vim/learning-vim/#basics","text":"ctrl + g to see current file you are editing { = move backward a paragraph } = move forward a paragraph ( = move backward a sentence ) = move forward a sentence ctrl + f = move page forward ctrl + b = move page backward = search forward for current word","title":"basics"},{"location":"software/vim/learning-vim/#search-backward-for-current-word","text":"8 j = jump down 8 lines 8 k = kick up 8 lines 8G = move to line 8 ctrl o jump back through history ctrl i jump forward . go to location of last change you made split opens new window into same buffer trl w switch windows trl w c close window e! reopen current file in its initial state r my-snippet.txt pastes my-snippet.txt into current file -1 \"\" inserts file at line 1 noremap scroll down","title":"= search backward for current word"},{"location":"software/vim/learning-vim/#commands","text":":8 = go to line 8","title":": commands"},{"location":"software/vim/learning-vim/#regular-expressions","text":"/ = search forward from cursor position ? = search backward from cursor position get to text by searching /my-text = any word containing my-text /te.h = any word containing tech","title":"regular expressions"},{"location":"software/vim/learning-vim/#visual-mode","text":"v = enters visual mode v + 3k + d = delete 3 highlighted lines","title":"visual mode"},{"location":"software/vim/learning-vim/#visual-line-mode","text":"shift+v = creates visual line shift+v+2j = highlight 2 lines shift+d = delete highlighted lines","title":"visual line mode"},{"location":"software/vim/learning-vim/#visual-block-mode","text":"ctrl+v = creates visual block l+4j+d= deletes the 8 highlighted blocks l+4j+x= deletes the 8 highlighted blocks l+4j+c+-+esc = inserts - at 4 lines","title":"visual block mode"},{"location":"software/vim/learning-vim/#registers","text":"\"+a+yy = yank current line into register a \"+a+p = paste line in register a","title":"registers"},{"location":"software/vim/learning-vim/#search-and-replace","text":":%s/replace-this/with-this/gc = confirm before replacing","title":"search and replace"},{"location":"software/vim/learning-vim/#marks","text":"create a mark using m+LETTER jump back to that mark using '+LETTER","title":"marks"},{"location":"software/vim/nvim-config/","text":"Nvim \u00b6 Vi => Vim => Nvim ~/.config/nvim/init.vim \u00b6 \" type :h and keyword for help about that topic \" type :options for every available option set tabstop = 4 softtabstop = 4 set expandtab set smartindent set exrc \" vim will read config files from current directory set nu set relativenumber set nohlsearch \"gets rid of annoying consistent search highlighting set noerrorbells set hidden set guicursor = set nowrap set smartcase set noswapfile set nobackup set undodir =~ /.vim/ undodir set undofile set incsearch set termguicolors set scrolloff = 8 set noshowmode set completeopt = menuone , noinsert , noselect set signcolumn = yes set cmdheight = 2 \" more space to display messages set updatetime = 50 \"Having a longer update time leads to noticable delays and poor user experience ( default is 4000 ms / 4 seconds) set shortmess += c \" no pass messages to |ins-completion-menu| set clipboard += unnamedplus \" The default plugin directory will be as follows: \" - Vim (Linux/macOS): '~/.vim/plugged' \" - Vim (Windows): '~/vimfiles/plugged' \" - Neovim (Linux/macOS/Windows): stdpath('data') . '/plugged' \" You can specify a custom plugin directory by passing it as the argument \" - e.g. `call plug#begin('~/.vim/plugged')` \" - Avoid using standard Vim directory names like 'plugin' \" Make sure you use single quotes \" PLUG INFO AT 'https://github.com/junegunn/vim-plug \" Initialize plugin system call plug#begin () \"Plug 'https://github.com/junegunn/vim-github-dashboard.git' Any valid git URL is allowed Plug 'neovim/nvim-lspconfig' Plug 'junegunn/vim-easy-align' \" Shorthand notation; fetches https://github.com/junegunn/vim-easy-align Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets' \" Multiple Plug commands can be written in a single line using | separators \"Plug 'neoclide/coc.nvim' Plug 'nvim-telescope/telescope.nvim' Plug 'scrooloose/nerdtree' , { 'on' : 'NERDTreeToggle' } \" On-demand loading \"Plug '~/my-prototype-plugin' Unmanaged plugin (manually installed and updated) call plug# end () \" HOW TO REMAP \"mode+options KEY(s)-TO-PRESS THE-ACTION(S)-TO-EXECUTE \"nnoremap Y y$ \" set key to start many shortcut actions let mapleader = \" \" \"nnoremap = n(normal mode) no(no recursive) remap(re assign this key(s) to this actions(s)) nnoremap Y y $ \" yank to end of line like D natural behavior \" nnoremap D d$ \" more friendly undos inoremap , , < c - g > u \"inoremap = i(insert mode) no(no recursive) remap(re assign this key(s) to this actions(s)) inoremap . . < c - g > u inoremap ! ! < c - g > u inoremap ? ? < c - g > u \" move text more efficiently \" implement later \" vnoremap \" vnoremap \" inoremap \" inoremap \" nnoremap \" nnoremap","title":"Nvim Config"},{"location":"software/vim/nvim-config/#nvim","text":"Vi => Vim => Nvim","title":"Nvim"},{"location":"software/vim/nvim-config/#confignviminitvim","text":"\" type :h and keyword for help about that topic \" type :options for every available option set tabstop = 4 softtabstop = 4 set expandtab set smartindent set exrc \" vim will read config files from current directory set nu set relativenumber set nohlsearch \"gets rid of annoying consistent search highlighting set noerrorbells set hidden set guicursor = set nowrap set smartcase set noswapfile set nobackup set undodir =~ /.vim/ undodir set undofile set incsearch set termguicolors set scrolloff = 8 set noshowmode set completeopt = menuone , noinsert , noselect set signcolumn = yes set cmdheight = 2 \" more space to display messages set updatetime = 50 \"Having a longer update time leads to noticable delays and poor user experience ( default is 4000 ms / 4 seconds) set shortmess += c \" no pass messages to |ins-completion-menu| set clipboard += unnamedplus \" The default plugin directory will be as follows: \" - Vim (Linux/macOS): '~/.vim/plugged' \" - Vim (Windows): '~/vimfiles/plugged' \" - Neovim (Linux/macOS/Windows): stdpath('data') . '/plugged' \" You can specify a custom plugin directory by passing it as the argument \" - e.g. `call plug#begin('~/.vim/plugged')` \" - Avoid using standard Vim directory names like 'plugin' \" Make sure you use single quotes \" PLUG INFO AT 'https://github.com/junegunn/vim-plug \" Initialize plugin system call plug#begin () \"Plug 'https://github.com/junegunn/vim-github-dashboard.git' Any valid git URL is allowed Plug 'neovim/nvim-lspconfig' Plug 'junegunn/vim-easy-align' \" Shorthand notation; fetches https://github.com/junegunn/vim-easy-align Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets' \" Multiple Plug commands can be written in a single line using | separators \"Plug 'neoclide/coc.nvim' Plug 'nvim-telescope/telescope.nvim' Plug 'scrooloose/nerdtree' , { 'on' : 'NERDTreeToggle' } \" On-demand loading \"Plug '~/my-prototype-plugin' Unmanaged plugin (manually installed and updated) call plug# end () \" HOW TO REMAP \"mode+options KEY(s)-TO-PRESS THE-ACTION(S)-TO-EXECUTE \"nnoremap Y y$ \" set key to start many shortcut actions let mapleader = \" \" \"nnoremap = n(normal mode) no(no recursive) remap(re assign this key(s) to this actions(s)) nnoremap Y y $ \" yank to end of line like D natural behavior \" nnoremap D d$ \" more friendly undos inoremap , , < c - g > u \"inoremap = i(insert mode) no(no recursive) remap(re assign this key(s) to this actions(s)) inoremap . . < c - g > u inoremap ! ! < c - g > u inoremap ? ? < c - g > u \" move text more efficiently \" implement later \" vnoremap \" vnoremap \" inoremap \" inoremap \" nnoremap \" nnoremap","title":"~/.config/nvim/init.vim"},{"location":"software/vim/nvim-lua-config/","text":"Lua NeoVim \u00b6 directory structure \u00b6 . \u251c\u2500\u2500 init.lua \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 lua \u2502 \u2514\u2500\u2500 user \u2502 \u251c\u2500\u2500 alpha.lua \u2502 \u251c\u2500\u2500 autocommands.lua \u2502 \u251c\u2500\u2500 autopairs.lua \u2502 \u251c\u2500\u2500 bufferline.lua \u2502 \u251c\u2500\u2500 cmp.lua \u2502 \u251c\u2500\u2500 colorscheme.lua \u2502 \u251c\u2500\u2500 comment.lua \u2502 \u251c\u2500\u2500 gitsigns.lua \u2502 \u251c\u2500\u2500 impatient.lua \u2502 \u251c\u2500\u2500 indentline.lua \u2502 \u251c\u2500\u2500 keymaps.lua \u2502 \u251c\u2500\u2500 lsp \u2502 \u2502 \u251c\u2500\u2500 handlers.lua \u2502 \u2502 \u251c\u2500\u2500 init.lua \u2502 \u2502 \u251c\u2500\u2500 lsp-installer.lua \u2502 \u2502 \u251c\u2500\u2500 null-ls.lua \u2502 \u2502 \u2514\u2500\u2500 settings \u2502 \u2502 \u251c\u2500\u2500 jsonls.lua \u2502 \u2502 \u2514\u2500\u2500 sumneko_lua.lua \u2502 \u251c\u2500\u2500 lualine.lua \u2502 \u251c\u2500\u2500 nvim-tree.lua \u2502 \u251c\u2500\u2500 options.lua \u2502 \u251c\u2500\u2500 plugins.lua \u2502 \u251c\u2500\u2500 project.lua \u2502 \u251c\u2500\u2500 telescope.lua \u2502 \u251c\u2500\u2500 toggleterm.lua \u2502 \u251c\u2500\u2500 treesitter.lua \u2502 \u2514\u2500\u2500 whichkey.lua \u251c\u2500\u2500 plugin \u2502 \u2514\u2500\u2500 packer_compiled.lua \u2514\u2500\u2500 README.md config files \u00b6 nvim-tree.lua \u00b6 keymaps.lua plugins.lua \u00b6 ~/.config/nvim/lua/user/plugins.lua packer.nvim for plugin manager install plugins here colorscheme.lua \u00b6 set colorscheme in ~/.config/nvim/lua/user/colorscheme.lua :colorscheme TAB will show you list of built in colorschemes custom colorscheme directory = ~/.local/share/nvim/site/pack/packer/start/colorschemes bufferline.lua \u00b6 details \u00b6 setup \u00b6 mv ~/.config/nvim ~/.config/oldnvim git clone git@github.com:ChristianChiarulli/Neovim-from-scratch.git ~/.config/nvim - neovim will look for the ~/.config/nvim/init.lua file first and run any commands / configurations it finds in there ~/.config/nvim/init.lua sources the files in ~/.config/nvim/lua/user to keep configurations modular and organized ~/.config/nvim/lua/user can be renamed to anything but it needs to have its own namespace or it might have mess with NeoVim setup config directory is ~/.config/nvim ~/.config/nvim/init.lua is entry point ~/.local/share/nvim is where neovim plugins keep their code when requiring a directory, it automatically looks for init.lua gt switches between tabs Bdelete closes current buffer without closing Vim bdelete closes buffer and Vim right click a buffer to close it instead of open it LSP \u00b6 Language Server Protocol :LspInstalllInfo shows available language servers","title":"Nvim Lua Config"},{"location":"software/vim/nvim-lua-config/#lua-neovim","text":"","title":"Lua NeoVim"},{"location":"software/vim/nvim-lua-config/#directory-structure","text":". \u251c\u2500\u2500 init.lua \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 lua \u2502 \u2514\u2500\u2500 user \u2502 \u251c\u2500\u2500 alpha.lua \u2502 \u251c\u2500\u2500 autocommands.lua \u2502 \u251c\u2500\u2500 autopairs.lua \u2502 \u251c\u2500\u2500 bufferline.lua \u2502 \u251c\u2500\u2500 cmp.lua \u2502 \u251c\u2500\u2500 colorscheme.lua \u2502 \u251c\u2500\u2500 comment.lua \u2502 \u251c\u2500\u2500 gitsigns.lua \u2502 \u251c\u2500\u2500 impatient.lua \u2502 \u251c\u2500\u2500 indentline.lua \u2502 \u251c\u2500\u2500 keymaps.lua \u2502 \u251c\u2500\u2500 lsp \u2502 \u2502 \u251c\u2500\u2500 handlers.lua \u2502 \u2502 \u251c\u2500\u2500 init.lua \u2502 \u2502 \u251c\u2500\u2500 lsp-installer.lua \u2502 \u2502 \u251c\u2500\u2500 null-ls.lua \u2502 \u2502 \u2514\u2500\u2500 settings \u2502 \u2502 \u251c\u2500\u2500 jsonls.lua \u2502 \u2502 \u2514\u2500\u2500 sumneko_lua.lua \u2502 \u251c\u2500\u2500 lualine.lua \u2502 \u251c\u2500\u2500 nvim-tree.lua \u2502 \u251c\u2500\u2500 options.lua \u2502 \u251c\u2500\u2500 plugins.lua \u2502 \u251c\u2500\u2500 project.lua \u2502 \u251c\u2500\u2500 telescope.lua \u2502 \u251c\u2500\u2500 toggleterm.lua \u2502 \u251c\u2500\u2500 treesitter.lua \u2502 \u2514\u2500\u2500 whichkey.lua \u251c\u2500\u2500 plugin \u2502 \u2514\u2500\u2500 packer_compiled.lua \u2514\u2500\u2500 README.md","title":"directory structure"},{"location":"software/vim/nvim-lua-config/#config-files","text":"","title":"config files"},{"location":"software/vim/nvim-lua-config/#nvim-treelua","text":"keymaps.lua","title":"nvim-tree.lua"},{"location":"software/vim/nvim-lua-config/#pluginslua","text":"~/.config/nvim/lua/user/plugins.lua packer.nvim for plugin manager install plugins here","title":"plugins.lua"},{"location":"software/vim/nvim-lua-config/#colorschemelua","text":"set colorscheme in ~/.config/nvim/lua/user/colorscheme.lua :colorscheme TAB will show you list of built in colorschemes custom colorscheme directory = ~/.local/share/nvim/site/pack/packer/start/colorschemes","title":"colorscheme.lua"},{"location":"software/vim/nvim-lua-config/#bufferlinelua","text":"","title":"bufferline.lua"},{"location":"software/vim/nvim-lua-config/#details","text":"","title":"details"},{"location":"software/vim/nvim-lua-config/#setup","text":"mv ~/.config/nvim ~/.config/oldnvim git clone git@github.com:ChristianChiarulli/Neovim-from-scratch.git ~/.config/nvim - neovim will look for the ~/.config/nvim/init.lua file first and run any commands / configurations it finds in there ~/.config/nvim/init.lua sources the files in ~/.config/nvim/lua/user to keep configurations modular and organized ~/.config/nvim/lua/user can be renamed to anything but it needs to have its own namespace or it might have mess with NeoVim setup config directory is ~/.config/nvim ~/.config/nvim/init.lua is entry point ~/.local/share/nvim is where neovim plugins keep their code when requiring a directory, it automatically looks for init.lua gt switches between tabs Bdelete closes current buffer without closing Vim bdelete closes buffer and Vim right click a buffer to close it instead of open it","title":"setup"},{"location":"software/vim/nvim-lua-config/#lsp","text":"Language Server Protocol :LspInstalllInfo shows available language servers","title":"LSP"},{"location":"software/vim/snips/","text":"Vim Snips \u00b6 delete blank lines \u00b6 : g /^\\s*$/ d","title":"Vim Commands"},{"location":"software/vim/snips/#vim-snips","text":"","title":"Vim Snips"},{"location":"software/vim/snips/#delete-blank-lines","text":": g /^\\s*$/ d","title":"delete blank lines"},{"location":"software/vim/spacevim-config/","text":"SpaceVim \u00b6 quick and easy vim / nvim configuration my configuration file \u00b6 $HOME/.SpaceVim.d/init.toml [options] autocomplete_method = \"coc\" autocomplete_parens = false automatic_update = true colorscheme = \"molokai\" # gruvbox hybrid molokai material nord one onedark palenight jellybeans srcery NeoSolarized OceanicNext SpaceVim default_indent = 4 enable_guicolors = true enable_vimfiler_welcome = true expand_tab = true filemanager = \"nerdtree\" # defx vimfiler filetree_direction = 'left' search_highlight_persist = false project_rooter_outermost = false relativenumber = true snippet_engine = \"ultisnips\" statusline_separator = 'arrow' vimcompatible = false windows_leader = \"s\" wrap_line = true [[layers]] name = \"default\" [[layers]] name = 'autocomplete' auto_completion_return_key_behavior = \"complete\" auto_completion_tab_key_behavior = \"smart\" [[layers]] name = \"colorscheme\" # random_theme = true #frequency = \"1h\" [[layers]] name = 'shell' default_position = 'top' default_height = 30 [[layers]] name = 'lang#javascript' # auto_fix = true # enable_flow_syntax = true # format_on_save = true [[layers]] name = 'lang#python' python_interpreter = '/bin/python3' python_file_head = [ '#!/bin/python3' , ] [[layers]] name = 'lsp' filetypes = [ \"css\" , # \"html\", \"javascript\" , \"javascriptreact\" , \"python\" , \"sh\" , \"typescript\" , \"typescriptreact\" , # \"vim\", \"vue\" , #\"rust\", ] # [layers.override_cmd] # rust = [\"rls\"] [[layers]] name = \"format\" format_on_save = true format_method = \"codefmt\" [[layers]] name = \"fzf\" [[layers]] name = \"lang#typescript\" [[layers]] name = \"lang#vue\" [[layers]] name = \"lang#html\" emmet_leader_key = \"<C-e>\" emmet_filetyps = [ 'html' ] [[layers]] name = \"lang#css\" [[layers]] name = \"lang#rust\" [[layers]] name = \"lang#vim\" [[layers]] name = \"lang#toml\" [[layers]] name = \"lang#sh\" [[layers]] name = \"lang#markdown\" [[layers]] name = \"edit\" [[layers]] name = \"tools\" [[layers]] name = \"ssh\" [[layers]] name = \"sudo\" [[layers]] name = \"treesitter\" [[layers]] name = \"ui\" enable_sidebar = false enable_scrollbar = false enable_indentline = false enable_cursorword = false indentline_char = '' conceallevel = 0 concealcursor = '' cursorword_delay = 50 cursorword_exclude_filetype = [] indentline_exclude_filetyps = [] [[layers]] name = 'VersionControl' [[custom_plugins]] repo = \"mhartington/oceanic-next\" [[custom_plugins]] repo = 'ryanoasis/vim-devicons' [[custom_plugins]] repo = 'maxmellon/vim-jsx-pretty' [[custom_plugins]] repo = \"lilydjwg/colorizer\" [[custom_plugins]] repo = 'PhilRunninger/nerdtree-visual-selection' [[custom_plugins]] repo = 'PhilRunninger/nerdtree-buffer-ops' [[custom_plugins]] repo = 'tiagofumo/vim-nerdtree-syntax-highlight' [[custom_plugins]] repo = 'Xuyuanp/nerdtree-git-plugin'","title":"SpaceVim Config"},{"location":"software/vim/spacevim-config/#spacevim","text":"quick and easy vim / nvim configuration","title":"SpaceVim"},{"location":"software/vim/spacevim-config/#my-configuration-file","text":"$HOME/.SpaceVim.d/init.toml [options] autocomplete_method = \"coc\" autocomplete_parens = false automatic_update = true colorscheme = \"molokai\" # gruvbox hybrid molokai material nord one onedark palenight jellybeans srcery NeoSolarized OceanicNext SpaceVim default_indent = 4 enable_guicolors = true enable_vimfiler_welcome = true expand_tab = true filemanager = \"nerdtree\" # defx vimfiler filetree_direction = 'left' search_highlight_persist = false project_rooter_outermost = false relativenumber = true snippet_engine = \"ultisnips\" statusline_separator = 'arrow' vimcompatible = false windows_leader = \"s\" wrap_line = true [[layers]] name = \"default\" [[layers]] name = 'autocomplete' auto_completion_return_key_behavior = \"complete\" auto_completion_tab_key_behavior = \"smart\" [[layers]] name = \"colorscheme\" # random_theme = true #frequency = \"1h\" [[layers]] name = 'shell' default_position = 'top' default_height = 30 [[layers]] name = 'lang#javascript' # auto_fix = true # enable_flow_syntax = true # format_on_save = true [[layers]] name = 'lang#python' python_interpreter = '/bin/python3' python_file_head = [ '#!/bin/python3' , ] [[layers]] name = 'lsp' filetypes = [ \"css\" , # \"html\", \"javascript\" , \"javascriptreact\" , \"python\" , \"sh\" , \"typescript\" , \"typescriptreact\" , # \"vim\", \"vue\" , #\"rust\", ] # [layers.override_cmd] # rust = [\"rls\"] [[layers]] name = \"format\" format_on_save = true format_method = \"codefmt\" [[layers]] name = \"fzf\" [[layers]] name = \"lang#typescript\" [[layers]] name = \"lang#vue\" [[layers]] name = \"lang#html\" emmet_leader_key = \"<C-e>\" emmet_filetyps = [ 'html' ] [[layers]] name = \"lang#css\" [[layers]] name = \"lang#rust\" [[layers]] name = \"lang#vim\" [[layers]] name = \"lang#toml\" [[layers]] name = \"lang#sh\" [[layers]] name = \"lang#markdown\" [[layers]] name = \"edit\" [[layers]] name = \"tools\" [[layers]] name = \"ssh\" [[layers]] name = \"sudo\" [[layers]] name = \"treesitter\" [[layers]] name = \"ui\" enable_sidebar = false enable_scrollbar = false enable_indentline = false enable_cursorword = false indentline_char = '' conceallevel = 0 concealcursor = '' cursorword_delay = 50 cursorword_exclude_filetype = [] indentline_exclude_filetyps = [] [[layers]] name = 'VersionControl' [[custom_plugins]] repo = \"mhartington/oceanic-next\" [[custom_plugins]] repo = 'ryanoasis/vim-devicons' [[custom_plugins]] repo = 'maxmellon/vim-jsx-pretty' [[custom_plugins]] repo = \"lilydjwg/colorizer\" [[custom_plugins]] repo = 'PhilRunninger/nerdtree-visual-selection' [[custom_plugins]] repo = 'PhilRunninger/nerdtree-buffer-ops' [[custom_plugins]] repo = 'tiagofumo/vim-nerdtree-syntax-highlight' [[custom_plugins]] repo = 'Xuyuanp/nerdtree-git-plugin'","title":"my configuration file"}]}